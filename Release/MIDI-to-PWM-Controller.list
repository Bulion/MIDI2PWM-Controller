
MIDI-to-PWM-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a98  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000025c  20000000  08007ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000294c  2000025c  08007f44  0002025c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002ba8  08007f44  00022ba8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c8cf  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005969  00000000  00000000  0004cb5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000187bd  00000000  00000000  000524c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000015e8  00000000  00000000  0006ac81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003950  00000000  00000000  0006c269  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002bb01  00000000  00000000  0006fbb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001d074  00000000  00000000  0009b6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000f8264  00000000  00000000  000b872e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001b0992  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000049c4  00000000  00000000  001b0a10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000025c 	.word	0x2000025c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007c48 	.word	0x08007c48

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000260 	.word	0x20000260
 8000204:	08007c48 	.word	0x08007c48

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050a:	4c0d      	ldr	r4, [pc, #52]	; (8000540 <HAL_InitTick+0x38>)
 800050c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000510:	490c      	ldr	r1, [pc, #48]	; (8000544 <HAL_InitTick+0x3c>)
{
 8000512:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	7822      	ldrb	r2, [r4, #0]
 8000516:	6808      	ldr	r0, [r1, #0]
 8000518:	fbb3 f3f2 	udiv	r3, r3, r2
 800051c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000520:	f000 fae8 	bl	8000af4 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000524:	b908      	cbnz	r0, 800052a <HAL_InitTick+0x22>
 8000526:	2d0f      	cmp	r5, #15
 8000528:	d901      	bls.n	800052e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800052a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 800052c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052e:	2200      	movs	r2, #0
 8000530:	4629      	mov	r1, r5
 8000532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000536:	f000 fa99 	bl	8000a6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053a:	6065      	str	r5, [r4, #4]
 800053c:	2000      	movs	r0, #0
}
 800053e:	bd38      	pop	{r3, r4, r5, pc}
 8000540:	20000000 	.word	0x20000000
 8000544:	20000184 	.word	0x20000184

08000548 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054a:	2003      	movs	r0, #3
{
 800054c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800054e:	6813      	ldr	r3, [r2, #0]
 8000550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000554:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000556:	f000 fa75 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ffd4 	bl	8000508 <HAL_InitTick>
  HAL_MspInit();
 8000560:	f006 f9b2 	bl	80068c8 <HAL_MspInit>
}
 8000564:	2000      	movs	r0, #0
 8000566:	bd08      	pop	{r3, pc}
 8000568:	40023c00 	.word	0x40023c00

0800056c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <HAL_IncTick+0x10>)
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <HAL_IncTick+0x14>)
 8000570:	6811      	ldr	r1, [r2, #0]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	440b      	add	r3, r1
 8000576:	6013      	str	r3, [r2, #0]
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000298 	.word	0x20000298
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000584:	4b01      	ldr	r3, [pc, #4]	; (800058c <HAL_GetTick+0x8>)
 8000586:	6818      	ldr	r0, [r3, #0]
}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000298 	.word	0x20000298

08000590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
 8000592:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000594:	f7ff fff6 	bl	8000584 <HAL_GetTick>
 8000598:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800059a:	1c63      	adds	r3, r4, #1
 800059c:	d002      	beq.n	80005a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_Delay+0x20>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a4:	f7ff ffee 	bl	8000584 <HAL_GetTick>
 80005a8:	1b40      	subs	r0, r0, r5
 80005aa:	42a0      	cmp	r0, r4
 80005ac:	d3fa      	bcc.n	80005a4 <HAL_Delay+0x14>
  {
  }
}
 80005ae:	bd38      	pop	{r3, r4, r5, pc}
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b4:	2800      	cmp	r0, #0
 80005b6:	f000 8092 	beq.w	80006de <HAL_ADC_Init+0x12a>
{
 80005ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005bc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005be:	4604      	mov	r4, r0
 80005c0:	2d00      	cmp	r5, #0
 80005c2:	f000 8082 	beq.w	80006ca <HAL_ADC_Init+0x116>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005c8:	06db      	lsls	r3, r3, #27
 80005ca:	d504      	bpl.n	80005d6 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80005cc:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 80005ce:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80005d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 80005d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80005d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005d8:	4a4e      	ldr	r2, [pc, #312]	; (8000714 <HAL_ADC_Init+0x160>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80005da:	494f      	ldr	r1, [pc, #316]	; (8000718 <HAL_ADC_Init+0x164>)
    ADC_STATE_CLR_SET(hadc->State,
 80005dc:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005de:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005e0:	4d4e      	ldr	r5, [pc, #312]	; (800071c <HAL_ADC_Init+0x168>)
    ADC_STATE_CLR_SET(hadc->State,
 80005e2:	f042 0202 	orr.w	r2, r2, #2
 80005e6:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80005e8:	684a      	ldr	r2, [r1, #4]
 80005ea:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005ee:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80005f0:	684a      	ldr	r2, [r1, #4]
 80005f2:	6860      	ldr	r0, [r4, #4]
 80005f4:	4302      	orrs	r2, r0
 80005f6:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005f8:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005fa:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000600:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000604:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000606:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000608:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800060a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800060c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000610:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000612:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000614:	6858      	ldr	r0, [r3, #4]
 8000616:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800061a:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800061c:	6859      	ldr	r1, [r3, #4]
 800061e:	ea41 010c 	orr.w	r1, r1, ip
 8000622:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000624:	6899      	ldr	r1, [r3, #8]
 8000626:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800062a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	ea42 0207 	orr.w	r2, r2, r7
 8000632:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000634:	d055      	beq.n	80006e2 <HAL_ADC_Init+0x12e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000636:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000638:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800063a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800063e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	4316      	orrs	r6, r2
 8000644:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000646:	6899      	ldr	r1, [r3, #8]
 8000648:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800064c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	4302      	orrs	r2, r0
 8000652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000654:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000656:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000658:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800065c:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000660:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8000668:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800066a:	2800      	cmp	r0, #0
 800066c:	d142      	bne.n	80006f4 <HAL_ADC_Init+0x140>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000674:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000676:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8000678:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800067a:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800067c:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000680:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000684:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000686:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000688:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800068a:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800068c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800068e:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 8000692:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000694:	689d      	ldr	r5, [r3, #8]
 8000696:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 800069a:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800069c:	6899      	ldr	r1, [r3, #8]
 800069e:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 80006a2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006a4:	6899      	ldr	r1, [r3, #8]
 80006a6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80006aa:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80006b2:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006b4:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006b8:	f023 0303 	bic.w	r3, r3, #3
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006c2:	2300      	movs	r3, #0
 80006c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80006c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80006ca:	f004 fbd3 	bl	8004e74 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80006ce:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006d6:	06db      	lsls	r3, r3, #27
 80006d8:	f53f af78 	bmi.w	80005cc <HAL_ADC_Init+0x18>
 80006dc:	e77b      	b.n	80005d6 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 80006de:	2001      	movs	r0, #1
}
 80006e0:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	e7af      	b.n	8000654 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006f4:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006f8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006fc:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006fe:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	e7b1      	b.n	8000676 <HAL_ADC_Init+0xc2>
 8000712:	bf00      	nop
 8000714:	ffffeefd 	.word	0xffffeefd
 8000718:	40012300 	.word	0x40012300
 800071c:	0f000001 	.word	0x0f000001

08000720 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000720:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 8000724:	2200      	movs	r2, #0
{
 8000726:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 8000728:	2b01      	cmp	r3, #1
{
 800072a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 800072c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800072e:	d070      	beq.n	8000812 <HAL_ADC_Start+0xf2>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000730:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 8000732:	2101      	movs	r1, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000734:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 8000736:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800073a:	07d9      	lsls	r1, r3, #31
 800073c:	d414      	bmi.n	8000768 <HAL_ADC_Start+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <HAL_ADC_Start+0xfc>)
 8000740:	4c37      	ldr	r4, [pc, #220]	; (8000820 <HAL_ADC_Start+0x100>)
 8000742:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8000744:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000746:	fba4 4303 	umull	r4, r3, r4, r3
    __HAL_ADC_ENABLE(hadc);
 800074a:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800074e:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8000750:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000752:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000756:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8000758:	9b01      	ldr	r3, [sp, #4]
 800075a:	b12b      	cbz	r3, 8000768 <HAL_ADC_Start+0x48>
      counter--;
 800075c:	9b01      	ldr	r3, [sp, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8000762:	9b01      	ldr	r3, [sp, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f9      	bne.n	800075c <HAL_ADC_Start+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000768:	6893      	ldr	r3, [r2, #8]
 800076a:	07db      	lsls	r3, r3, #31
 800076c:	d524      	bpl.n	80007b8 <HAL_ADC_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State,
 800076e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000770:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <HAL_ADC_Start+0x104>)
 8000772:	400b      	ands	r3, r1
 8000774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000778:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800077a:	6853      	ldr	r3, [r2, #4]
 800077c:	055c      	lsls	r4, r3, #21
 800077e:	d505      	bpl.n	800078c <HAL_ADC_Start+0x6c>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000780:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000782:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800078a:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800078c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800078e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8000792:	d028      	beq.n	80007e6 <HAL_ADC_Start+0xc6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000794:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000796:	f023 0306 	bic.w	r3, r3, #6
 800079a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800079c:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 80007a0:	2400      	movs	r4, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <HAL_ADC_Start+0x108>)
    __HAL_UNLOCK(hadc);
 80007a4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007a8:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80007aa:	6859      	ldr	r1, [r3, #4]
 80007ac:	06c9      	lsls	r1, r1, #27
 80007ae:	d108      	bne.n	80007c2 <HAL_ADC_Start+0xa2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007b0:	6890      	ldr	r0, [r2, #8]
 80007b2:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80007b6:	d018      	beq.n	80007ea <HAL_ADC_Start+0xca>
  return HAL_OK;
 80007b8:	2000      	movs	r0, #0
}
 80007ba:	b003      	add	sp, #12
 80007bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007c0:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007c2:	491a      	ldr	r1, [pc, #104]	; (800082c <HAL_ADC_Start+0x10c>)
 80007c4:	428a      	cmp	r2, r1
 80007c6:	d018      	beq.n	80007fa <HAL_ADC_Start+0xda>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80007c8:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007ca:	06db      	lsls	r3, r3, #27
 80007cc:	d4f4      	bmi.n	80007b8 <HAL_ADC_Start+0x98>
 80007ce:	4918      	ldr	r1, [pc, #96]	; (8000830 <HAL_ADC_Start+0x110>)
 80007d0:	428a      	cmp	r2, r1
 80007d2:	d1f1      	bne.n	80007b8 <HAL_ADC_Start+0x98>
 80007d4:	6888      	ldr	r0, [r1, #8]
 80007d6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80007da:	d1ed      	bne.n	80007b8 <HAL_ADC_Start+0x98>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007dc:	688b      	ldr	r3, [r1, #8]
 80007de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80007e2:	608b      	str	r3, [r1, #8]
 80007e4:	e7e9      	b.n	80007ba <HAL_ADC_Start+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 80007e6:	6443      	str	r3, [r0, #68]	; 0x44
 80007e8:	e7d8      	b.n	800079c <HAL_ADC_Start+0x7c>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007ea:	6893      	ldr	r3, [r2, #8]
 80007ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80007f0:	6093      	str	r3, [r2, #8]
}
 80007f2:	b003      	add	sp, #12
 80007f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007f8:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007fa:	6893      	ldr	r3, [r2, #8]
 80007fc:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8000800:	d103      	bne.n	800080a <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000802:	6893      	ldr	r3, [r2, #8]
 8000804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000808:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <HAL_ADC_Start+0x108>)
  return HAL_OK;
 800080c:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	e7d3      	b.n	80007ba <HAL_ADC_Start+0x9a>
  __HAL_LOCK(hadc);
 8000812:	2002      	movs	r0, #2
}
 8000814:	b003      	add	sp, #12
 8000816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	20000184 	.word	0x20000184
 8000820:	431bde83 	.word	0x431bde83
 8000824:	fffff8fe 	.word	0xfffff8fe
 8000828:	40012300 	.word	0x40012300
 800082c:	40012000 	.word	0x40012000
 8000830:	40012200 	.word	0x40012200

08000834 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000834:	6803      	ldr	r3, [r0, #0]
 8000836:	689a      	ldr	r2, [r3, #8]
{
 8000838:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800083a:	0556      	lsls	r6, r2, #21
{
 800083c:	4605      	mov	r5, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800083e:	d502      	bpl.n	8000846 <HAL_ADC_PollForConversion+0x12>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000840:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000842:	05dc      	lsls	r4, r3, #23
 8000844:	d43c      	bmi.n	80008c0 <HAL_ADC_PollForConversion+0x8c>
 8000846:	460c      	mov	r4, r1
  tickstart = HAL_GetTick();
 8000848:	f7ff fe9c 	bl	8000584 <HAL_GetTick>
 800084c:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800084e:	682a      	ldr	r2, [r5, #0]
 8000850:	e001      	b.n	8000856 <HAL_ADC_PollForConversion+0x22>
    if(Timeout != HAL_MAX_DELAY)
 8000852:	1c60      	adds	r0, r4, #1
 8000854:	d125      	bne.n	80008a2 <HAL_ADC_PollForConversion+0x6e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000856:	6813      	ldr	r3, [r2, #0]
 8000858:	0799      	lsls	r1, r3, #30
 800085a:	d5fa      	bpl.n	8000852 <HAL_ADC_PollForConversion+0x1e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800085c:	f06f 0312 	mvn.w	r3, #18
 8000860:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000862:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000868:	642b      	str	r3, [r5, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800086a:	6893      	ldr	r3, [r2, #8]
 800086c:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8000870:	d115      	bne.n	800089e <HAL_ADC_PollForConversion+0x6a>
 8000872:	69ab      	ldr	r3, [r5, #24]
 8000874:	b99b      	cbnz	r3, 800089e <HAL_ADC_PollForConversion+0x6a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000876:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000878:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800087c:	d002      	beq.n	8000884 <HAL_ADC_PollForConversion+0x50>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800087e:	6893      	ldr	r3, [r2, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000880:	055b      	lsls	r3, r3, #21
 8000882:	d40c      	bmi.n	800089e <HAL_ADC_PollForConversion+0x6a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000884:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800088a:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800088c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800088e:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000892:	d104      	bne.n	800089e <HAL_ADC_PollForConversion+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000894:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	642b      	str	r3, [r5, #64]	; 0x40
}
 800089c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800089e:	2000      	movs	r0, #0
}
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008a2:	b124      	cbz	r4, 80008ae <HAL_ADC_PollForConversion+0x7a>
 80008a4:	f7ff fe6e 	bl	8000584 <HAL_GetTick>
 80008a8:	1b80      	subs	r0, r0, r6
 80008aa:	42a0      	cmp	r0, r4
 80008ac:	d9cf      	bls.n	800084e <HAL_ADC_PollForConversion+0x1a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008ae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80008b0:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 80008b2:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008b4:	f043 0304 	orr.w	r3, r3, #4
        __HAL_UNLOCK(hadc);
 80008b8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008bc:	642b      	str	r3, [r5, #64]	; 0x40
}
 80008be:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80008c2:	2200      	movs	r2, #0
    return HAL_ERROR;
 80008c4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008c6:	f043 0320 	orr.w	r3, r3, #32
    __HAL_UNLOCK(hadc);
 80008ca:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ce:	642b      	str	r3, [r5, #64]	; 0x40
}
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	bf00      	nop

080008d4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80008d4:	6803      	ldr	r3, [r0, #0]
 80008d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 80008dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 80008e0:	2200      	movs	r2, #0
{
 80008e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80008e4:	2b01      	cmp	r3, #1
{
 80008e6:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 80008e8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80008ea:	f000 809a 	beq.w	8000a22 <HAL_ADC_ConfigChannel+0x146>
	if (sConfig->Channel > ADC_CHANNEL_9)
 80008ee:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80008f0:	2201      	movs	r2, #1
 80008f2:	6803      	ldr	r3, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80008f4:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80008f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 80008fa:	b2af      	uxth	r7, r5
 80008fc:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80008fe:	d828      	bhi.n	8000952 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000900:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8000904:	f04f 0c07 	mov.w	ip, #7
 8000908:	691c      	ldr	r4, [r3, #16]
 800090a:	fa0c fc06 	lsl.w	ip, ip, r6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800090e:	fa02 f606 	lsl.w	r6, r2, r6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000912:	ea24 040c 	bic.w	r4, r4, ip
 8000916:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000918:	691a      	ldr	r2, [r3, #16]
 800091a:	4316      	orrs	r6, r2
 800091c:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 800091e:	684e      	ldr	r6, [r1, #4]
 8000920:	2e06      	cmp	r6, #6
 8000922:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8000926:	d82d      	bhi.n	8000984 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000928:	3a05      	subs	r2, #5
 800092a:	241f      	movs	r4, #31
 800092c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800092e:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000930:	fa07 f202 	lsl.w	r2, r7, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000934:	ea21 0104 	bic.w	r1, r1, r4
 8000938:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800093a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800093c:	430a      	orrs	r2, r1
 800093e:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000940:	4a3c      	ldr	r2, [pc, #240]	; (8000a34 <HAL_ADC_ConfigChannel+0x158>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d030      	beq.n	80009a8 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8000946:	2300      	movs	r3, #0
 8000948:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800094c:	4618      	mov	r0, r3
}
 800094e:	b003      	add	sp, #12
 8000950:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000952:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8000956:	f04f 0c07 	mov.w	ip, #7
 800095a:	68dc      	ldr	r4, [r3, #12]
 800095c:	3e1e      	subs	r6, #30
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800095e:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8000a38 <HAL_ADC_ConfigChannel+0x15c>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000962:	fa0c fc06 	lsl.w	ip, ip, r6
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000966:	4575      	cmp	r5, lr
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000968:	ea24 040c 	bic.w	r4, r4, ip
 800096c:	60dc      	str	r4, [r3, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800096e:	d05b      	beq.n	8000a28 <HAL_ADC_ConfigChannel+0x14c>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000970:	fa02 f606 	lsl.w	r6, r2, r6
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	4316      	orrs	r6, r2
 8000978:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 800097a:	684e      	ldr	r6, [r1, #4]
 800097c:	2e06      	cmp	r6, #6
 800097e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8000982:	d9d1      	bls.n	8000928 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13)
 8000984:	2e0c      	cmp	r6, #12
 8000986:	d837      	bhi.n	80009f8 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000988:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800098c:	261f      	movs	r6, #31
 800098e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000990:	40a6      	lsls	r6, r4
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000992:	fa07 f204 	lsl.w	r2, r7, r4
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000996:	ea21 0106 	bic.w	r1, r1, r6
 800099a:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800099c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800099e:	4314      	orrs	r4, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009a0:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <HAL_ADC_ConfigChannel+0x158>)
 80009a2:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009a4:	631c      	str	r4, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009a6:	d1ce      	bne.n	8000946 <HAL_ADC_ConfigChannel+0x6a>
 80009a8:	2d12      	cmp	r5, #18
 80009aa:	d033      	beq.n	8000a14 <HAL_ADC_ConfigChannel+0x138>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <HAL_ADC_ConfigChannel+0x15c>)
 80009ae:	429d      	cmp	r5, r3
 80009b0:	d001      	beq.n	80009b6 <HAL_ADC_ConfigChannel+0xda>
 80009b2:	2d11      	cmp	r5, #17
 80009b4:	d1c7      	bne.n	8000946 <HAL_ADC_ConfigChannel+0x6a>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80009b6:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <HAL_ADC_ConfigChannel+0x160>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80009b8:	491f      	ldr	r1, [pc, #124]	; (8000a38 <HAL_ADC_ConfigChannel+0x15c>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 80009ba:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80009bc:	428d      	cmp	r5, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 80009be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009c2:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80009c4:	d1bf      	bne.n	8000946 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80009c6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_ADC_ConfigChannel+0x164>)
 80009cc:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f202 3283 	addw	r2, r2, #899	; 0x383
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	0c9b      	lsrs	r3, r3, #18
 80009dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80009e4:	9b01      	ldr	r3, [sp, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0ad      	beq.n	8000946 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80009ea:	9b01      	ldr	r3, [sp, #4]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80009f0:	9b01      	ldr	r3, [sp, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1f9      	bne.n	80009ea <HAL_ADC_ConfigChannel+0x10e>
 80009f6:	e7a6      	b.n	8000946 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009f8:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80009fc:	261f      	movs	r6, #31
 80009fe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8000a00:	408e      	lsls	r6, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a02:	fa07 f201 	lsl.w	r2, r7, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a06:	ea24 0406 	bic.w	r4, r4, r6
 8000a0a:	62dc      	str	r4, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a12:	e795      	b.n	8000940 <HAL_ADC_ConfigChannel+0x64>
    ADC->CCR |= ADC_CCR_VBATE;
 8000a14:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8000a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8000a20:	e791      	b.n	8000946 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000a22:	2002      	movs	r0, #2
}
 8000a24:	b003      	add	sp, #12
 8000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000a28:	68de      	ldr	r6, [r3, #12]
 8000a2a:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8000a2e:	60de      	str	r6, [r3, #12]
 8000a30:	e775      	b.n	800091e <HAL_ADC_ConfigChannel+0x42>
 8000a32:	bf00      	nop
 8000a34:	40012000 	.word	0x40012000
 8000a38:	10000012 	.word	0x10000012
 8000a3c:	40012300 	.word	0x40012300
 8000a40:	20000184 	.word	0x20000184

08000a44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a46:	0200      	lsls	r0, r0, #8
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000a56:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a5c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5e:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8000a60:	60c8      	str	r0, [r1, #12]
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	05fa0000 	.word	0x05fa0000

08000a6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_NVIC_SetPriority+0x60>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a74:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a76:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	2d04      	cmp	r5, #4
 8000a7e:	bf28      	it	cs
 8000a80:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	2c06      	cmp	r4, #6
 8000a84:	d918      	bls.n	8000ab8 <HAL_NVIC_SetPriority+0x4c>
 8000a86:	3b03      	subs	r3, #3
 8000a88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a8c:	409c      	lsls	r4, r3
 8000a8e:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000a96:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	fa02 f205 	lsl.w	r2, r2, r5
 8000a9c:	ea21 0102 	bic.w	r1, r1, r2
 8000aa0:	fa01 f203 	lsl.w	r2, r1, r3
 8000aa4:	ea42 0204 	orr.w	r2, r2, r4
 8000aa8:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000aac:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8000aae:	db06      	blt.n	8000abe <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <HAL_NVIC_SetPriority+0x64>)
 8000ab2:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ab4:	bc30      	pop	{r4, r5}
 8000ab6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab8:	2400      	movs	r4, #0
 8000aba:	4623      	mov	r3, r4
 8000abc:	e7e9      	b.n	8000a92 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	f000 000f 	and.w	r0, r0, #15
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <HAL_NVIC_SetPriority+0x68>)
 8000ac4:	541a      	strb	r2, [r3, r0]
 8000ac6:	bc30      	pop	{r4, r5}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	e000e400 	.word	0xe000e400
 8000ad4:	e000ed14 	.word	0xe000ed14

08000ad8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	db07      	blt.n	8000aec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000adc:	f000 011f 	and.w	r1, r0, #31
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	0940      	lsrs	r0, r0, #5
 8000ae4:	4a02      	ldr	r2, [pc, #8]	; (8000af0 <HAL_NVIC_EnableIRQ+0x18>)
 8000ae6:	408b      	lsls	r3, r1
 8000ae8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	3801      	subs	r0, #1
 8000af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afa:	d20d      	bcs.n	8000b18 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afe:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b00:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b02:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	25f0      	movs	r5, #240	; 0xf0
 8000b06:	4c06      	ldr	r4, [pc, #24]	; (8000b20 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b08:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000b14:	bc30      	pop	{r4, r5}
 8000b16:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e010 	.word	0xe000e010
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b24:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8000b28:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b2a:	2a02      	cmp	r2, #2
 8000b2c:	d003      	beq.n	8000b36 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b2e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8000b30:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b34:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b36:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b38:	2105      	movs	r1, #5
  }

  return HAL_OK;
 8000b3a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b3c:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000b40:	6813      	ldr	r3, [r2, #0]
 8000b42:	f023 0301 	bic.w	r3, r3, #1
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b50:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8000d80 <HAL_GPIO_Init+0x234>
{
 8000b54:	b083      	sub	sp, #12
 8000b56:	468e      	mov	lr, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b58:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8000d84 <HAL_GPIO_Init+0x238>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5e:	f8d1 8000 	ldr.w	r8, [r1]
 8000b62:	e003      	b.n	8000b6c <HAL_GPIO_Init+0x20>
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b64:	3501      	adds	r5, #1
 8000b66:	2d10      	cmp	r5, #16
 8000b68:	f000 80b6 	beq.w	8000cd8 <HAL_GPIO_Init+0x18c>
    ioposition = ((uint32_t)0x01) << position;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b70:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 8000b74:	428b      	cmp	r3, r1
 8000b76:	d1f5      	bne.n	8000b64 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b78:	f8de 4004 	ldr.w	r4, [lr, #4]
 8000b7c:	f024 0710 	bic.w	r7, r4, #16
 8000b80:	2f02      	cmp	r7, #2
 8000b82:	f040 80ac 	bne.w	8000cde <HAL_GPIO_Init+0x192>
        temp = GPIOx->AFR[position >> 3];
 8000b86:	08ef      	lsrs	r7, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b88:	f005 0a07 	and.w	sl, r5, #7
 8000b8c:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b90:	f8de 2010 	ldr.w	r2, [lr, #16]
 8000b94:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b98:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000b9c:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b9e:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ba2:	fa02 f20a 	lsl.w	r2, r2, sl
 8000ba6:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000baa:	ea26 060b 	bic.w	r6, r6, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bae:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000bb2:	4332      	orrs	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bb4:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bb8:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3] = temp;
 8000bbc:	623a      	str	r2, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bbe:	ea6f 020b 	mvn.w	r2, fp
      temp = GPIOx->MODER;
 8000bc2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bc4:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bc8:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bca:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000bcc:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8000bce:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bd0:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bd4:	ea06 0b02 	and.w	fp, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bd8:	f8de 600c 	ldr.w	r6, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bdc:	40af      	lsls	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bde:	fa06 f60a 	lsl.w	r6, r6, sl
 8000be2:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8000be6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000be8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bea:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bee:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8000bf0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bf2:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf4:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bf6:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bfa:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bfe:	fa03 f30a 	lsl.w	r3, r3, sl
 8000c02:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->PUPDR = temp;
 8000c06:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c08:	d5ac      	bpl.n	8000b64 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000c0e:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c12:	f005 0303 	and.w	r3, r5, #3
 8000c16:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c18:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000c1c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c20:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000c26:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000c2a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c2e:	fa02 fa03 	lsl.w	sl, r2, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000c36:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c38:	4e48      	ldr	r6, [pc, #288]	; (8000d5c <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	9a01      	ldr	r2, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c3c:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2];
 8000c3e:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c40:	ea22 020a 	bic.w	r2, r2, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c44:	d020      	beq.n	8000c88 <HAL_GPIO_Init+0x13c>
 8000c46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c4a:	42b0      	cmp	r0, r6
 8000c4c:	d05e      	beq.n	8000d0c <HAL_GPIO_Init+0x1c0>
 8000c4e:	4e44      	ldr	r6, [pc, #272]	; (8000d60 <HAL_GPIO_Init+0x214>)
 8000c50:	42b0      	cmp	r0, r6
 8000c52:	d060      	beq.n	8000d16 <HAL_GPIO_Init+0x1ca>
 8000c54:	4e43      	ldr	r6, [pc, #268]	; (8000d64 <HAL_GPIO_Init+0x218>)
 8000c56:	42b0      	cmp	r0, r6
 8000c58:	d062      	beq.n	8000d20 <HAL_GPIO_Init+0x1d4>
 8000c5a:	4e43      	ldr	r6, [pc, #268]	; (8000d68 <HAL_GPIO_Init+0x21c>)
 8000c5c:	42b0      	cmp	r0, r6
 8000c5e:	d064      	beq.n	8000d2a <HAL_GPIO_Init+0x1de>
 8000c60:	4e42      	ldr	r6, [pc, #264]	; (8000d6c <HAL_GPIO_Init+0x220>)
 8000c62:	42b0      	cmp	r0, r6
 8000c64:	d06b      	beq.n	8000d3e <HAL_GPIO_Init+0x1f2>
 8000c66:	4e42      	ldr	r6, [pc, #264]	; (8000d70 <HAL_GPIO_Init+0x224>)
 8000c68:	42b0      	cmp	r0, r6
 8000c6a:	d06d      	beq.n	8000d48 <HAL_GPIO_Init+0x1fc>
 8000c6c:	4e41      	ldr	r6, [pc, #260]	; (8000d74 <HAL_GPIO_Init+0x228>)
 8000c6e:	42b0      	cmp	r0, r6
 8000c70:	d060      	beq.n	8000d34 <HAL_GPIO_Init+0x1e8>
 8000c72:	4e41      	ldr	r6, [pc, #260]	; (8000d78 <HAL_GPIO_Init+0x22c>)
 8000c74:	42b0      	cmp	r0, r6
 8000c76:	d06c      	beq.n	8000d52 <HAL_GPIO_Init+0x206>
 8000c78:	4e40      	ldr	r6, [pc, #256]	; (8000d7c <HAL_GPIO_Init+0x230>)
 8000c7a:	42b0      	cmp	r0, r6
 8000c7c:	bf0c      	ite	eq
 8000c7e:	2609      	moveq	r6, #9
 8000c80:	260a      	movne	r6, #10
 8000c82:	fa06 f303 	lsl.w	r3, r6, r3
 8000c86:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c88:	60ba      	str	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8a:	03e6      	lsls	r6, r4, #15
        temp = EXTI->IMR;
 8000c8c:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 8000c90:	ea6f 0201 	mvn.w	r2, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c94:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8000c98:	bf54      	ite	pl
 8000c9a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000c9c:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c9e:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 8000ca0:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI->EMR;
 8000ca4:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ca8:	bf54      	ite	pl
 8000caa:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000cac:	430b      	orrmi	r3, r1
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cae:	02e6      	lsls	r6, r4, #11
        EXTI->EMR = temp;
 8000cb0:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR;
 8000cb4:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cb8:	bf54      	ite	pl
 8000cba:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000cbc:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cbe:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000cc0:	f8cc 3008 	str.w	r3, [ip, #8]
        temp = EXTI->FTSR;
 8000cc4:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cc8:	bf54      	ite	pl
 8000cca:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000ccc:	430b      	orrmi	r3, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cce:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8000cd0:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cd4:	f47f af4a 	bne.w	8000b6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000cd8:	b003      	add	sp, #12
 8000cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cde:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ce2:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8000ce4:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cea:	ea04 0602 	and.w	r6, r4, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cee:	fa02 f20a 	lsl.w	r2, r2, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf2:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cf4:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cf8:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cfc:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d00:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 8000d04:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d06:	f63f af74 	bhi.w	8000bf2 <HAL_GPIO_Init+0xa6>
 8000d0a:	e760      	b.n	8000bce <HAL_GPIO_Init+0x82>
 8000d0c:	2601      	movs	r6, #1
 8000d0e:	fa06 f303 	lsl.w	r3, r6, r3
 8000d12:	431a      	orrs	r2, r3
 8000d14:	e7b8      	b.n	8000c88 <HAL_GPIO_Init+0x13c>
 8000d16:	2602      	movs	r6, #2
 8000d18:	fa06 f303 	lsl.w	r3, r6, r3
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	e7b3      	b.n	8000c88 <HAL_GPIO_Init+0x13c>
 8000d20:	2603      	movs	r6, #3
 8000d22:	fa06 f303 	lsl.w	r3, r6, r3
 8000d26:	431a      	orrs	r2, r3
 8000d28:	e7ae      	b.n	8000c88 <HAL_GPIO_Init+0x13c>
 8000d2a:	2604      	movs	r6, #4
 8000d2c:	fa06 f303 	lsl.w	r3, r6, r3
 8000d30:	431a      	orrs	r2, r3
 8000d32:	e7a9      	b.n	8000c88 <HAL_GPIO_Init+0x13c>
 8000d34:	2607      	movs	r6, #7
 8000d36:	fa06 f303 	lsl.w	r3, r6, r3
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	e7a4      	b.n	8000c88 <HAL_GPIO_Init+0x13c>
 8000d3e:	2605      	movs	r6, #5
 8000d40:	fa06 f303 	lsl.w	r3, r6, r3
 8000d44:	431a      	orrs	r2, r3
 8000d46:	e79f      	b.n	8000c88 <HAL_GPIO_Init+0x13c>
 8000d48:	2606      	movs	r6, #6
 8000d4a:	fa06 f303 	lsl.w	r3, r6, r3
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	e79a      	b.n	8000c88 <HAL_GPIO_Init+0x13c>
 8000d52:	2608      	movs	r6, #8
 8000d54:	fa06 f303 	lsl.w	r3, r6, r3
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	e795      	b.n	8000c88 <HAL_GPIO_Init+0x13c>
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40020800 	.word	0x40020800
 8000d64:	40020c00 	.word	0x40020c00
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40021400 	.word	0x40021400
 8000d70:	40021800 	.word	0x40021800
 8000d74:	40021c00 	.word	0x40021c00
 8000d78:	40022000 	.word	0x40022000
 8000d7c:	40022400 	.word	0x40022400
 8000d80:	40013c00 	.word	0x40013c00
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d88:	6903      	ldr	r3, [r0, #16]
 8000d8a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d8c:	bf14      	ite	ne
 8000d8e:	2001      	movne	r0, #1
 8000d90:	2000      	moveq	r0, #0
 8000d92:	4770      	bx	lr

08000d94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d94:	b902      	cbnz	r2, 8000d98 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d96:	0409      	lsls	r1, r1, #16
 8000d98:	6181      	str	r1, [r0, #24]
  }
}
 8000d9a:	4770      	bx	lr

08000d9c <I2C_IsAcknowledgeFailed.part.1>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	4605      	mov	r5, r0
 8000da0:	460c      	mov	r4, r1
 8000da2:	4616      	mov	r6, r2
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000da4:	6828      	ldr	r0, [r5, #0]
 8000da6:	e001      	b.n	8000dac <I2C_IsAcknowledgeFailed.part.1+0x10>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000da8:	1c63      	adds	r3, r4, #1
 8000daa:	d120      	bne.n	8000dee <I2C_IsAcknowledgeFailed.part.1+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000dac:	6983      	ldr	r3, [r0, #24]
 8000dae:	0699      	lsls	r1, r3, #26
 8000db0:	d5fa      	bpl.n	8000da8 <I2C_IsAcknowledgeFailed.part.1+0xc>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000db2:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000db4:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000db6:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000db8:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000dba:	6983      	ldr	r3, [r0, #24]
 8000dbc:	079a      	lsls	r2, r3, #30
 8000dbe:	d501      	bpl.n	8000dc4 <I2C_IsAcknowledgeFailed.part.1+0x28>
    hi2c->Instance->TXDR = 0x00U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	6283      	str	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000dc4:	6983      	ldr	r3, [r0, #24]
 8000dc6:	07db      	lsls	r3, r3, #31
 8000dc8:	d524      	bpl.n	8000e14 <I2C_IsAcknowledgeFailed.part.1+0x78>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000dca:	6843      	ldr	r3, [r0, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dcc:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8000dce:	4c14      	ldr	r4, [pc, #80]	; (8000e20 <I2C_IsAcknowledgeFailed.part.1+0x84>)
    hi2c->State = HAL_I2C_STATE_READY;
 8000dd0:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000dd6:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dd8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000de2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000de6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8000dea:	2001      	movs	r0, #1
 8000dec:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dee:	f7ff fbc9 	bl	8000584 <HAL_GetTick>
 8000df2:	1b80      	subs	r0, r0, r6
 8000df4:	4284      	cmp	r4, r0
 8000df6:	d301      	bcc.n	8000dfc <I2C_IsAcknowledgeFailed.part.1+0x60>
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	d1d3      	bne.n	8000da4 <I2C_IsAcknowledgeFailed.part.1+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000dfc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000dfe:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e00:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e02:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8000e04:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e08:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000e0a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e0e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8000e12:	e7ea      	b.n	8000dea <I2C_IsAcknowledgeFailed.part.1+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e14:	6983      	ldr	r3, [r0, #24]
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6183      	str	r3, [r0, #24]
 8000e1c:	e7d5      	b.n	8000dca <I2C_IsAcknowledgeFailed.part.1+0x2e>
 8000e1e:	bf00      	nop
 8000e20:	fe00e800 	.word	0xfe00e800

08000e24 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4605      	mov	r5, r0
 8000e28:	460c      	mov	r4, r1
 8000e2a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e2c:	e001      	b.n	8000e32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8000e2e:	1c61      	adds	r1, r4, #1
 8000e30:	d111      	bne.n	8000e56 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e32:	682b      	ldr	r3, [r5, #0]
 8000e34:	699a      	ldr	r2, [r3, #24]
 8000e36:	0792      	lsls	r2, r2, #30
 8000e38:	d40b      	bmi.n	8000e52 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	06d8      	lsls	r0, r3, #27
 8000e3e:	d5f6      	bpl.n	8000e2e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8000e40:	4632      	mov	r2, r6
 8000e42:	4621      	mov	r1, r4
 8000e44:	4628      	mov	r0, r5
 8000e46:	f7ff ffa9 	bl	8000d9c <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d0ef      	beq.n	8000e2e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 8000e4e:	2001      	movs	r0, #1
}
 8000e50:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000e52:	2000      	movs	r0, #0
}
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e56:	f7ff fb95 	bl	8000584 <HAL_GetTick>
 8000e5a:	1b80      	subs	r0, r0, r6
 8000e5c:	42a0      	cmp	r0, r4
 8000e5e:	d801      	bhi.n	8000e64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d1e6      	bne.n	8000e32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e64:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e66:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e68:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8000e6a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e6c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8000e6e:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e72:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e74:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e78:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}
 8000e7e:	bf00      	nop

08000e80 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	4605      	mov	r5, r0
 8000e84:	460c      	mov	r4, r1
 8000e86:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e88:	e00b      	b.n	8000ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	06db      	lsls	r3, r3, #27
 8000e8e:	d502      	bpl.n	8000e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8000e90:	f7ff ff84 	bl	8000d9c <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e94:	b9d8      	cbnz	r0, 8000ece <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e96:	f7ff fb75 	bl	8000584 <HAL_GetTick>
 8000e9a:	1b80      	subs	r0, r0, r6
 8000e9c:	42a0      	cmp	r0, r4
 8000e9e:	d809      	bhi.n	8000eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8000ea0:	b144      	cbz	r4, 8000eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	4632      	mov	r2, r6
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	699f      	ldr	r7, [r3, #24]
 8000eac:	06bf      	lsls	r7, r7, #26
 8000eae:	d5ec      	bpl.n	8000e8a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8000eb0:	2000      	movs	r0, #0
}
 8000eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000eb4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000eb6:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eb8:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8000eba:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ebc:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8000ebe:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ec2:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ec4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec8:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8000ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8000ece:	2001      	movs	r0, #1
}
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	bf00      	nop

08000ed4 <I2C_WaitOnFlagUntilTimeout>:
{
 8000ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed8:	4680      	mov	r8, r0
 8000eda:	460f      	mov	r7, r1
 8000edc:	4616      	mov	r6, r2
 8000ede:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ee0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ee4:	e001      	b.n	8000eea <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8000ee6:	1c6b      	adds	r3, r5, #1
 8000ee8:	d10a      	bne.n	8000f00 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000eea:	69a0      	ldr	r0, [r4, #24]
 8000eec:	ea37 0300 	bics.w	r3, r7, r0
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2001      	moveq	r0, #1
 8000ef4:	2000      	movne	r0, #0
 8000ef6:	42b0      	cmp	r0, r6
 8000ef8:	d0f5      	beq.n	8000ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8000efa:	2000      	movs	r0, #0
}
 8000efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f00:	f7ff fb40 	bl	8000584 <HAL_GetTick>
 8000f04:	9b06      	ldr	r3, [sp, #24]
 8000f06:	1ac0      	subs	r0, r0, r3
 8000f08:	42a8      	cmp	r0, r5
 8000f0a:	d801      	bhi.n	8000f10 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8000f0c:	2d00      	cmp	r5, #0
 8000f0e:	d1e7      	bne.n	8000ee0 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f10:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f14:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f16:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8000f18:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f1a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8000f1c:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f20:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f24:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f28:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
 8000f2c:	e7e6      	b.n	8000efc <I2C_WaitOnFlagUntilTimeout+0x28>
 8000f2e:	bf00      	nop

08000f30 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d04d      	beq.n	8000fd0 <HAL_I2C_Init+0xa0>
{
 8000f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d040      	beq.n	8000fc6 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f44:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f46:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f48:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f4c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f50:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8000f52:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f54:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8000f58:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8000f5a:	f020 0001 	bic.w	r0, r0, #1
 8000f5e:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f60:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f62:	6899      	ldr	r1, [r3, #8]
 8000f64:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8000f68:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f6a:	d028      	beq.n	8000fbe <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f6c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f70:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f72:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f74:	d102      	bne.n	8000f7c <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f7c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f7e:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f80:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8000f82:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f84:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f86:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f88:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f8c:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f8e:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f90:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f92:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f94:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f98:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f9a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f9e:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fa0:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8000fa2:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fa4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fa6:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb0:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb2:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fb6:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8000fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	e7da      	b.n	8000f7c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8000fc6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000fca:	f004 f95b 	bl	8005284 <HAL_I2C_MspInit>
 8000fce:	e7b9      	b.n	8000f44 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
}
 8000fd2:	4770      	bx	lr
 8000fd4:	02008000 	.word	0x02008000

08000fd8 <HAL_I2C_Master_Transmit>:
{
 8000fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fdc:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8000fe0:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe2:	2c20      	cmp	r4, #32
 8000fe4:	d170      	bne.n	80010c8 <HAL_I2C_Master_Transmit+0xf0>
    __HAL_LOCK(hi2c);
 8000fe6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8000fea:	2c01      	cmp	r4, #1
 8000fec:	d06c      	beq.n	80010c8 <HAL_I2C_Master_Transmit+0xf0>
 8000fee:	f04f 0901 	mov.w	r9, #1
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	461f      	mov	r7, r3
 8000ff6:	4690      	mov	r8, r2
 8000ff8:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
 8000ffc:	460e      	mov	r6, r1
    tickstart = HAL_GetTick();
 8000ffe:	f7ff fac1 	bl	8000584 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001002:	464a      	mov	r2, r9
    tickstart = HAL_GetTick();
 8001004:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001006:	9000      	str	r0, [sp, #0]
 8001008:	2319      	movs	r3, #25
 800100a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100e:	4620      	mov	r0, r4
 8001010:	f7ff ff60 	bl	8000ed4 <I2C_WaitOnFlagUntilTimeout>
 8001014:	2800      	cmp	r0, #0
 8001016:	d15b      	bne.n	80010d0 <HAL_I2C_Master_Transmit+0xf8>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001018:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800101a:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800101c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 8001020:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001024:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800102c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800102e:	8567      	strh	r7, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001030:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001032:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001034:	2bff      	cmp	r3, #255	; 0xff
 8001036:	6821      	ldr	r1, [r4, #0]
 8001038:	d95b      	bls.n	80010f2 <HAL_I2C_Master_Transmit+0x11a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800103a:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800103c:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800103e:	4f3d      	ldr	r7, [pc, #244]	; (8001134 <HAL_I2C_Master_Transmit+0x15c>)
 8001040:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <HAL_I2C_Master_Transmit+0x160>)
 8001042:	403b      	ands	r3, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001044:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001046:	4332      	orrs	r2, r6
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
 800104c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8001144 <HAL_I2C_Master_Transmit+0x16c>
 8001050:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001148 <HAL_I2C_Master_Transmit+0x170>
 8001054:	ea49 0906 	orr.w	r9, r9, r6
    while (hi2c->XferCount > 0U)
 8001058:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800105a:	462a      	mov	r2, r5
 800105c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800105e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001060:	b29b      	uxth	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d053      	beq.n	800110e <HAL_I2C_Master_Transmit+0x136>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001066:	f7ff fedd 	bl	8000e24 <I2C_WaitOnTXISFlagUntilTimeout>
 800106a:	2800      	cmp	r0, #0
 800106c:	d130      	bne.n	80010d0 <HAL_I2C_Master_Transmit+0xf8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800106e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001070:	6827      	ldr	r7, [r4, #0]
 8001072:	f812 1b01 	ldrb.w	r1, [r2], #1
      hi2c->XferSize--;
 8001076:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001078:	62b9      	str	r1, [r7, #40]	; 0x28
      hi2c->XferCount--;
 800107a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800107c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800107e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001080:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8001082:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8001084:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8001086:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001088:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800108a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800108c:	b289      	uxth	r1, r1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1e2      	bne.n	8001058 <HAL_I2C_Master_Transmit+0x80>
 8001092:	2900      	cmp	r1, #0
 8001094:	d0e0      	beq.n	8001058 <HAL_I2C_Master_Transmit+0x80>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001096:	4602      	mov	r2, r0
 8001098:	9500      	str	r5, [sp, #0]
 800109a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff ff18 	bl	8000ed4 <I2C_WaitOnFlagUntilTimeout>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80010a4:	f046 7c00 	orr.w	ip, r6, #33554432	; 0x2000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010a8:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010ac:	b980      	cbnz	r0, 80010d0 <HAL_I2C_Master_Transmit+0xf8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ae:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80010b0:	6822      	ldr	r2, [r4, #0]
 80010b2:	4571      	cmp	r1, lr
 80010b4:	d910      	bls.n	80010d8 <HAL_I2C_Master_Transmit+0x100>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80010b6:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010b8:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80010bc:	ea03 0308 	and.w	r3, r3, r8
 80010c0:	ea43 0309 	orr.w	r3, r3, r9
 80010c4:	6053      	str	r3, [r2, #4]
 80010c6:	e7c7      	b.n	8001058 <HAL_I2C_Master_Transmit+0x80>
    return HAL_BUSY;
 80010c8:	2002      	movs	r0, #2
}
 80010ca:	b003      	add	sp, #12
 80010cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 80010d0:	2001      	movs	r0, #1
}
 80010d2:	b003      	add	sp, #12
 80010d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 80010d8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80010da:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80010dc:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80010de:	ea03 0308 	and.w	r3, r3, r8
 80010e2:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
 80010e4:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80010e6:	ea43 030c 	orr.w	r3, r3, ip
 80010ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80010ee:	6053      	str	r3, [r2, #4]
 80010f0:	e7b2      	b.n	8001058 <HAL_I2C_Master_Transmit+0x80>
      hi2c->XferSize = hi2c->XferCount;
 80010f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80010f4:	4f0f      	ldr	r7, [pc, #60]	; (8001134 <HAL_I2C_Master_Transmit+0x15c>)
 80010f6:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 80010f8:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80010fa:	4810      	ldr	r0, [pc, #64]	; (800113c <HAL_I2C_Master_Transmit+0x164>)
 80010fc:	403b      	ands	r3, r7
      hi2c->XferSize = hi2c->XferCount;
 80010fe:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001100:	4330      	orrs	r0, r6
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	4303      	orrs	r3, r0
 8001106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800110a:	604b      	str	r3, [r1, #4]
 800110c:	e79e      	b.n	800104c <HAL_I2C_Master_Transmit+0x74>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800110e:	f7ff feb7 	bl	8000e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001112:	2800      	cmp	r0, #0
 8001114:	d1dc      	bne.n	80010d0 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800111a:	4d09      	ldr	r5, [pc, #36]	; (8001140 <HAL_I2C_Master_Transmit+0x168>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800111c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	402a      	ands	r2, r5
 8001122:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001124:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001128:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800112c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001130:	e7cb      	b.n	80010ca <HAL_I2C_Master_Transmit+0xf2>
 8001132:	bf00      	nop
 8001134:	fc009800 	.word	0xfc009800
 8001138:	81ff2000 	.word	0x81ff2000
 800113c:	82002000 	.word	0x82002000
 8001140:	fe00e800 	.word	0xfe00e800
 8001144:	01ff0000 	.word	0x01ff0000
 8001148:	fc009c00 	.word	0xfc009c00

0800114c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800114c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b20      	cmp	r3, #32
{
 8001154:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001156:	d11f      	bne.n	8001198 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001158:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800115c:	2a01      	cmp	r2, #1
 800115e:	d01b      	beq.n	8001198 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001160:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001162:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001164:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001166:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800116a:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 800116c:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 800116e:	f025 0501 	bic.w	r5, r5, #1
 8001172:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001174:	6815      	ldr	r5, [r2, #0]
 8001176:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800117a:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800117c:	6815      	ldr	r5, [r2, #0]
 800117e:	4329      	orrs	r1, r5
 8001180:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001182:	6811      	ldr	r1, [r2, #0]
 8001184:	f041 0101 	orr.w	r1, r1, #1
 8001188:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800118a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800118e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001192:	4620      	mov	r0, r4
 8001194:	bc70      	pop	{r4, r5, r6}
 8001196:	4770      	bx	lr
    return HAL_BUSY;
 8001198:	2402      	movs	r4, #2
}
 800119a:	4620      	mov	r0, r4
 800119c:	bc70      	pop	{r4, r5, r6}
 800119e:	4770      	bx	lr

080011a0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b20      	cmp	r3, #32
{
 80011a8:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011aa:	d11e      	bne.n	80011ea <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ac:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80011b0:	2a01      	cmp	r2, #1
 80011b2:	d01a      	beq.n	80011ea <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011b4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80011b6:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011b8:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80011ba:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80011be:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 80011c0:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 80011c2:	f024 0401 	bic.w	r4, r4, #1
 80011c6:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80011c8:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80011ca:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80011ce:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80011d2:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80011d4:	6811      	ldr	r1, [r2, #0]
 80011d6:	f041 0101 	orr.w	r1, r1, #1
 80011da:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80011dc:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80011e0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 80011e4:	4628      	mov	r0, r5
 80011e6:	bc70      	pop	{r4, r5, r6}
 80011e8:	4770      	bx	lr
    return HAL_BUSY;
 80011ea:	2502      	movs	r5, #2
}
 80011ec:	4628      	mov	r0, r5
 80011ee:	bc70      	pop	{r4, r5, r6}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	b08b      	sub	sp, #44	; 0x2c
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011f8:	2800      	cmp	r0, #0
 80011fa:	f000 8084 	beq.w	8001306 <HAL_PCD_Init+0x112>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011fe:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001202:	4604      	mov	r4, r0
 8001204:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001208:	2b00      	cmp	r3, #0
 800120a:	d077      	beq.n	80012fc <HAL_PCD_Init+0x108>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800120c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800120e:	4625      	mov	r5, r4
  __HAL_PCD_DISABLE(hpcd);
 8001210:	6820      	ldr	r0, [r4, #0]
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001212:	466f      	mov	r7, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001214:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001218:	1d26      	adds	r6, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 800121a:	f002 fc1f 	bl	8003a5c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800121e:	f855 eb10 	ldr.w	lr, [r5], #16
 8001222:	46ac      	mov	ip, r5
 8001224:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001228:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800122a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800122e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001230:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001234:	e887 0003 	stmia.w	r7, {r0, r1}
 8001238:	4670      	mov	r0, lr
 800123a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800123e:	f002 fb47 	bl	80038d0 <USB_CoreInit>
 8001242:	4607      	mov	r7, r0
 8001244:	b130      	cbz	r0, 8001254 <HAL_PCD_Init+0x60>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8001246:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001248:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800124a:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 800124c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 8001250:	b00b      	add	sp, #44	; 0x2c
 8001252:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001254:	4601      	mov	r1, r0
 8001256:	6820      	ldr	r0, [r4, #0]
 8001258:	f002 fc08 	bl	8003a6c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125c:	6860      	ldr	r0, [r4, #4]
 800125e:	b360      	cbz	r0, 80012ba <HAL_PCD_Init+0xc6>
 8001260:	4639      	mov	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8001262:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001266:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8001268:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126c:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 800126e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8001272:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001276:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127a:	b2f9      	uxtb	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 800127c:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001280:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8001286:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001288:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128c:	d3ec      	bcc.n	8001268 <HAL_PCD_Init+0x74>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128e:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8001290:	4611      	mov	r1, r2
 8001292:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001296:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8001298:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800129c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a0:	b2fa      	uxtb	r2, r7
    hpcd->OUT_ep[i].is_in = 0U;
 80012a2:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a6:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012a8:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ac:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012b0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012b4:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b8:	d3eb      	bcc.n	8001292 <HAL_PCD_Init+0x9e>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ba:	466f      	mov	r7, sp
 80012bc:	f8d4 c000 	ldr.w	ip, [r4]
 80012c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80012c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012cc:	e887 0003 	stmia.w	r7, {r0, r1}
 80012d0:	4660      	mov	r0, ip
 80012d2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80012d6:	f002 fbe1 	bl	8003a9c <USB_DevInit>
 80012da:	4605      	mov	r5, r0
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1b2      	bne.n	8001246 <HAL_PCD_Init+0x52>
  hpcd->State = HAL_PCD_STATE_READY;
 80012e0:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80012e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 80012e4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 80012e8:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 80012ea:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80012ee:	d00e      	beq.n	800130e <HAL_PCD_Init+0x11a>
  (void)USB_DevDisconnect(hpcd->Instance);
 80012f0:	6820      	ldr	r0, [r4, #0]
 80012f2:	f002 ff71 	bl	80041d8 <USB_DevDisconnect>
}
 80012f6:	4628      	mov	r0, r5
 80012f8:	b00b      	add	sp, #44	; 0x2c
 80012fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80012fc:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001300:	f006 f918 	bl	8007534 <HAL_PCD_MspInit>
 8001304:	e782      	b.n	800120c <HAL_PCD_Init+0x18>
    return HAL_ERROR;
 8001306:	2501      	movs	r5, #1
}
 8001308:	4628      	mov	r0, r5
 800130a:	b00b      	add	sp, #44	; 0x2c
 800130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800130e:	4620      	mov	r0, r4
 8001310:	f000 fd22 	bl	8001d58 <HAL_PCDEx_ActivateLPM>
 8001314:	e7ec      	b.n	80012f0 <HAL_PCD_Init+0xfc>
 8001316:	bf00      	nop

08001318 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001318:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800131c:	2b01      	cmp	r3, #1
 800131e:	d00e      	beq.n	800133e <HAL_PCD_Start+0x26>
 8001320:	2301      	movs	r3, #1
{
 8001322:	b510      	push	{r4, lr}
 8001324:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 8001326:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001328:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800132c:	f002 ff48 	bl	80041c0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001330:	6820      	ldr	r0, [r4, #0]
 8001332:	f002 fb8b 	bl	8003a4c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001336:	2000      	movs	r0, #0
 8001338:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 800133c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800133e:	2002      	movs	r0, #2
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop

08001344 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001348:	6806      	ldr	r6, [r0, #0]
{
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum = 0U;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800134e:	4630      	mov	r0, r6
 8001350:	f002 ff80 	bl	8004254 <USB_GetMode>
 8001354:	b110      	cbz	r0, 800135c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8001356:	b009      	add	sp, #36	; 0x24
 8001358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800135c:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800135e:	6820      	ldr	r0, [r4, #0]
 8001360:	f002 ff46 	bl	80041f0 <USB_ReadInterrupts>
 8001364:	2800      	cmp	r0, #0
 8001366:	d0f6      	beq.n	8001356 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001368:	6820      	ldr	r0, [r4, #0]
 800136a:	f002 ff41 	bl	80041f0 <USB_ReadInterrupts>
 800136e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001372:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001374:	d003      	beq.n	800137e <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001376:	6943      	ldr	r3, [r0, #20]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800137e:	f002 ff37 	bl	80041f0 <USB_ReadInterrupts>
 8001382:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001386:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001388:	f040 81ce 	bne.w	8001728 <HAL_PCD_IRQHandler+0x3e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800138c:	f002 ff30 	bl	80041f0 <USB_ReadInterrupts>
 8001390:	0343      	lsls	r3, r0, #13
 8001392:	f100 8124 	bmi.w	80015de <HAL_PCD_IRQHandler+0x29a>
 8001396:	f8d4 a000 	ldr.w	sl, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800139a:	4650      	mov	r0, sl
 800139c:	f002 ff28 	bl	80041f0 <USB_ReadInterrupts>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	f2c0 809c 	blt.w	80014de <HAL_PCD_IRQHandler+0x19a>
 80013a6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80013a8:	f002 ff22 	bl	80041f0 <USB_ReadInterrupts>
 80013ac:	0500      	lsls	r0, r0, #20
 80013ae:	d463      	bmi.n	8001478 <HAL_PCD_IRQHandler+0x134>
 80013b0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80013b2:	f002 ff1d 	bl	80041f0 <USB_ReadInterrupts>
 80013b6:	0102      	lsls	r2, r0, #4
 80013b8:	d513      	bpl.n	80013e2 <HAL_PCD_IRQHandler+0x9e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80013ba:	6822      	ldr	r2, [r4, #0]
      if (hpcd->LPM_State == LPM_L0)
 80013bc:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80013c0:	6953      	ldr	r3, [r2, #20]
 80013c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013c6:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80013c8:	2900      	cmp	r1, #0
 80013ca:	d15f      	bne.n	800148c <HAL_PCD_IRQHandler+0x148>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80013cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 80013ce:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013d0:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80013d2:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 80013d6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80013da:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013de:	f006 fa07 	bl	80077f0 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80013e2:	6820      	ldr	r0, [r4, #0]
 80013e4:	f002 ff04 	bl	80041f0 <USB_ReadInterrupts>
 80013e8:	04c3      	lsls	r3, r0, #19
 80013ea:	f100 80a6 	bmi.w	800153a <HAL_PCD_IRQHandler+0x1f6>
 80013ee:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013f0:	f002 fefe 	bl	80041f0 <USB_ReadInterrupts>
 80013f4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 80013f8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013fa:	f040 8084 	bne.w	8001506 <HAL_PCD_IRQHandler+0x1c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013fe:	f002 fef7 	bl	80041f0 <USB_ReadInterrupts>
 8001402:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001406:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001408:	d011      	beq.n	800142e <HAL_PCD_IRQHandler+0xea>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800140a:	6983      	ldr	r3, [r0, #24]
 800140c:	f023 0310 	bic.w	r3, r3, #16
 8001410:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8001412:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001414:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001418:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800141c:	2b02      	cmp	r3, #2
 800141e:	d03e      	beq.n	800149e <HAL_PCD_IRQHandler+0x15a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001420:	2b06      	cmp	r3, #6
 8001422:	f000 82ab 	beq.w	800197c <HAL_PCD_IRQHandler+0x638>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001426:	6983      	ldr	r3, [r0, #24]
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800142e:	f002 fedf 	bl	80041f0 <USB_ReadInterrupts>
 8001432:	0707      	lsls	r7, r0, #28
 8001434:	f100 81c2 	bmi.w	80017bc <HAL_PCD_IRQHandler+0x478>
 8001438:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800143a:	f002 fed9 	bl	80041f0 <USB_ReadInterrupts>
 800143e:	02c6      	lsls	r6, r0, #11
 8001440:	f100 81b1 	bmi.w	80017a6 <HAL_PCD_IRQHandler+0x462>
 8001444:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001446:	f002 fed3 	bl	80041f0 <USB_ReadInterrupts>
 800144a:	0285      	lsls	r5, r0, #10
 800144c:	f100 81bf 	bmi.w	80017ce <HAL_PCD_IRQHandler+0x48a>
 8001450:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001452:	f002 fecd 	bl	80041f0 <USB_ReadInterrupts>
 8001456:	0040      	lsls	r0, r0, #1
 8001458:	f100 80b8 	bmi.w	80015cc <HAL_PCD_IRQHandler+0x288>
 800145c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800145e:	f002 fec7 	bl	80041f0 <USB_ReadInterrupts>
 8001462:	0741      	lsls	r1, r0, #29
 8001464:	f57f af77 	bpl.w	8001356 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800146c:	076a      	lsls	r2, r5, #29
 800146e:	d411      	bmi.n	8001494 <HAL_PCD_IRQHandler+0x150>
      hpcd->Instance->GOTGINT |= temp;
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	432a      	orrs	r2, r5
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	e76e      	b.n	8001356 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001478:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800147c:	07d9      	lsls	r1, r3, #31
 800147e:	d42a      	bmi.n	80014d6 <HAL_PCD_IRQHandler+0x192>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001480:	6820      	ldr	r0, [r4, #0]
 8001482:	6943      	ldr	r3, [r0, #20]
 8001484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001488:	6143      	str	r3, [r0, #20]
 800148a:	e792      	b.n	80013b2 <HAL_PCD_IRQHandler+0x6e>
        HAL_PCD_SuspendCallback(hpcd);
 800148c:	4620      	mov	r0, r4
 800148e:	f006 f8c5 	bl	800761c <HAL_PCD_SuspendCallback>
 8001492:	e7a6      	b.n	80013e2 <HAL_PCD_IRQHandler+0x9e>
        HAL_PCD_DisconnectCallback(hpcd);
 8001494:	4620      	mov	r0, r4
 8001496:	f006 f8e9 	bl	800766c <HAL_PCD_DisconnectCallback>
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	e7e8      	b.n	8001470 <HAL_PCD_IRQHandler+0x12c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800149e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014a2:	421d      	tst	r5, r3
 80014a4:	d0bf      	beq.n	8001426 <HAL_PCD_IRQHandler+0xe2>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014a6:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 80014aa:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80014ae:	4630      	mov	r0, r6
 80014b0:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80014b4:	462a      	mov	r2, r5
 80014b6:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 80014ba:	f002 fe01 	bl	80040c0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014be:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c6:	442a      	add	r2, r5
 80014c8:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ca:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014cc:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014d0:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 80014d4:	e7a7      	b.n	8001426 <HAL_PCD_IRQHandler+0xe2>
        HAL_PCD_SuspendCallback(hpcd);
 80014d6:	4620      	mov	r0, r4
 80014d8:	f006 f8a0 	bl	800761c <HAL_PCD_SuspendCallback>
 80014dc:	e7d0      	b.n	8001480 <HAL_PCD_IRQHandler+0x13c>
      if (hpcd->LPM_State == LPM_L1)
 80014de:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014e2:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80014e6:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80014f0:	f000 8201 	beq.w	80018f6 <HAL_PCD_IRQHandler+0x5b2>
        HAL_PCD_ResumeCallback(hpcd);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f006 f8a9 	bl	800764c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80014fa:	6820      	ldr	r0, [r4, #0]
 80014fc:	6943      	ldr	r3, [r0, #20]
 80014fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001502:	6143      	str	r3, [r0, #20]
 8001504:	e750      	b.n	80013a8 <HAL_PCD_IRQHandler+0x64>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001506:	f002 fea9 	bl	800425c <USB_ActivateSetup>
      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800150a:	6820      	ldr	r0, [r4, #0]
 800150c:	f002 fbb8 	bl	8003c80 <USB_GetDevSpeed>
 8001510:	2800      	cmp	r0, #0
 8001512:	f040 81e3 	bne.w	80018dc <HAL_PCD_IRQHandler+0x598>
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8001516:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001518:	6825      	ldr	r5, [r4, #0]
 800151a:	f000 ff0d 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 800151e:	7b22      	ldrb	r2, [r4, #12]
 8001520:	4601      	mov	r1, r0
 8001522:	4628      	mov	r0, r5
 8001524:	f002 fa12 	bl	800394c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001528:	4620      	mov	r0, r4
 800152a:	f006 f861 	bl	80075f0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800152e:	6820      	ldr	r0, [r4, #0]
 8001530:	6943      	ldr	r3, [r0, #20]
 8001532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001536:	6143      	str	r3, [r0, #20]
 8001538:	e761      	b.n	80013fe <HAL_PCD_IRQHandler+0xba>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800153a:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 800153e:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001540:	6820      	ldr	r0, [r4, #0]
 8001542:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800154a:	f002 fb87 	bl	8003c5c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001552:	f1bc 0f00 	cmp.w	ip, #0
 8001556:	d015      	beq.n	8001584 <HAL_PCD_IRQHandler+0x240>
 8001558:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800155c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001560:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001568:	4565      	cmp	r5, ip
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800156a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800156e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001572:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001576:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800157a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800157e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001582:	d1ed      	bne.n	8001560 <HAL_PCD_IRQHandler+0x21c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001584:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001586:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001588:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800158c:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800158e:	2a00      	cmp	r2, #0
 8001590:	f000 81a7 	beq.w	80018e2 <HAL_PCD_IRQHandler+0x59e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001598:	f043 030b 	orr.w	r3, r3, #11
 800159c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a2:	f043 030b 	orr.w	r3, r3, #11
 80015a6:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80015a8:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80015ac:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80015b0:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80015b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80015b6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80015b8:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80015bc:	f002 fe6a 	bl	8004294 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80015c0:	6820      	ldr	r0, [r4, #0]
 80015c2:	6943      	ldr	r3, [r0, #20]
 80015c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c8:	6143      	str	r3, [r0, #20]
 80015ca:	e711      	b.n	80013f0 <HAL_PCD_IRQHandler+0xac>
      HAL_PCD_ConnectCallback(hpcd);
 80015cc:	4620      	mov	r0, r4
 80015ce:	f006 f849 	bl	8007664 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	6943      	ldr	r3, [r0, #20]
 80015d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015da:	6143      	str	r3, [r0, #20]
 80015dc:	e73f      	b.n	800145e <HAL_PCD_IRQHandler+0x11a>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015de:	6820      	ldr	r0, [r4, #0]
 80015e0:	f002 fe12 	bl	8004208 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80015e4:	4681      	mov	r9, r0
 80015e6:	2800      	cmp	r0, #0
 80015e8:	f000 81e7 	beq.w	80019ba <HAL_PCD_IRQHandler+0x676>
 80015ec:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 80015f0:	f8d4 a000 	ldr.w	sl, [r4]
 80015f4:	46a0      	mov	r8, r4
      epnum = 0U;
 80015f6:	f04f 0b00 	mov.w	fp, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015fa:	9505      	str	r5, [sp, #20]
 80015fc:	e9cd 3603 	strd	r3, r6, [sp, #12]
 8001600:	e007      	b.n	8001612 <HAL_PCD_IRQHandler+0x2ce>
      while (ep_intr != 0U)
 8001602:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8001606:	f10b 0b01 	add.w	fp, fp, #1
 800160a:	f108 081c 	add.w	r8, r8, #28
      while (ep_intr != 0U)
 800160e:	f000 811d 	beq.w	800184c <HAL_PCD_IRQHandler+0x508>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001612:	f019 0f01 	tst.w	r9, #1
 8001616:	d0f4      	beq.n	8001602 <HAL_PCD_IRQHandler+0x2be>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001618:	fa5f f68b 	uxtb.w	r6, fp
 800161c:	4650      	mov	r0, sl
 800161e:	4631      	mov	r1, r6
 8001620:	f002 fe04 	bl	800422c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001624:	07c7      	lsls	r7, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001626:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001628:	f100 80dc 	bmi.w	80017e4 <HAL_PCD_IRQHandler+0x4a0>
 800162c:	f8d4 a000 	ldr.w	sl, [r4]
 8001630:	4657      	mov	r7, sl
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001632:	0728      	lsls	r0, r5, #28
 8001634:	d504      	bpl.n	8001640 <HAL_PCD_IRQHandler+0x2fc>
 8001636:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001638:	2208      	movs	r2, #8
 800163a:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 800163e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001640:	06e9      	lsls	r1, r5, #27
 8001642:	d504      	bpl.n	800164e <HAL_PCD_IRQHandler+0x30a>
 8001644:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001646:	2210      	movs	r2, #16
 8001648:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 800164c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800164e:	066a      	lsls	r2, r5, #25
 8001650:	d504      	bpl.n	800165c <HAL_PCD_IRQHandler+0x318>
 8001652:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001654:	2240      	movs	r2, #64	; 0x40
 8001656:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 800165a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800165c:	07ab      	lsls	r3, r5, #30
 800165e:	d504      	bpl.n	800166a <HAL_PCD_IRQHandler+0x326>
 8001660:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001662:	2202      	movs	r2, #2
 8001664:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 8001668:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800166a:	062d      	lsls	r5, r5, #24
 800166c:	d5c9      	bpl.n	8001602 <HAL_PCD_IRQHandler+0x2be>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800166e:	e9d8 2314 	ldrd	r2, r3, [r8, #80]	; 0x50
 8001672:	4293      	cmp	r3, r2
 8001674:	d8c5      	bhi.n	8001602 <HAL_PCD_IRQHandler+0x2be>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001676:	1ad5      	subs	r5, r2, r3

  if (len > ep->maxpacket)
 8001678:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800167c:	eb07 114b 	add.w	r1, r7, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8001680:	4285      	cmp	r5, r0
 8001682:	46ac      	mov	ip, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001684:	f501 6110 	add.w	r1, r1, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8001688:	bf28      	it	cs
 800168a:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800168c:	9106      	str	r1, [sp, #24]
 800168e:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8001690:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001694:	b289      	uxth	r1, r1
 8001696:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
 800169a:	d335      	bcc.n	8001708 <HAL_PCD_IRQHandler+0x3c4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800169c:	4293      	cmp	r3, r2
 800169e:	d233      	bcs.n	8001708 <HAL_PCD_IRQHandler+0x3c4>
 80016a0:	b392      	cbz	r2, 8001708 <HAL_PCD_IRQHandler+0x3c4>
 80016a2:	f8cd b01c 	str.w	fp, [sp, #28]
 80016a6:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 80016aa:	f8dd b018 	ldr.w	fp, [sp, #24]
 80016ae:	e00b      	b.n	80016c8 <HAL_PCD_IRQHandler+0x384>
 80016b0:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80016b4:	429a      	cmp	r2, r3
 80016b6:	eba2 0503 	sub.w	r5, r2, r3
 80016ba:	f240 8178 	bls.w	80019ae <HAL_PCD_IRQHandler+0x66a>
 80016be:	2a00      	cmp	r2, #0
 80016c0:	f000 8175 	beq.w	80019ae <HAL_PCD_IRQHandler+0x66a>
 80016c4:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 80016c8:	4285      	cmp	r5, r0
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80016ca:	4632      	mov	r2, r6
 80016cc:	bf28      	it	cs
 80016ce:	4605      	movcs	r5, r0
 80016d0:	7c20      	ldrb	r0, [r4, #16]
 80016d2:	b2ab      	uxth	r3, r5
 80016d4:	9000      	str	r0, [sp, #0]
 80016d6:	4638      	mov	r0, r7
 80016d8:	f002 fcdc 	bl	8004094 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80016dc:	f8db 2018 	ldr.w	r2, [fp, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80016e0:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 80016e4:	1ce8      	adds	r0, r5, #3
    ep->xfer_count += len;
 80016e6:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80016ea:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 80016ec:	4429      	add	r1, r5
    ep->xfer_count += len;
 80016ee:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80016f0:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 80016f4:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 80016f8:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80016fc:	d2d8      	bcs.n	80016b0 <HAL_PCD_IRQHandler+0x36c>
 80016fe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8001702:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8001706:	6827      	ldr	r7, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001708:	429a      	cmp	r2, r3
 800170a:	f200 8154 	bhi.w	80019b6 <HAL_PCD_IRQHandler+0x672>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800170e:	f50a 6100 	add.w	r1, sl, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001712:	f00b 020f 	and.w	r2, fp, #15
 8001716:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001718:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800171a:	46ba      	mov	sl, r7
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800171c:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001720:	ea23 0302 	bic.w	r3, r3, r2
 8001724:	634b      	str	r3, [r1, #52]	; 0x34
 8001726:	e76c      	b.n	8001602 <HAL_PCD_IRQHandler+0x2be>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001728:	f002 fd66 	bl	80041f8 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800172c:	4607      	mov	r7, r0
 800172e:	2800      	cmp	r0, #0
 8001730:	f000 8147 	beq.w	80019c2 <HAL_PCD_IRQHandler+0x67e>
 8001734:	6820      	ldr	r0, [r4, #0]
      epnum = 0U;
 8001736:	f04f 0b00 	mov.w	fp, #0
 800173a:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800173e:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8001742:	e004      	b.n	800174e <HAL_PCD_IRQHandler+0x40a>
      while (ep_intr != 0U)
 8001744:	087f      	lsrs	r7, r7, #1
        epnum++;
 8001746:	f10b 0b01 	add.w	fp, fp, #1
      while (ep_intr != 0U)
 800174a:	f000 8082 	beq.w	8001852 <HAL_PCD_IRQHandler+0x50e>
        if ((ep_intr & 0x1U) != 0U)
 800174e:	07fd      	lsls	r5, r7, #31
 8001750:	d5f8      	bpl.n	8001744 <HAL_PCD_IRQHandler+0x400>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001752:	fa5f f68b 	uxtb.w	r6, fp
 8001756:	4631      	mov	r1, r6
 8001758:	f002 fd5e 	bl	8004218 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800175c:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001760:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001762:	d179      	bne.n	8001858 <HAL_PCD_IRQHandler+0x514>
 8001764:	f000 0308 	and.w	r3, r0, #8
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001768:	2b00      	cmp	r3, #0
 800176a:	f040 809a 	bne.w	80018a2 <HAL_PCD_IRQHandler+0x55e>
 800176e:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001770:	f018 0f10 	tst.w	r8, #16
 8001774:	d003      	beq.n	800177e <HAL_PCD_IRQHandler+0x43a>
 8001776:	eb0a 134b 	add.w	r3, sl, fp, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800177a:	2210      	movs	r2, #16
 800177c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800177e:	f018 0f20 	tst.w	r8, #32
 8001782:	d007      	beq.n	8001794 <HAL_PCD_IRQHandler+0x450>
            if (hpcd->Init.dma_enable == 1U)
 8001784:	6921      	ldr	r1, [r4, #16]
 8001786:	2901      	cmp	r1, #1
 8001788:	f000 810b 	beq.w	80019a2 <HAL_PCD_IRQHandler+0x65e>
 800178c:	eb0a 134b 	add.w	r3, sl, fp, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001790:	2220      	movs	r2, #32
 8001792:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001794:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8001798:	d0d4      	beq.n	8001744 <HAL_PCD_IRQHandler+0x400>
 800179a:	eb0a 134b 	add.w	r3, sl, fp, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800179e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	e7ce      	b.n	8001744 <HAL_PCD_IRQHandler+0x400>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017a6:	4620      	mov	r0, r4
 80017a8:	fa5f f18b 	uxtb.w	r1, fp
 80017ac:	f005 ff56 	bl	800765c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017b0:	6820      	ldr	r0, [r4, #0]
 80017b2:	6943      	ldr	r3, [r0, #20]
 80017b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b8:	6143      	str	r3, [r0, #20]
 80017ba:	e644      	b.n	8001446 <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 80017bc:	4620      	mov	r0, r4
 80017be:	f005 ff13 	bl	80075e8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017c2:	6820      	ldr	r0, [r4, #0]
 80017c4:	6943      	ldr	r3, [r0, #20]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	6143      	str	r3, [r0, #20]
 80017cc:	e635      	b.n	800143a <HAL_PCD_IRQHandler+0xf6>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017ce:	4620      	mov	r0, r4
 80017d0:	fa5f f18b 	uxtb.w	r1, fp
 80017d4:	f005 ff3e 	bl	8007654 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017d8:	6820      	ldr	r0, [r4, #0]
 80017da:	6943      	ldr	r3, [r0, #20]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	6143      	str	r3, [r0, #20]
 80017e2:	e636      	b.n	8001452 <HAL_PCD_IRQHandler+0x10e>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017e4:	9b04      	ldr	r3, [sp, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017e6:	2701      	movs	r7, #1
 80017e8:	f00b 000f 	and.w	r0, fp, #15
 80017ec:	9a03      	ldr	r2, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017ee:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017f2:	fa07 f000 	lsl.w	r0, r7, r0
 80017f6:	eb02 124b 	add.w	r2, r2, fp, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017fa:	ea21 0100 	bic.w	r1, r1, r0
            if (hpcd->Init.dma_enable == 1U)
 80017fe:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001800:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8001804:	42b8      	cmp	r0, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001806:	4613      	mov	r3, r2
 8001808:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 800180a:	d104      	bne.n	8001816 <HAL_PCD_IRQHandler+0x4d2>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800180c:	e9d8 2311 	ldrd	r2, r3, [r8, #68]	; 0x44
 8001810:	4413      	add	r3, r2
 8001812:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001816:	4631      	mov	r1, r6
 8001818:	4620      	mov	r0, r4
 800181a:	f005 fedb 	bl	80075d4 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 800181e:	6923      	ldr	r3, [r4, #16]
 8001820:	6827      	ldr	r7, [r4, #0]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_PCD_IRQHandler+0x4e8>
 8001826:	f1bb 0f00 	cmp.w	fp, #0
 800182a:	d001      	beq.n	8001830 <HAL_PCD_IRQHandler+0x4ec>
 800182c:	46ba      	mov	sl, r7
 800182e:	e700      	b.n	8001632 <HAL_PCD_IRQHandler+0x2ee>
 8001830:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001832:	46ba      	mov	sl, r7
 8001834:	2b00      	cmp	r3, #0
 8001836:	f47f aefc 	bne.w	8001632 <HAL_PCD_IRQHandler+0x2ee>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800183a:	4638      	mov	r0, r7
 800183c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001840:	2101      	movs	r1, #1
 8001842:	f002 fd27 	bl	8004294 <USB_EP0_OutStart>
 8001846:	6827      	ldr	r7, [r4, #0]
 8001848:	46ba      	mov	sl, r7
 800184a:	e6f2      	b.n	8001632 <HAL_PCD_IRQHandler+0x2ee>
 800184c:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 8001850:	e5a3      	b.n	800139a <HAL_PCD_IRQHandler+0x56>
 8001852:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8001856:	e599      	b.n	800138c <HAL_PCD_IRQHandler+0x48>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001858:	6820      	ldr	r0, [r4, #0]
 800185a:	ea4f 194b 	mov.w	r9, fp, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 800185e:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001860:	2201      	movs	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001862:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
 8001866:	eb0a 0509 	add.w	r5, sl, r9
  if (hpcd->Init.dma_enable == 1U)
 800186a:	2901      	cmp	r1, #1
 800186c:	f008 0308 	and.w	r3, r8, #8
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001870:	44f1      	add	r9, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001872:	60aa      	str	r2, [r5, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001874:	f8d0 e040 	ldr.w	lr, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001878:	f8d9 2008 	ldr.w	r2, [r9, #8]
  if (hpcd->Init.dma_enable == 1U)
 800187c:	d064      	beq.n	8001948 <HAL_PCD_IRQHandler+0x604>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800187e:	4974      	ldr	r1, [pc, #464]	; (8001a50 <HAL_PCD_IRQHandler+0x70c>)
 8001880:	458e      	cmp	lr, r1
 8001882:	d107      	bne.n	8001894 <HAL_PCD_IRQHandler+0x550>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001884:	0411      	lsls	r1, r2, #16
 8001886:	f100 80d3 	bmi.w	8001a30 <HAL_PCD_IRQHandler+0x6ec>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800188a:	0691      	lsls	r1, r2, #26
 800188c:	d502      	bpl.n	8001894 <HAL_PCD_IRQHandler+0x550>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800188e:	2120      	movs	r1, #32
 8001890:	f8c9 1008 	str.w	r1, [r9, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001894:	4631      	mov	r1, r6
 8001896:	4620      	mov	r0, r4
 8001898:	9305      	str	r3, [sp, #20]
 800189a:	f005 fe91 	bl	80075c0 <HAL_PCD_DataOutStageCallback>
 800189e:	9b05      	ldr	r3, [sp, #20]
 80018a0:	e762      	b.n	8001768 <HAL_PCD_IRQHandler+0x424>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	ea4f 194b 	mov.w	r9, fp, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 80018a8:	6922      	ldr	r2, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80018aa:	f503 6130 	add.w	r1, r3, #2816	; 0xb00
 80018ae:	eb0a 0509 	add.w	r5, sl, r9
  if (hpcd->Init.dma_enable == 1U)
 80018b2:	2a01      	cmp	r2, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80018b6:	4489      	add	r9, r1
 80018b8:	f8d9 1008 	ldr.w	r1, [r9, #8]
  if (hpcd->Init.dma_enable == 1U)
 80018bc:	d03d      	beq.n	800193a <HAL_PCD_IRQHandler+0x5f6>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80018be:	4a64      	ldr	r2, [pc, #400]	; (8001a50 <HAL_PCD_IRQHandler+0x70c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d01f      	beq.n	8001904 <HAL_PCD_IRQHandler+0x5c0>
  HAL_PCD_SetupStageCallback(hpcd);
 80018c4:	4620      	mov	r0, r4
 80018c6:	9305      	str	r3, [sp, #20]
 80018c8:	f005 fe74 	bl	80075b4 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80018cc:	4a61      	ldr	r2, [pc, #388]	; (8001a54 <HAL_PCD_IRQHandler+0x710>)
 80018ce:	9b05      	ldr	r3, [sp, #20]
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d820      	bhi.n	8001916 <HAL_PCD_IRQHandler+0x5d2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018d4:	2308      	movs	r3, #8
 80018d6:	6820      	ldr	r0, [r4, #0]
 80018d8:	60ab      	str	r3, [r5, #8]
 80018da:	e749      	b.n	8001770 <HAL_PCD_IRQHandler+0x42c>
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 80018dc:	2303      	movs	r3, #3
 80018de:	60e3      	str	r3, [r4, #12]
 80018e0:	e61a      	b.n	8001518 <HAL_PCD_IRQHandler+0x1d4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	f242 032b 	movw	r3, #8235	; 0x202b
 80018e8:	4313      	orrs	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f043 030b 	orr.w	r3, r3, #11
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	e658      	b.n	80015a8 <HAL_PCD_IRQHandler+0x264>
        hpcd->LPM_State = LPM_L0;
 80018f6:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018f8:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 80018fa:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018fe:	f005 ff77 	bl	80077f0 <HAL_PCDEx_LPM_Callback>
 8001902:	e5fa      	b.n	80014fa <HAL_PCD_IRQHandler+0x1b6>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001904:	040a      	lsls	r2, r1, #16
 8001906:	d503      	bpl.n	8001910 <HAL_PCD_IRQHandler+0x5cc>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190c:	f8c9 3008 	str.w	r3, [r9, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8001910:	4620      	mov	r0, r4
 8001912:	f005 fe4f 	bl	80075b4 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001916:	6921      	ldr	r1, [r4, #16]
 8001918:	2901      	cmp	r1, #1
 800191a:	d1db      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x590>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800191c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001920:	6820      	ldr	r0, [r4, #0]
 8001922:	f002 fcb7 	bl	8004294 <USB_EP0_OutStart>
 8001926:	e7d5      	b.n	80018d4 <HAL_PCD_IRQHandler+0x590>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001928:	2220      	movs	r2, #32
 800192a:	f8c9 2008 	str.w	r2, [r9, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800192e:	2b00      	cmp	r3, #0
 8001930:	f43f af1e 	beq.w	8001770 <HAL_PCD_IRQHandler+0x42c>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001934:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001936:	f8d9 1008 	ldr.w	r1, [r9, #8]
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800193a:	4a46      	ldr	r2, [pc, #280]	; (8001a54 <HAL_PCD_IRQHandler+0x710>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d8e1      	bhi.n	8001904 <HAL_PCD_IRQHandler+0x5c0>
  HAL_PCD_SetupStageCallback(hpcd);
 8001940:	4620      	mov	r0, r4
 8001942:	f005 fe37 	bl	80075b4 <HAL_PCD_SetupStageCallback>
 8001946:	e7c5      	b.n	80018d4 <HAL_PCD_IRQHandler+0x590>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001948:	0711      	lsls	r1, r2, #28
 800194a:	d53d      	bpl.n	80019c8 <HAL_PCD_IRQHandler+0x684>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800194c:	4941      	ldr	r1, [pc, #260]	; (8001a54 <HAL_PCD_IRQHandler+0x710>)
 800194e:	458e      	cmp	lr, r1
 8001950:	d905      	bls.n	800195e <HAL_PCD_IRQHandler+0x61a>
 8001952:	0410      	lsls	r0, r2, #16
 8001954:	d503      	bpl.n	800195e <HAL_PCD_IRQHandler+0x61a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001956:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800195a:	f8c9 2008 	str.w	r2, [r9, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 800195e:	4620      	mov	r0, r4
 8001960:	9305      	str	r3, [sp, #20]
 8001962:	f005 fe27 	bl	80075b4 <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001966:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800196a:	2101      	movs	r1, #1
 800196c:	6820      	ldr	r0, [r4, #0]
 800196e:	f002 fc91 	bl	8004294 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001972:	2208      	movs	r2, #8
 8001974:	9b05      	ldr	r3, [sp, #20]
 8001976:	f8c9 2008 	str.w	r2, [r9, #8]
 800197a:	e6f5      	b.n	8001768 <HAL_PCD_IRQHandler+0x424>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800197c:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001980:	2208      	movs	r2, #8
 8001982:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001986:	4630      	mov	r0, r6
 8001988:	f002 fb9a 	bl	80040c0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800198c:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8001990:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8001994:	6820      	ldr	r0, [r4, #0]
 8001996:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800199a:	440b      	add	r3, r1
 800199c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80019a0:	e541      	b.n	8001426 <HAL_PCD_IRQHandler+0xe2>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019a2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80019a6:	f002 fc75 	bl	8004294 <USB_EP0_OutStart>
 80019aa:	6820      	ldr	r0, [r4, #0]
 80019ac:	e6ee      	b.n	800178c <HAL_PCD_IRQHandler+0x448>
 80019ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80019b2:	6827      	ldr	r7, [r4, #0]
 80019b4:	e6a8      	b.n	8001708 <HAL_PCD_IRQHandler+0x3c4>
 80019b6:	46ba      	mov	sl, r7
 80019b8:	e623      	b.n	8001602 <HAL_PCD_IRQHandler+0x2be>
      epnum = 0U;
 80019ba:	4683      	mov	fp, r0
 80019bc:	f8d4 a000 	ldr.w	sl, [r4]
 80019c0:	e4eb      	b.n	800139a <HAL_PCD_IRQHandler+0x56>
      epnum = 0U;
 80019c2:	4683      	mov	fp, r0
 80019c4:	6820      	ldr	r0, [r4, #0]
 80019c6:	e4e1      	b.n	800138c <HAL_PCD_IRQHandler+0x48>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80019c8:	0691      	lsls	r1, r2, #26
 80019ca:	d4ad      	bmi.n	8001928 <HAL_PCD_IRQHandler+0x5e4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80019cc:	f012 0f28 	tst.w	r2, #40	; 0x28
 80019d0:	d1ad      	bne.n	800192e <HAL_PCD_IRQHandler+0x5ea>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80019d2:	4920      	ldr	r1, [pc, #128]	; (8001a54 <HAL_PCD_IRQHandler+0x710>)
 80019d4:	458e      	cmp	lr, r1
 80019d6:	d901      	bls.n	80019dc <HAL_PCD_IRQHandler+0x698>
 80019d8:	0412      	lsls	r2, r2, #16
 80019da:	d434      	bmi.n	8001a46 <HAL_PCD_IRQHandler+0x702>
 80019dc:	f04f 0c1c 	mov.w	ip, #28
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80019e0:	f8d9 e010 	ldr.w	lr, [r9, #16]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80019e4:	4631      	mov	r1, r6
 80019e6:	4620      	mov	r0, r4
 80019e8:	fb0c 4c0b 	mla	ip, ip, fp, r4
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80019ec:	f3ce 0e12 	ubfx	lr, lr, #0, #19
 80019f0:	9305      	str	r3, [sp, #20]
          hpcd->OUT_ep[epnum].maxpacket -
 80019f2:	f8dc 2204 	ldr.w	r2, [ip, #516]	; 0x204
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80019f6:	f8dc 5208 	ldr.w	r5, [ip, #520]	; 0x208
          hpcd->OUT_ep[epnum].maxpacket -
 80019fa:	eba2 0e0e 	sub.w	lr, r2, lr
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80019fe:	442a      	add	r2, r5
        hpcd->OUT_ep[epnum].xfer_count =
 8001a00:	f8cc e214 	str.w	lr, [ip, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001a04:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001a08:	f005 fdda 	bl	80075c0 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001a0c:	9b05      	ldr	r3, [sp, #20]
 8001a0e:	f1bb 0f00 	cmp.w	fp, #0
 8001a12:	f47f aea9 	bne.w	8001768 <HAL_PCD_IRQHandler+0x424>
 8001a16:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	f47f aea4 	bne.w	8001768 <HAL_PCD_IRQHandler+0x424>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a20:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001a24:	2101      	movs	r1, #1
 8001a26:	6820      	ldr	r0, [r4, #0]
 8001a28:	f002 fc34 	bl	8004294 <USB_EP0_OutStart>
 8001a2c:	9b05      	ldr	r3, [sp, #20]
 8001a2e:	e69b      	b.n	8001768 <HAL_PCD_IRQHandler+0x424>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001a30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a34:	f8c9 2008 	str.w	r2, [r9, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f43f ae99 	beq.w	8001770 <HAL_PCD_IRQHandler+0x42c>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001a3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001a40:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8001a44:	e73b      	b.n	80018be <HAL_PCD_IRQHandler+0x57a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001a46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a4a:	f8c9 2008 	str.w	r2, [r9, #8]
 8001a4e:	e76e      	b.n	800192e <HAL_PCD_IRQHandler+0x5ea>
 8001a50:	4f54310a 	.word	0x4f54310a
 8001a54:	4f54300a 	.word	0x4f54300a

08001a58 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001a58:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001a5c:	2a01      	cmp	r2, #1
 8001a5e:	d00d      	beq.n	8001a7c <HAL_PCD_SetAddress+0x24>
 8001a60:	2201      	movs	r2, #1
{
 8001a62:	b510      	push	{r4, lr}
 8001a64:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8001a66:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a6a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001a6c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a70:	f002 fb94 	bl	800419c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001a7a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001a7c:	2002      	movs	r0, #2
}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_PCD_EP_Open>:
{
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8001a86:	0609      	lsls	r1, r1, #24
 8001a88:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001a8c:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8001a90:	d422      	bmi.n	8001ad8 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a92:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 8001a96:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001a9a:	2600      	movs	r6, #0
 8001a9c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aa0:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001aa2:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8001aa6:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa8:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8001aaa:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001aac:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001aae:	b105      	cbz	r5, 8001ab2 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8001ab0:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d101      	bne.n	8001aba <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001aba:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d015      	beq.n	8001aee <HAL_PCD_EP_Open+0x6e>
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ac6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001ac8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001acc:	f002 f8e4 	bl	8003c98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8001ad8:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001adc:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 8001ae0:	2701      	movs	r7, #1
 8001ae2:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001ae8:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 8001aec:	e7db      	b.n	8001aa6 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8001aee:	2002      	movs	r0, #2
}
 8001af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af2:	bf00      	nop

08001af4 <HAL_PCD_EP_Close>:
{
 8001af4:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8001af8:	0609      	lsls	r1, r1, #24
{
 8001afa:	b538      	push	{r3, r4, r5, lr}
 8001afc:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8001b00:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8001b04:	d419      	bmi.n	8001b3a <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b06:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8001b0a:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8001b0e:	2400      	movs	r4, #0
 8001b10:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b14:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001b16:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b1a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001b1c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d019      	beq.n	8001b58 <HAL_PCD_EP_Close+0x64>
 8001b24:	4604      	mov	r4, r0
 8001b26:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b28:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001b2a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b2e:	f002 f8f5 	bl	8003d1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001b38:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b3a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8001b3e:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8001b42:	2501      	movs	r5, #1
 8001b44:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b48:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001b4a:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b4e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001b50:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d1e5      	bne.n	8001b24 <HAL_PCD_EP_Close+0x30>
 8001b58:	2002      	movs	r0, #2
}
 8001b5a:	bd38      	pop	{r3, r4, r5, pc}

08001b5c <HAL_PCD_EP_Receive>:
{
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8001b62:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b64:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8001b66:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6a:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8001b6e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b72:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8001b76:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8001b7a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7e:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8001b82:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001b86:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8001b8a:	6903      	ldr	r3, [r0, #16]
 8001b8c:	6800      	ldr	r0, [r0, #0]
 8001b8e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001b90:	bf08      	it	eq
 8001b92:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8001b96:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b98:	b11d      	cbz	r5, 8001ba2 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b9a:	f002 f8f3 	bl	8003d84 <USB_EPStartXfer>
}
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ba2:	f002 f9eb 	bl	8003f7c <USB_EP0StartXfer>
}
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
 8001baa:	bf00      	nop

08001bac <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bac:	f001 010f 	and.w	r1, r1, #15
 8001bb0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001bb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8001bb8:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop

08001bc0 <HAL_PCD_EP_Transmit>:
{
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8001bc6:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8001bc8:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bca:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8001bcc:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8001bd4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8001bda:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8001bdc:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bde:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001be2:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001be4:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8001be8:	6903      	ldr	r3, [r0, #16]
 8001bea:	6800      	ldr	r0, [r0, #0]
 8001bec:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 8001bee:	bf08      	it	eq
 8001bf0:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8001bf2:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bf4:	b11d      	cbz	r5, 8001bfe <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bf6:	f002 f8c5 	bl	8003d84 <USB_EPStartXfer>
}
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bfe:	f002 f9bd 	bl	8003f7c <USB_EP0StartXfer>
}
 8001c02:	2000      	movs	r0, #0
 8001c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c06:	bf00      	nop

08001c08 <HAL_PCD_EP_SetStall>:
{
 8001c08:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c0a:	6843      	ldr	r3, [r0, #4]
 8001c0c:	f001 050f 	and.w	r5, r1, #15
 8001c10:	429d      	cmp	r5, r3
 8001c12:	d81f      	bhi.n	8001c54 <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8001c14:	060b      	lsls	r3, r1, #24
 8001c16:	d41f      	bmi.n	8001c58 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8001c18:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8001c1c:	241c      	movs	r4, #28
    ep->is_in = 0U;
 8001c1e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001c20:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8001c24:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8001c28:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8001c2c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8001c30:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c32:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001c34:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001c36:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d01e      	beq.n	8001c7c <HAL_PCD_EP_SetStall+0x74>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c44:	6800      	ldr	r0, [r0, #0]
 8001c46:	f002 fa4d 	bl	80040e4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c4a:	b1cd      	cbz	r5, 8001c80 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c54:	2001      	movs	r0, #1
}
 8001c56:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8001c5a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001c5e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c60:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8001c64:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c68:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8001c6e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c70:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001c72:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001c74:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1e0      	bne.n	8001c3e <HAL_PCD_EP_SetStall+0x36>
 8001c7c:	2002      	movs	r0, #2
}
 8001c7e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c80:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001c84:	7c21      	ldrb	r1, [r4, #16]
 8001c86:	6820      	ldr	r0, [r4, #0]
 8001c88:	f002 fb04 	bl	8004294 <USB_EP0_OutStart>
 8001c8c:	e7de      	b.n	8001c4c <HAL_PCD_EP_SetStall+0x44>
 8001c8e:	bf00      	nop

08001c90 <HAL_PCD_EP_ClrStall>:
{
 8001c90:	b538      	push	{r3, r4, r5, lr}
 8001c92:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c96:	6843      	ldr	r3, [r0, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d821      	bhi.n	8001ce0 <HAL_PCD_EP_ClrStall+0x50>
 8001c9c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8001ca0:	0609      	lsls	r1, r1, #24
 8001ca2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001ca6:	d41d      	bmi.n	8001ce4 <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8001cac:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8001cb0:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb2:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8001cb4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8001cb8:	f883 51fd 	strb.w	r5, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001cbc:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbe:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001cc0:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001cc2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d01c      	beq.n	8001d04 <HAL_PCD_EP_ClrStall+0x74>
 8001cca:	4604      	mov	r4, r0
 8001ccc:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cce:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001cd0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cd4:	f002 fa36 	bl	8004144 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cd8:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001cdc:	4628      	mov	r0, r5
}
 8001cde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ce0:	2001      	movs	r0, #1
}
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8001ce4:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8001cea:	2501      	movs	r5, #1
 8001cec:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf0:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8001cf2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8001cf6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf8:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001cfa:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001cfc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d1e2      	bne.n	8001cca <HAL_PCD_EP_ClrStall+0x3a>
 8001d04:	2002      	movs	r0, #2
}
 8001d06:	bd38      	pop	{r3, r4, r5, pc}

08001d08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d08:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d0a:	6805      	ldr	r5, [r0, #0]
 8001d0c:	0412      	lsls	r2, r2, #16
 8001d0e:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8001d10:	b1c1      	cbz	r1, 8001d44 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d12:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001d14:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d16:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001d1a:	d00b      	beq.n	8001d34 <HAL_PCDEx_SetTxFiFo+0x2c>
 8001d1c:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d1e:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8001d22:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d24:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8001d28:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d2a:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8001d2c:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d2e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001d32:	d3f4      	bcc.n	8001d1e <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001d34:	3140      	adds	r1, #64	; 0x40
 8001d36:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 8001d38:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001d3a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001d3e:	604c      	str	r4, [r1, #4]
}
 8001d40:	bc30      	pop	{r4, r5}
 8001d42:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001d44:	4314      	orrs	r4, r2
}
 8001d46:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001d48:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001d4a:	bc30      	pop	{r4, r5}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop

08001d50 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001d50:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001d52:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001d54:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001d56:	4770      	bx	lr

08001d58 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d58:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8001d5a:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d5c:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_PCDEx_ActivateLPM+0x28>)
{
 8001d5e:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 8001d60:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 8001d64:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d66:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8001d68:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d6a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 8001d6e:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 8001d72:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d74:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d78:	430a      	orrs	r2, r1
}
 8001d7a:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001d7e:	4770      	bx	lr
 8001d80:	10000003 	.word	0x10000003

08001d84 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d8a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8001d8e:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	6411      	str	r1, [r2, #64]	; 0x40
{
 8001d92:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d96:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d98:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001d9c:	9201      	str	r2, [sp, #4]
 8001d9e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001da6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001da8:	f7fe fbec 	bl	8000584 <HAL_GetTick>
 8001dac:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dae:	e005      	b.n	8001dbc <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001db0:	f7fe fbe8 	bl	8000584 <HAL_GetTick>
 8001db4:	1b40      	subs	r0, r0, r5
 8001db6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001dba:	d817      	bhi.n	8001dec <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dbc:	6863      	ldr	r3, [r4, #4]
 8001dbe:	03da      	lsls	r2, r3, #15
 8001dc0:	d5f6      	bpl.n	8001db0 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dc2:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dc4:	4d0c      	ldr	r5, [pc, #48]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dca:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001dcc:	f7fe fbda 	bl	8000584 <HAL_GetTick>
 8001dd0:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dd2:	e005      	b.n	8001de0 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dd4:	f7fe fbd6 	bl	8000584 <HAL_GetTick>
 8001dd8:	1b00      	subs	r0, r0, r4
 8001dda:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001dde:	d805      	bhi.n	8001dec <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de0:	686b      	ldr	r3, [r5, #4]
 8001de2:	039b      	lsls	r3, r3, #14
 8001de4:	d5f6      	bpl.n	8001dd4 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001de6:	2000      	movs	r0, #0
}
 8001de8:	b003      	add	sp, #12
 8001dea:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
}
 8001dee:	b003      	add	sp, #12
 8001df0:	bd30      	pop	{r4, r5, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40007000 	.word	0x40007000

08001dfc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	f000 8134 	beq.w	800206a <HAL_RCC_OscConfig+0x26e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	6803      	ldr	r3, [r0, #0]
{
 8001e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e08:	07dd      	lsls	r5, r3, #31
{
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	d535      	bpl.n	8001e7c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e10:	49ab      	ldr	r1, [pc, #684]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001e12:	688a      	ldr	r2, [r1, #8]
 8001e14:	f002 020c 	and.w	r2, r2, #12
 8001e18:	2a04      	cmp	r2, #4
 8001e1a:	f000 80fe 	beq.w	800201a <HAL_RCC_OscConfig+0x21e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1e:	688a      	ldr	r2, [r1, #8]
 8001e20:	f002 020c 	and.w	r2, r2, #12
 8001e24:	2a08      	cmp	r2, #8
 8001e26:	f000 80f4 	beq.w	8002012 <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2a:	6863      	ldr	r3, [r4, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d010      	beq.n	8001e54 <HAL_RCC_OscConfig+0x58>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 811b 	beq.w	800206e <HAL_RCC_OscConfig+0x272>
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3c:	4ba0      	ldr	r3, [pc, #640]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f000 8162 	beq.w	8002108 <HAL_RCC_OscConfig+0x30c>
 8001e44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e004      	b.n	8001e5e <HAL_RCC_OscConfig+0x62>
 8001e54:	4a9a      	ldr	r2, [pc, #616]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fb91 	bl	8000584 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	4d97      	ldr	r5, [pc, #604]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8001e64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7fe fb8c 	bl	8000584 <HAL_GetTick>
 8001e6c:	1b80      	subs	r0, r0, r6
 8001e6e:	2864      	cmp	r0, #100	; 0x64
 8001e70:	f200 80ee 	bhi.w	8002050 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	039a      	lsls	r2, r3, #14
 8001e78:	d5f6      	bpl.n	8001e68 <HAL_RCC_OscConfig+0x6c>
 8001e7a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7c:	079f      	lsls	r7, r3, #30
 8001e7e:	d442      	bmi.n	8001f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e80:	071a      	lsls	r2, r3, #28
 8001e82:	d517      	bpl.n	8001eb4 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e84:	6963      	ldr	r3, [r4, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80b0 	beq.w	8001fec <HAL_RCC_OscConfig+0x1f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001e8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e90:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001e98:	f7fe fb74 	bl	8000584 <HAL_GetTick>
 8001e9c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	e005      	b.n	8001eac <HAL_RCC_OscConfig+0xb0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7fe fb70 	bl	8000584 <HAL_GetTick>
 8001ea4:	1b80      	subs	r0, r0, r6
 8001ea6:	2802      	cmp	r0, #2
 8001ea8:	f200 80d2 	bhi.w	8002050 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001eae:	079b      	lsls	r3, r3, #30
 8001eb0:	d5f6      	bpl.n	8001ea0 <HAL_RCC_OscConfig+0xa4>
 8001eb2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	075d      	lsls	r5, r3, #29
 8001eb6:	d56b      	bpl.n	8001f90 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb8:	4b81      	ldr	r3, [pc, #516]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebc:	00d0      	lsls	r0, r2, #3
 8001ebe:	f100 80ed 	bmi.w	800209c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001ec4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed6:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x2c8>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	05d1      	lsls	r1, r2, #23
 8001edc:	f140 80a7 	bpl.w	800202e <HAL_RCC_OscConfig+0x232>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	68a3      	ldr	r3, [r4, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d039      	beq.n	8001f5a <HAL_RCC_OscConfig+0x15e>
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80da 	beq.w	80020a0 <HAL_RCC_OscConfig+0x2a4>
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	4b74      	ldr	r3, [pc, #464]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ef2:	f000 8111 	beq.w	8002118 <HAL_RCC_OscConfig+0x31c>
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	671a      	str	r2, [r3, #112]	; 0x70
 8001efc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001efe:	f022 0204 	bic.w	r2, r2, #4
 8001f02:	671a      	str	r2, [r3, #112]	; 0x70
 8001f04:	e02e      	b.n	8001f64 <HAL_RCC_OscConfig+0x168>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f06:	4a6e      	ldr	r2, [pc, #440]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001f08:	6891      	ldr	r1, [r2, #8]
 8001f0a:	f011 0f0c 	tst.w	r1, #12
 8001f0e:	d062      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f10:	6891      	ldr	r1, [r2, #8]
 8001f12:	f001 010c 	and.w	r1, r1, #12
 8001f16:	2908      	cmp	r1, #8
 8001f18:	d05a      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f1a:	68e3      	ldr	r3, [r4, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80df 	beq.w	80020e0 <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_HSI_ENABLE();
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001f24:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fb29 	bl	8000584 <HAL_GetTick>
 8001f32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e005      	b.n	8001f42 <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f36:	f7fe fb25 	bl	8000584 <HAL_GetTick>
 8001f3a:	1b80      	subs	r0, r0, r6
 8001f3c:	2802      	cmp	r0, #2
 8001f3e:	f200 8087 	bhi.w	8002050 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	682b      	ldr	r3, [r5, #0]
 8001f44:	0798      	lsls	r0, r3, #30
 8001f46:	d5f6      	bpl.n	8001f36 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	6922      	ldr	r2, [r4, #16]
 8001f4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f54:	602b      	str	r3, [r5, #0]
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	e792      	b.n	8001e80 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5a:	4a59      	ldr	r2, [pc, #356]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001f5c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f64:	f7fe fb0e 	bl	8000584 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	4e55      	ldr	r6, [pc, #340]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 8001f6a:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	e005      	b.n	8001f7e <HAL_RCC_OscConfig+0x182>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7fe fb07 	bl	8000584 <HAL_GetTick>
 8001f76:	eba0 0008 	sub.w	r0, r0, r8
 8001f7a:	42b8      	cmp	r0, r7
 8001f7c:	d868      	bhi.n	8002050 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001f80:	079b      	lsls	r3, r3, #30
 8001f82:	d5f6      	bpl.n	8001f72 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f84:	b125      	cbz	r5, 8001f90 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4a4e      	ldr	r2, [pc, #312]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001f88:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f90:	69a3      	ldr	r3, [r4, #24]
 8001f92:	b1cb      	cbz	r3, 8001fc8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f94:	4a4a      	ldr	r2, [pc, #296]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001f96:	6891      	ldr	r1, [r2, #8]
 8001f98:	f001 010c 	and.w	r1, r1, #12
 8001f9c:	2908      	cmp	r1, #8
 8001f9e:	d021      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa0:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	6813      	ldr	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa4:	f000 80c0 	beq.w	8002128 <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fac:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 8001fae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fae8 	bl	8000584 <HAL_GetTick>
 8001fb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e004      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe fae4 	bl	8000584 <HAL_GetTick>
 8001fbc:	1b40      	subs	r0, r0, r5
 8001fbe:	2802      	cmp	r0, #2
 8001fc0:	d846      	bhi.n	8002050 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	d4f7      	bmi.n	8001fb8 <HAL_RCC_OscConfig+0x1bc>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001fc8:	2000      	movs	r0, #0
}
 8001fca:	b002      	add	sp, #8
 8001fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd0:	6852      	ldr	r2, [r2, #4]
 8001fd2:	0256      	lsls	r6, r2, #9
 8001fd4:	d4a1      	bmi.n	8001f1a <HAL_RCC_OscConfig+0x11e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4a3a      	ldr	r2, [pc, #232]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	0795      	lsls	r5, r2, #30
 8001fdc:	d53c      	bpl.n	8002058 <HAL_RCC_OscConfig+0x25c>
 8001fde:	68e2      	ldr	r2, [r4, #12]
 8001fe0:	2a01      	cmp	r2, #1
 8001fe2:	d039      	beq.n	8002058 <HAL_RCC_OscConfig+0x25c>
    return HAL_ERROR;
 8001fe4:	2001      	movs	r0, #1
}
 8001fe6:	b002      	add	sp, #8
 8001fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8001fee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fac4 	bl	8000584 <HAL_GetTick>
 8001ffc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffe:	e004      	b.n	800200a <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002000:	f7fe fac0 	bl	8000584 <HAL_GetTick>
 8002004:	1b80      	subs	r0, r0, r6
 8002006:	2802      	cmp	r0, #2
 8002008:	d822      	bhi.n	8002050 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800200c:	079f      	lsls	r7, r3, #30
 800200e:	d4f7      	bmi.n	8002000 <HAL_RCC_OscConfig+0x204>
 8002010:	e74f      	b.n	8001eb2 <HAL_RCC_OscConfig+0xb6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	684a      	ldr	r2, [r1, #4]
 8002014:	0250      	lsls	r0, r2, #9
 8002016:	f57f af08 	bpl.w	8001e2a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4a29      	ldr	r2, [pc, #164]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	0391      	lsls	r1, r2, #14
 8002020:	f57f af2c 	bpl.w	8001e7c <HAL_RCC_OscConfig+0x80>
 8002024:	6862      	ldr	r2, [r4, #4]
 8002026:	2a00      	cmp	r2, #0
 8002028:	f47f af28 	bne.w	8001e7c <HAL_RCC_OscConfig+0x80>
 800202c:	e7da      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1e8>
      PWR->CR1 |= PWR_CR1_DBP;
 800202e:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002030:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8002032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002036:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002038:	f7fe faa4 	bl	8000584 <HAL_GetTick>
 800203c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203e:	6833      	ldr	r3, [r6, #0]
 8002040:	05da      	lsls	r2, r3, #23
 8002042:	f53f af4d 	bmi.w	8001ee0 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7fe fa9d 	bl	8000584 <HAL_GetTick>
 800204a:	1bc0      	subs	r0, r0, r7
 800204c:	2864      	cmp	r0, #100	; 0x64
 800204e:	d9f6      	bls.n	800203e <HAL_RCC_OscConfig+0x242>
            return HAL_TIMEOUT;
 8002050:	2003      	movs	r0, #3
}
 8002052:	b002      	add	sp, #8
 8002054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4919      	ldr	r1, [pc, #100]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 800205a:	6920      	ldr	r0, [r4, #16]
 800205c:	680a      	ldr	r2, [r1, #0]
 800205e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002062:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002066:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002068:	e70a      	b.n	8001e80 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800206a:	2001      	movs	r0, #1
}
 800206c:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
 8002070:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002080:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002082:	f7fe fa7f 	bl	8000584 <HAL_GetTick>
 8002086:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002088:	e004      	b.n	8002094 <HAL_RCC_OscConfig+0x298>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208a:	f7fe fa7b 	bl	8000584 <HAL_GetTick>
 800208e:	1b80      	subs	r0, r0, r6
 8002090:	2864      	cmp	r0, #100	; 0x64
 8002092:	d8dd      	bhi.n	8002050 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	039b      	lsls	r3, r3, #14
 8002098:	d4f7      	bmi.n	800208a <HAL_RCC_OscConfig+0x28e>
 800209a:	e6ee      	b.n	8001e7a <HAL_RCC_OscConfig+0x7e>
  FlagStatus pwrclkchanged = RESET;
 800209c:	2500      	movs	r5, #0
 800209e:	e71a      	b.n	8001ed6 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_RCC_OscConfig+0x2c4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a8:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	671a      	str	r2, [r3, #112]	; 0x70
 80020b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020b2:	f022 0204 	bic.w	r2, r2, #4
 80020b6:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80020b8:	f7fe fa64 	bl	8000584 <HAL_GetTick>
 80020bc:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x2d6>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7fe fa5c 	bl	8000584 <HAL_GetTick>
 80020cc:	1bc0      	subs	r0, r0, r7
 80020ce:	4540      	cmp	r0, r8
 80020d0:	d8be      	bhi.n	8002050 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80020d4:	0798      	lsls	r0, r3, #30
 80020d6:	d4f7      	bmi.n	80020c8 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80020d8:	2d00      	cmp	r5, #0
 80020da:	f43f af59 	beq.w	8001f90 <HAL_RCC_OscConfig+0x194>
 80020de:	e752      	b.n	8001f86 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_RCC_OscConfig+0x394>)
 80020e2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e4:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020ec:	f7fe fa4a 	bl	8000584 <HAL_GetTick>
 80020f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	e004      	b.n	80020fe <HAL_RCC_OscConfig+0x302>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f4:	f7fe fa46 	bl	8000584 <HAL_GetTick>
 80020f8:	1b80      	subs	r0, r0, r6
 80020fa:	2802      	cmp	r0, #2
 80020fc:	d8a8      	bhi.n	8002050 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fe:	682b      	ldr	r3, [r5, #0]
 8002100:	0799      	lsls	r1, r3, #30
 8002102:	d4f7      	bmi.n	80020f4 <HAL_RCC_OscConfig+0x2f8>
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	e6bb      	b.n	8001e80 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002108:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e6a2      	b.n	8001e5e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002118:	f042 0204 	orr.w	r2, r2, #4
 800211c:	671a      	str	r2, [r3, #112]	; 0x70
 800211e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	671a      	str	r2, [r3, #112]	; 0x70
 8002126:	e71d      	b.n	8001f64 <HAL_RCC_OscConfig+0x168>
        __HAL_RCC_PLL_DISABLE();
 8002128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212c:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 800212e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002130:	f7fe fa28 	bl	8000584 <HAL_GetTick>
 8002134:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	e004      	b.n	8002142 <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe fa24 	bl	8000584 <HAL_GetTick>
 800213c:	1b80      	subs	r0, r0, r6
 800213e:	2802      	cmp	r0, #2
 8002140:	d886      	bhi.n	8002050 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	682b      	ldr	r3, [r5, #0]
 8002144:	0199      	lsls	r1, r3, #6
 8002146:	d4f7      	bmi.n	8002138 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002148:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800214c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800214e:	4313      	orrs	r3, r2
 8002150:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8002154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002158:	4c0d      	ldr	r4, [pc, #52]	; (8002190 <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215a:	0852      	lsrs	r2, r2, #1
 800215c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002160:	3a01      	subs	r2, #1
 8002162:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800216a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800216c:	682b      	ldr	r3, [r5, #0]
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002172:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002174:	f7fe fa06 	bl	8000584 <HAL_GetTick>
 8002178:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	e005      	b.n	8002188 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe fa02 	bl	8000584 <HAL_GetTick>
 8002180:	1b40      	subs	r0, r0, r5
 8002182:	2802      	cmp	r0, #2
 8002184:	f63f af64 	bhi.w	8002050 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	019a      	lsls	r2, r3, #6
 800218c:	d5f6      	bpl.n	800217c <HAL_RCC_OscConfig+0x380>
 800218e:	e71b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x1cc>
 8002190:	40023800 	.word	0x40023800

08002194 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002196:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002198:	688b      	ldr	r3, [r1, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d01b      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x46>
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d117      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021a8:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ae:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021b0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80021b4:	d113      	bne.n	80021de <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x60>)
 80021b8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80021bc:	fba1 0100 	umull	r0, r1, r1, r0
 80021c0:	f7fe f822 	bl	8000208 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80021cc:	3301      	adds	r3, #1
 80021ce:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80021d0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021d4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80021d6:	4807      	ldr	r0, [pc, #28]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80021d8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80021da:	4807      	ldr	r0, [pc, #28]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80021dc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x64>)
 80021e0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80021e4:	2300      	movs	r3, #0
 80021e6:	fba1 0100 	umull	r0, r1, r1, r0
 80021ea:	f7fe f80d 	bl	8000208 <__aeabi_uldivmod>
 80021ee:	e7e9      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x30>
 80021f0:	40023800 	.word	0x40023800
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	017d7840 	.word	0x017d7840

080021fc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80021fc:	b178      	cbz	r0, 800221e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fe:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_RCC_ClockConfig+0x12c>)
 8002200:	6813      	ldr	r3, [r2, #0]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	428b      	cmp	r3, r1
 8002208:	d20b      	bcs.n	8002222 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f023 030f 	bic.w	r3, r3, #15
 8002210:	430b      	orrs	r3, r1
 8002212:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	428b      	cmp	r3, r1
 800221c:	d001      	beq.n	8002222 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800221e:	2001      	movs	r0, #1
}
 8002220:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002222:	6803      	ldr	r3, [r0, #0]
{
 8002224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	079d      	lsls	r5, r3, #30
 800222a:	d514      	bpl.n	8002256 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	075c      	lsls	r4, r3, #29
 800222e:	d504      	bpl.n	800223a <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002230:	4c3e      	ldr	r4, [pc, #248]	; (800232c <HAL_RCC_ClockConfig+0x130>)
 8002232:	68a2      	ldr	r2, [r4, #8]
 8002234:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002238:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	071a      	lsls	r2, r3, #28
 800223c:	d504      	bpl.n	8002248 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800223e:	4c3b      	ldr	r4, [pc, #236]	; (800232c <HAL_RCC_ClockConfig+0x130>)
 8002240:	68a2      	ldr	r2, [r4, #8]
 8002242:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002246:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4c38      	ldr	r4, [pc, #224]	; (800232c <HAL_RCC_ClockConfig+0x130>)
 800224a:	6885      	ldr	r5, [r0, #8]
 800224c:	68a2      	ldr	r2, [r4, #8]
 800224e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002252:	432a      	orrs	r2, r5
 8002254:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	07df      	lsls	r7, r3, #31
 8002258:	4604      	mov	r4, r0
 800225a:	460d      	mov	r5, r1
 800225c:	d521      	bpl.n	80022a2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002260:	4b32      	ldr	r3, [pc, #200]	; (800232c <HAL_RCC_ClockConfig+0x130>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002264:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	d056      	beq.n	8002316 <HAL_RCC_ClockConfig+0x11a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002268:	2a02      	cmp	r2, #2
 800226a:	d059      	beq.n	8002320 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	0799      	lsls	r1, r3, #30
 800226e:	d528      	bpl.n	80022c2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002270:	492e      	ldr	r1, [pc, #184]	; (800232c <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002272:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002276:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002278:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002282:	f7fe f97f 	bl	8000584 <HAL_GetTick>
 8002286:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002288:	e004      	b.n	8002294 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228a:	f7fe f97b 	bl	8000584 <HAL_GetTick>
 800228e:	1bc0      	subs	r0, r0, r7
 8002290:	4540      	cmp	r0, r8
 8002292:	d843      	bhi.n	800231c <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002294:	68b3      	ldr	r3, [r6, #8]
 8002296:	6862      	ldr	r2, [r4, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022a0:	d1f3      	bne.n	800228a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a2:	4a21      	ldr	r2, [pc, #132]	; (8002328 <HAL_RCC_ClockConfig+0x12c>)
 80022a4:	6813      	ldr	r3, [r2, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	42ab      	cmp	r3, r5
 80022ac:	d90c      	bls.n	80022c8 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	6813      	ldr	r3, [r2, #0]
 80022b0:	f023 030f 	bic.w	r3, r3, #15
 80022b4:	432b      	orrs	r3, r5
 80022b6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	42ab      	cmp	r3, r5
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
}
 80022c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	075a      	lsls	r2, r3, #29
 80022cc:	d506      	bpl.n	80022dc <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ce:	4917      	ldr	r1, [pc, #92]	; (800232c <HAL_RCC_ClockConfig+0x130>)
 80022d0:	68e0      	ldr	r0, [r4, #12]
 80022d2:	688a      	ldr	r2, [r1, #8]
 80022d4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80022d8:	4302      	orrs	r2, r0
 80022da:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	071b      	lsls	r3, r3, #28
 80022de:	d411      	bmi.n	8002304 <HAL_RCC_ClockConfig+0x108>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022e0:	f7ff ff58 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_ClockConfig+0x130>)
 80022e6:	4912      	ldr	r1, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x134>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_RCC_ClockConfig+0x138>)
 80022ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 80022f6:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022f8:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80022fa:	f7fe f905 	bl	8000508 <HAL_InitTick>
  return HAL_OK;
 80022fe:	2000      	movs	r0, #0
}
 8002300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x130>)
 8002306:	6921      	ldr	r1, [r4, #16]
 8002308:	6893      	ldr	r3, [r2, #8]
 800230a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800230e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002312:	6093      	str	r3, [r2, #8]
 8002314:	e7e4      	b.n	80022e0 <HAL_RCC_ClockConfig+0xe4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	039e      	lsls	r6, r3, #14
 8002318:	d4aa      	bmi.n	8002270 <HAL_RCC_ClockConfig+0x74>
 800231a:	e7d2      	b.n	80022c2 <HAL_RCC_ClockConfig+0xc6>
        return HAL_TIMEOUT;
 800231c:	2003      	movs	r0, #3
 800231e:	e7ef      	b.n	8002300 <HAL_RCC_ClockConfig+0x104>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002320:	0198      	lsls	r0, r3, #6
 8002322:	d4a5      	bmi.n	8002270 <HAL_RCC_ClockConfig+0x74>
 8002324:	e7cd      	b.n	80022c2 <HAL_RCC_ClockConfig+0xc6>
 8002326:	bf00      	nop
 8002328:	40023c00 	.word	0x40023c00
 800232c:	40023800 	.word	0x40023800
 8002330:	08007c84 	.word	0x08007c84
 8002334:	20000184 	.word	0x20000184

08002338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002338:	4b01      	ldr	r3, [pc, #4]	; (8002340 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000184 	.word	0x20000184

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002348:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800234a:	4905      	ldr	r1, [pc, #20]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800234c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002350:	6808      	ldr	r0, [r1, #0]
 8002352:	5cd3      	ldrb	r3, [r2, r3]
}
 8002354:	40d8      	lsrs	r0, r3
 8002356:	4770      	bx	lr
 8002358:	40023800 	.word	0x40023800
 800235c:	08007c94 	.word	0x08007c94
 8002360:	20000184 	.word	0x20000184

08002364 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002368:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800236a:	4905      	ldr	r1, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800236c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002370:	6808      	ldr	r0, [r1, #0]
 8002372:	5cd3      	ldrb	r3, [r2, r3]
}
 8002374:	40d8      	lsrs	r0, r3
 8002376:	4770      	bx	lr
 8002378:	40023800 	.word	0x40023800
 800237c:	08007c94 	.word	0x08007c94
 8002380:	20000184 	.word	0x20000184

08002384 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002384:	6803      	ldr	r3, [r0, #0]
{
 8002386:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800238a:	f013 0601 	ands.w	r6, r3, #1
{
 800238e:	b083      	sub	sp, #12
 8002390:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002392:	d00b      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002394:	4ab8      	ldr	r2, [pc, #736]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002396:	6891      	ldr	r1, [r2, #8]
 8002398:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800239c:	6091      	str	r1, [r2, #8]
 800239e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80023a0:	6891      	ldr	r1, [r2, #8]
 80023a2:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023a4:	fab6 f686 	clz	r6, r6
 80023a8:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023aa:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023ac:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80023b0:	d010      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023b2:	49b1      	ldr	r1, [pc, #708]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023b4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80023b6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023ba:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023be:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80023c2:	ea42 0205 	orr.w	r2, r2, r5
 80023c6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023ca:	f000 81b0 	beq.w	800272e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023ce:	fab5 f585 	clz	r5, r5
 80023d2:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023d4:	02d9      	lsls	r1, r3, #11
 80023d6:	d510      	bpl.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023d8:	48a7      	ldr	r0, [pc, #668]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80023dc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023e0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023e4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80023e8:	ea42 0201 	orr.w	r2, r2, r1
 80023ec:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023f0:	f000 819b 	beq.w	800272a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80023f4:	2900      	cmp	r1, #0
 80023f6:	bf08      	it	eq
 80023f8:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80023fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80023fe:	bf18      	it	ne
 8002400:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002402:	069a      	lsls	r2, r3, #26
 8002404:	f100 8149 	bmi.w	800269a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002408:	06d9      	lsls	r1, r3, #27
 800240a:	d50c      	bpl.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800240c:	4a9a      	ldr	r2, [pc, #616]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800240e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002412:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002416:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800241a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800241e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002420:	4301      	orrs	r1, r0
 8002422:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002426:	045a      	lsls	r2, r3, #17
 8002428:	d508      	bpl.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800242a:	4993      	ldr	r1, [pc, #588]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800242c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800242e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002432:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002436:	4302      	orrs	r2, r0
 8002438:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800243c:	041f      	lsls	r7, r3, #16
 800243e:	d508      	bpl.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002440:	498d      	ldr	r1, [pc, #564]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002442:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002444:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002448:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800244c:	4302      	orrs	r2, r0
 800244e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002452:	03d8      	lsls	r0, r3, #15
 8002454:	d508      	bpl.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002456:	4988      	ldr	r1, [pc, #544]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002458:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800245a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800245e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002462:	4302      	orrs	r2, r0
 8002464:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002468:	0399      	lsls	r1, r3, #14
 800246a:	d508      	bpl.n	800247e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800246c:	4982      	ldr	r1, [pc, #520]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800246e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002470:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002474:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002478:	4302      	orrs	r2, r0
 800247a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800247e:	065a      	lsls	r2, r3, #25
 8002480:	d508      	bpl.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002482:	497d      	ldr	r1, [pc, #500]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002484:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002486:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800248a:	f022 0203 	bic.w	r2, r2, #3
 800248e:	4302      	orrs	r2, r0
 8002490:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002494:	061f      	lsls	r7, r3, #24
 8002496:	d508      	bpl.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002498:	4977      	ldr	r1, [pc, #476]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800249a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800249c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80024a0:	f022 020c 	bic.w	r2, r2, #12
 80024a4:	4302      	orrs	r2, r0
 80024a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024aa:	05d8      	lsls	r0, r3, #23
 80024ac:	d508      	bpl.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ae:	4972      	ldr	r1, [pc, #456]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80024b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80024b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80024ba:	4302      	orrs	r2, r0
 80024bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c0:	0599      	lsls	r1, r3, #22
 80024c2:	d508      	bpl.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024c4:	496c      	ldr	r1, [pc, #432]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80024c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80024cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024d0:	4302      	orrs	r2, r0
 80024d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024d6:	055a      	lsls	r2, r3, #21
 80024d8:	d508      	bpl.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024da:	4967      	ldr	r1, [pc, #412]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80024e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024e6:	4302      	orrs	r2, r0
 80024e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024ec:	051f      	lsls	r7, r3, #20
 80024ee:	d508      	bpl.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024f0:	4961      	ldr	r1, [pc, #388]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80024f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024fc:	4302      	orrs	r2, r0
 80024fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002502:	04d8      	lsls	r0, r3, #19
 8002504:	d508      	bpl.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002506:	495c      	ldr	r1, [pc, #368]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002508:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800250a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800250e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002512:	4302      	orrs	r2, r0
 8002514:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002518:	0499      	lsls	r1, r3, #18
 800251a:	d508      	bpl.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800251c:	4956      	ldr	r1, [pc, #344]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800251e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002520:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002524:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002528:	4302      	orrs	r2, r0
 800252a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800252e:	025a      	lsls	r2, r3, #9
 8002530:	d508      	bpl.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002532:	4951      	ldr	r1, [pc, #324]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002534:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002536:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800253a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800253e:	4302      	orrs	r2, r0
 8002540:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002544:	029f      	lsls	r7, r3, #10
 8002546:	d50c      	bpl.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002548:	494b      	ldr	r1, [pc, #300]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800254a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800254c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002550:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002554:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002558:	bf08      	it	eq
 800255a:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800255c:	4302      	orrs	r2, r0
 800255e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002562:	f013 0f08 	tst.w	r3, #8
 8002566:	bf18      	it	ne
 8002568:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800256a:	0358      	lsls	r0, r3, #13
 800256c:	d508      	bpl.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800256e:	4942      	ldr	r1, [pc, #264]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002570:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002572:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002576:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800257a:	4302      	orrs	r2, r0
 800257c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002580:	0219      	lsls	r1, r3, #8
 8002582:	d40b      	bmi.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002588:	d016      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800258a:	07f2      	lsls	r2, r6, #31
 800258c:	d414      	bmi.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800258e:	2d01      	cmp	r5, #1
 8002590:	f000 80d0 	beq.w	8002734 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002594:	2000      	movs	r0, #0
}
 8002596:	b003      	add	sp, #12
 8002598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800259c:	4936      	ldr	r1, [pc, #216]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800259e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025a2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80025a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80025ae:	ea42 0200 	orr.w	r2, r2, r0
 80025b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80025b6:	d1e8      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 80025b8:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ba:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025bc:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 80025be:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80025c2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80025c4:	f7fd ffde 	bl	8000584 <HAL_GetTick>
 80025c8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ca:	e004      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025cc:	f7fd ffda 	bl	8000584 <HAL_GetTick>
 80025d0:	1bc0      	subs	r0, r0, r7
 80025d2:	2864      	cmp	r0, #100	; 0x64
 80025d4:	d85d      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025d6:	6833      	ldr	r3, [r6, #0]
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	d4f7      	bmi.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	07df      	lsls	r7, r3, #31
 80025e0:	d512      	bpl.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80025e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80025e4:	b982      	cbnz	r2, 8002608 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025e6:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025ea:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025ee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80025f2:	6860      	ldr	r0, [r4, #4]
 80025f4:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 80025f8:	68a1      	ldr	r1, [r4, #8]
 80025fa:	433a      	orrs	r2, r7
 80025fc:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002600:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002604:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002608:	031e      	lsls	r6, r3, #12
 800260a:	f100 8111 	bmi.w	8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800260e:	02d8      	lsls	r0, r3, #11
 8002610:	d504      	bpl.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x298>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002612:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002614:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002618:	f000 810f 	beq.w	800283a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800261c:	01d9      	lsls	r1, r3, #7
 800261e:	d511      	bpl.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002620:	4e15      	ldr	r6, [pc, #84]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002622:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002624:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002628:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800262c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002630:	6921      	ldr	r1, [r4, #16]
 8002632:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002636:	433a      	orrs	r2, r7
 8002638:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800263c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002640:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002644:	019a      	lsls	r2, r3, #6
 8002646:	d50d      	bpl.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002648:	6923      	ldr	r3, [r4, #16]
 800264a:	6862      	ldr	r2, [r4, #4]
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002652:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002658:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800265c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002660:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002666:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002668:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800266a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800266e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002670:	f7fd ff88 	bl	8000584 <HAL_GetTick>
 8002674:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002676:	e006      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8002678:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800267c:	f7fd ff82 	bl	8000584 <HAL_GetTick>
 8002680:	1bc0      	subs	r0, r0, r7
 8002682:	2864      	cmp	r0, #100	; 0x64
 8002684:	d805      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002686:	6833      	ldr	r3, [r6, #0]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	d5f7      	bpl.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if(pllsaiused == 1)
 800268c:	2d01      	cmp	r5, #1
 800268e:	d181      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002690:	e050      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        return HAL_TIMEOUT;
 8002692:	2003      	movs	r0, #3
}
 8002694:	b003      	add	sp, #12
 8002696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	4a87      	ldr	r2, [pc, #540]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 800269c:	4b87      	ldr	r3, [pc, #540]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026a0:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80026a6:	6411      	str	r1, [r2, #64]	; 0x40
 80026a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026aa:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80026ae:	9201      	str	r2, [sp, #4]
 80026b0:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80026ba:	f7fd ff63 	bl	8000584 <HAL_GetTick>
 80026be:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026c0:	e005      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fd ff5f 	bl	8000584 <HAL_GetTick>
 80026c6:	eba0 0008 	sub.w	r0, r0, r8
 80026ca:	2864      	cmp	r0, #100	; 0x64
 80026cc:	d8e1      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	05db      	lsls	r3, r3, #23
 80026d2:	d5f6      	bpl.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026d4:	4a78      	ldr	r2, [pc, #480]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80026d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026d8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80026da:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026de:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 80026e2:	d011      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80026e4:	4288      	cmp	r0, r1
 80026e6:	d00f      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x384>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026e8:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ea:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026ec:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80026f0:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 80026f4:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f6:	6f17      	ldr	r7, [r2, #112]	; 0x70
 80026f8:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 80026fc:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80026fe:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002700:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002702:	07cf      	lsls	r7, r1, #31
 8002704:	f100 80c3 	bmi.w	800288e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002708:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800270c:	f000 80b1 	beq.w	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002710:	4969      	ldr	r1, [pc, #420]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002712:	688a      	ldr	r2, [r1, #8]
 8002714:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002718:	608a      	str	r2, [r1, #8]
 800271a:	4a67      	ldr	r2, [pc, #412]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002722:	430b      	orrs	r3, r1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	e66e      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 800272a:	2601      	movs	r6, #1
 800272c:	e665      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 800272e:	2500      	movs	r5, #0
      plli2sused = 1;
 8002730:	2601      	movs	r6, #1
 8002732:	e64f      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 8002734:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002736:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002738:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800273a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800273e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002740:	f7fd ff20 	bl	8000584 <HAL_GetTick>
 8002744:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002746:	e004      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002748:	f7fd ff1c 	bl	8000584 <HAL_GetTick>
 800274c:	1b80      	subs	r0, r0, r6
 800274e:	2864      	cmp	r0, #100	; 0x64
 8002750:	d89f      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002752:	682b      	ldr	r3, [r5, #0]
 8002754:	009f      	lsls	r7, r3, #2
 8002756:	d4f7      	bmi.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	031d      	lsls	r5, r3, #12
 800275c:	f100 8092 	bmi.w	8002884 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002760:	02d8      	lsls	r0, r3, #11
 8002762:	d51d      	bpl.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002764:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002766:	b9da      	cbnz	r2, 80027a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002768:	4953      	ldr	r1, [pc, #332]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800276a:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800276c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002770:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002774:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002778:	69a0      	ldr	r0, [r4, #24]
 800277a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800277e:	4332      	orrs	r2, r6
 8002780:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002784:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002788:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800278c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002790:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002792:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002796:	3801      	subs	r0, #1
 8002798:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800279c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027a0:	0299      	lsls	r1, r3, #10
 80027a2:	d515      	bpl.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80027a4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80027a6:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80027aa:	d111      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027ac:	4942      	ldr	r1, [pc, #264]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027ae:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027b4:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027b8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80027bc:	6a20      	ldr	r0, [r4, #32]
 80027be:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80027c2:	4332      	orrs	r2, r6
 80027c4:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80027c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80027cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027d0:	071a      	lsls	r2, r3, #28
 80027d2:	d519      	bpl.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027d4:	4a38      	ldr	r2, [pc, #224]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027d6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027d8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027e0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80027e4:	69e0      	ldr	r0, [r4, #28]
 80027e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ea:	430b      	orrs	r3, r1
 80027ec:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80027f0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80027f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027f8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80027fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80027fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002802:	430b      	orrs	r3, r1
 8002804:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800280a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800280c:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 800280e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002812:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002814:	f7fd feb6 	bl	8000584 <HAL_GetTick>
 8002818:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800281a:	e005      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800281c:	f7fd feb2 	bl	8000584 <HAL_GetTick>
 8002820:	1b40      	subs	r0, r0, r5
 8002822:	2864      	cmp	r0, #100	; 0x64
 8002824:	f63f af35 	bhi.w	8002692 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	d5f6      	bpl.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800282e:	e6b1      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x210>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002830:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002832:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002836:	f47f aeea 	bne.w	800260e <HAL_RCCEx_PeriphCLKConfig+0x28a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800283a:	4e1f      	ldr	r6, [pc, #124]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800283c:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800283e:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002842:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002846:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800284a:	68e1      	ldr	r1, [r4, #12]
 800284c:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002850:	433a      	orrs	r2, r7
 8002852:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002856:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800285a:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800285e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8002862:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002864:	f021 011f 	bic.w	r1, r1, #31
 8002868:	3a01      	subs	r2, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8002870:	e6d4      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002872:	4811      	ldr	r0, [pc, #68]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002874:	4912      	ldr	r1, [pc, #72]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002876:	6882      	ldr	r2, [r0, #8]
 8002878:	4019      	ands	r1, r3
 800287a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800287e:	430a      	orrs	r2, r1
 8002880:	6082      	str	r2, [r0, #8]
 8002882:	e74a      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x396>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002884:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002886:	2a00      	cmp	r2, #0
 8002888:	f43f af6e 	beq.w	8002768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800288c:	e768      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288e:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002894:	f7fd fe76 	bl	8000584 <HAL_GetTick>
 8002898:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	e006      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x526>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fd fe72 	bl	8000584 <HAL_GetTick>
 80028a0:	eba0 0009 	sub.w	r0, r0, r9
 80028a4:	4540      	cmp	r0, r8
 80028a6:	f63f aef4 	bhi.w	8002692 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ac:	0798      	lsls	r0, r3, #30
 80028ae:	d5f5      	bpl.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028b2:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80028b6:	e727      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000
 80028c0:	0ffffcff 	.word	0x0ffffcff

080028c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c6:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028c8:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ca:	f024 0401 	bic.w	r4, r4, #1
  tmpccmrx |= OC_Config->OCMode;
 80028ce:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028d0:	4a12      	ldr	r2, [pc, #72]	; (800291c <TIM_OC1_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d2:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80028d4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028d6:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 80028d8:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx = TIMx->CCMR1;
 80028dc:	6987      	ldr	r7, [r0, #24]
  tmpccer |= OC_Config->OCPolarity;
 80028de:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028e0:	4d0f      	ldr	r5, [pc, #60]	; (8002920 <TIM_OC1_SetConfig+0x5c>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028e2:	403a      	ands	r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028e4:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 80028e6:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028ea:	d00a      	beq.n	8002902 <TIM_OC1_SetConfig+0x3e>
 80028ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028f0:	42a8      	cmp	r0, r5
 80028f2:	d006      	beq.n	8002902 <TIM_OC1_SetConfig+0x3e>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028f4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80028f6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80028f8:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80028fa:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fc:	6203      	str	r3, [r0, #32]
}
 80028fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002900:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002902:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002906:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002908:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800290a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800290e:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8002910:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8002912:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002914:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002918:	432c      	orrs	r4, r5
 800291a:	e7eb      	b.n	80028f4 <TIM_OC1_SetConfig+0x30>
 800291c:	fffeff8c 	.word	0xfffeff8c
 8002920:	40010000 	.word	0x40010000

08002924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002924:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002926:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002928:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800292a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 800292e:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002932:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002934:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002936:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 8002938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800293c:	69c7      	ldr	r7, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800293e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002942:	4d11      	ldr	r5, [pc, #68]	; (8002988 <TIM_OC3_SetConfig+0x64>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002944:	403a      	ands	r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002946:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8002948:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800294c:	d00a      	beq.n	8002964 <TIM_OC3_SetConfig+0x40>
 800294e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002952:	42a8      	cmp	r0, r5
 8002954:	d006      	beq.n	8002964 <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002956:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002958:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800295a:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800295c:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295e:	6203      	str	r3, [r0, #32]
}
 8002960:	bcf0      	pop	{r4, r5, r6, r7}
 8002962:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002968:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800296a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800296c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002970:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002972:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002976:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800297c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8002980:	e7e9      	b.n	8002956 <TIM_OC3_SetConfig+0x32>
 8002982:	bf00      	nop
 8002984:	fffeff8c 	.word	0xfffeff8c
 8002988:	40010000 	.word	0x40010000

0800298c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800298e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002990:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002992:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002996:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002998:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800299a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800299c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800299e:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 80029a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 80029a4:	69c7      	ldr	r7, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029a6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029aa:	4d0c      	ldr	r5, [pc, #48]	; (80029dc <TIM_OC4_SetConfig+0x50>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029ac:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ae:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b4:	d00a      	beq.n	80029cc <TIM_OC4_SetConfig+0x40>
 80029b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029ba:	42a8      	cmp	r0, r5
 80029bc:	d006      	beq.n	80029cc <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029be:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80029c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80029c2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80029c4:	6401      	str	r1, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c6:	6203      	str	r3, [r0, #32]
}
 80029c8:	bcf0      	pop	{r4, r5, r6, r7}
 80029ca:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029cc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029d0:	694d      	ldr	r5, [r1, #20]
 80029d2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80029d6:	e7f2      	b.n	80029be <TIM_OC4_SetConfig+0x32>
 80029d8:	feff8cff 	.word	0xfeff8cff
 80029dc:	40010000 	.word	0x40010000

080029e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80029e0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029e2:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029e4:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029e6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 80029ea:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029ec:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029ee:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80029f0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80029f2:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 80029f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 80029f8:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029fa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fe:	4d0c      	ldr	r5, [pc, #48]	; (8002a30 <TIM_OC5_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a00:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a02:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8002a04:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a08:	d00a      	beq.n	8002a20 <TIM_OC5_SetConfig+0x40>
 8002a0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a0e:	42a8      	cmp	r0, r5
 8002a10:	d006      	beq.n	8002a20 <TIM_OC5_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a12:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002a14:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8002a16:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8002a18:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1a:	6203      	str	r3, [r0, #32]
}
 8002a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a1e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a20:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a24:	694d      	ldr	r5, [r1, #20]
 8002a26:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a2a:	e7f2      	b.n	8002a12 <TIM_OC5_SetConfig+0x32>
 8002a2c:	fffeff8f 	.word	0xfffeff8f
 8002a30:	40010000 	.word	0x40010000

08002a34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a34:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a36:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a38:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a3a:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a3e:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a40:	4a0f      	ldr	r2, [pc, #60]	; (8002a80 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a42:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002a44:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002a46:	6844      	ldr	r4, [r0, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002a48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 8002a4c:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a4e:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a52:	4d0c      	ldr	r5, [pc, #48]	; (8002a84 <TIM_OC6_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a54:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a56:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a58:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5c:	d00a      	beq.n	8002a74 <TIM_OC6_SetConfig+0x40>
 8002a5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a62:	42a8      	cmp	r0, r5
 8002a64:	d006      	beq.n	8002a74 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a66:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002a68:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8002a6a:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8002a6c:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6e:	6203      	str	r3, [r0, #32]
}
 8002a70:	bcf0      	pop	{r4, r5, r6, r7}
 8002a72:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a74:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a78:	694d      	ldr	r5, [r1, #20]
 8002a7a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8002a7e:	e7f2      	b.n	8002a66 <TIM_OC6_SetConfig+0x32>
 8002a80:	feff8fff 	.word	0xfeff8fff
 8002a84:	40010000 	.word	0x40010000

08002a88 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a88:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a8c:	68d9      	ldr	r1, [r3, #12]
 8002a8e:	f041 0101 	orr.w	r1, r1, #1
 8002a92:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a98:	2a06      	cmp	r2, #6
 8002a9a:	d006      	beq.n	8002aaa <HAL_TIM_Base_Start_IT+0x22>
 8002a9c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
}
 8002aaa:	2000      	movs	r0, #0
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	00010007 	.word	0x00010007

08002ab4 <HAL_TIM_OC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ab4:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002abc:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002abe:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8002ac2:	ea20 0001 	bic.w	r0, r0, r1
{
 8002ac6:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8002ac8:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002aca:	4c0f      	ldr	r4, [pc, #60]	; (8002b08 <HAL_TIM_OC_Start+0x54>)

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002acc:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ace:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ad0:	ea41 0102 	orr.w	r1, r1, r2
 8002ad4:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad6:	d012      	beq.n	8002afe <HAL_TIM_OC_Start+0x4a>
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <HAL_TIM_OC_Start+0x58>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00f      	beq.n	8002afe <HAL_TIM_OC_Start+0x4a>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ade:	6899      	ldr	r1, [r3, #8]
 8002ae0:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <HAL_TIM_OC_Start+0x5c>)
 8002ae2:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	2a06      	cmp	r2, #6
 8002ae6:	d006      	beq.n	8002af6 <HAL_TIM_OC_Start+0x42>
 8002ae8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_OC_Start+0x42>
    __HAL_TIM_ENABLE(htim);
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
}
 8002af6:	2000      	movs	r0, #0
 8002af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002afc:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8002afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
 8002b06:	e7ea      	b.n	8002ade <HAL_TIM_OC_Start+0x2a>
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40010400 	.word	0x40010400
 8002b10:	00010007 	.word	0x00010007

08002b14 <HAL_TIM_PWM_Start>:
 8002b14:	f7ff bfce 	b.w	8002ab4 <HAL_TIM_OC_Start>

08002b18 <HAL_TIM_PWM_Stop>:
{
 8002b18:	b410      	push	{r4}
 8002b1a:	4604      	mov	r4, r0
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b1c:	f001 011f 	and.w	r1, r1, #31
 8002b20:	2201      	movs	r2, #1
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b22:	4819      	ldr	r0, [pc, #100]	; (8002b88 <HAL_TIM_PWM_Stop+0x70>)
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b24:	6823      	ldr	r3, [r4, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b26:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002b28:	6a19      	ldr	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b2a:	4283      	cmp	r3, r0
  TIMx->CCER &= ~tmp;
 8002b2c:	ea21 0102 	bic.w	r1, r1, r2
 8002b30:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b36:	d017      	beq.n	8002b68 <HAL_TIM_PWM_Stop+0x50>
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <HAL_TIM_PWM_Stop+0x74>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d014      	beq.n	8002b68 <HAL_TIM_PWM_Stop+0x50>
  __HAL_TIM_DISABLE(htim);
 8002b3e:	6a19      	ldr	r1, [r3, #32]
 8002b40:	f241 1211 	movw	r2, #4369	; 0x1111
 8002b44:	4211      	tst	r1, r2
 8002b46:	d108      	bne.n	8002b5a <HAL_TIM_PWM_Stop+0x42>
 8002b48:	6a19      	ldr	r1, [r3, #32]
 8002b4a:	f240 4244 	movw	r2, #1092	; 0x444
 8002b4e:	4211      	tst	r1, r2
 8002b50:	d103      	bne.n	8002b5a <HAL_TIM_PWM_Stop+0x42>
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002b5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b66:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8002b68:	6a19      	ldr	r1, [r3, #32]
 8002b6a:	f241 1211 	movw	r2, #4369	; 0x1111
 8002b6e:	4211      	tst	r1, r2
 8002b70:	d1e5      	bne.n	8002b3e <HAL_TIM_PWM_Stop+0x26>
 8002b72:	6a19      	ldr	r1, [r3, #32]
 8002b74:	f240 4244 	movw	r2, #1092	; 0x444
 8002b78:	4211      	tst	r1, r2
 8002b7a:	d1e0      	bne.n	8002b3e <HAL_TIM_PWM_Stop+0x26>
 8002b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b82:	645a      	str	r2, [r3, #68]	; 0x44
 8002b84:	e7db      	b.n	8002b3e <HAL_TIM_PWM_Stop+0x26>
 8002b86:	bf00      	nop
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40010400 	.word	0x40010400

08002b90 <HAL_TIM_OC_DelayElapsedCallback>:
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop

08002b94 <HAL_TIM_IC_CaptureCallback>:
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop

08002b98 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <HAL_TIM_TriggerCallback>:
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba0:	6803      	ldr	r3, [r0, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	0791      	lsls	r1, r2, #30
{
 8002ba6:	b510      	push	{r4, lr}
 8002ba8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002baa:	d502      	bpl.n	8002bb2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	0792      	lsls	r2, r2, #30
 8002bb0:	d468      	bmi.n	8002c84 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	0752      	lsls	r2, r2, #29
 8002bb6:	d502      	bpl.n	8002bbe <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	0750      	lsls	r0, r2, #29
 8002bbc:	d44f      	bmi.n	8002c5e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	0711      	lsls	r1, r2, #28
 8002bc2:	d502      	bpl.n	8002bca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	0712      	lsls	r2, r2, #28
 8002bc8:	d437      	bmi.n	8002c3a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	06d0      	lsls	r0, r2, #27
 8002bce:	d502      	bpl.n	8002bd6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	06d1      	lsls	r1, r2, #27
 8002bd4:	d41e      	bmi.n	8002c14 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	07d2      	lsls	r2, r2, #31
 8002bda:	d502      	bpl.n	8002be2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	07d0      	lsls	r0, r2, #31
 8002be0:	d469      	bmi.n	8002cb6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	0611      	lsls	r1, r2, #24
 8002be6:	d502      	bpl.n	8002bee <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	0612      	lsls	r2, r2, #24
 8002bec:	d46b      	bmi.n	8002cc6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	05d0      	lsls	r0, r2, #23
 8002bf2:	d502      	bpl.n	8002bfa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	0611      	lsls	r1, r2, #24
 8002bf8:	d46d      	bmi.n	8002cd6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	0652      	lsls	r2, r2, #25
 8002bfe:	d502      	bpl.n	8002c06 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	0650      	lsls	r0, r2, #25
 8002c04:	d46f      	bmi.n	8002ce6 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	0691      	lsls	r1, r2, #26
 8002c0a:	d502      	bpl.n	8002c12 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	0692      	lsls	r2, r2, #26
 8002c10:	d449      	bmi.n	8002ca6 <HAL_TIM_IRQHandler+0x106>
}
 8002c12:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c14:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c18:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c1c:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c1e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c20:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c22:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c26:	d16f      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c28:	f7ff ffb2 	bl	8002b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff ffb3 	bl	8002b98 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	2200      	movs	r2, #0
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	7722      	strb	r2, [r4, #28]
 8002c38:	e7cd      	b.n	8002bd6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c3a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002c40:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c42:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c44:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c46:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c48:	079b      	lsls	r3, r3, #30
 8002c4a:	d15a      	bne.n	8002d02 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4c:	f7ff ffa0 	bl	8002b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7ff ffa1 	bl	8002b98 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	2200      	movs	r2, #0
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	7722      	strb	r2, [r4, #28]
 8002c5c:	e7b5      	b.n	8002bca <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c5e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c62:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002c64:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c66:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c68:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c6a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c6c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c70:	d144      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	f7ff ff8d 	bl	8002b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7ff ff8e 	bl	8002b98 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	7722      	strb	r2, [r4, #28]
 8002c82:	e79c      	b.n	8002bbe <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c84:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c88:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c8a:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c8c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c8e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c90:	0799      	lsls	r1, r3, #30
 8002c92:	d130      	bne.n	8002cf6 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c94:	f7ff ff7c 	bl	8002b90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f7ff ff7d 	bl	8002b98 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	7722      	strb	r2, [r4, #28]
 8002ca4:	e785      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002caa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cac:	611a      	str	r2, [r3, #16]
}
 8002cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002cb2:	f000 ba17 	b.w	80030e4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cbe:	f003 fd77 	bl	80067b0 <HAL_TIM_PeriodElapsedCallback>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	e78d      	b.n	8002be2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002cca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ccc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002cce:	f000 fa0b 	bl	80030e8 <HAL_TIMEx_BreakCallback>
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	e78b      	b.n	8002bee <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8002cda:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cdc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002cde:	f000 fa05 	bl	80030ec <HAL_TIMEx_Break2Callback>
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	e789      	b.n	8002bfa <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ce6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002cea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002cee:	f7ff ff55 	bl	8002b9c <HAL_TIM_TriggerCallback>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	e787      	b.n	8002c06 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	f7ff ff4d 	bl	8002b94 <HAL_TIM_IC_CaptureCallback>
 8002cfa:	e7d0      	b.n	8002c9e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfc:	f7ff ff4a 	bl	8002b94 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e7bc      	b.n	8002c7c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	f7ff ff47 	bl	8002b94 <HAL_TIM_IC_CaptureCallback>
 8002d06:	e7a6      	b.n	8002c56 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d08:	f7ff ff44 	bl	8002b94 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e791      	b.n	8002c32 <HAL_TIM_IRQHandler+0x92>
 8002d0e:	bf00      	nop

08002d10 <TIM_Base_SetConfig>:
{
 8002d10:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d12:	4e32      	ldr	r6, [pc, #200]	; (8002ddc <TIM_Base_SetConfig+0xcc>)
 8002d14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d18:	4f31      	ldr	r7, [pc, #196]	; (8002de0 <TIM_Base_SetConfig+0xd0>)
 8002d1a:	eba0 0606 	sub.w	r6, r0, r6
  tmpcr1 = TIMx->CR1;
 8002d1e:	6803      	ldr	r3, [r0, #0]
 8002d20:	eba0 0707 	sub.w	r7, r0, r7
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d24:	fab6 f686 	clz	r6, r6
 8002d28:	fab7 f787 	clz	r7, r7
 8002d2c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8002d30:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8002d34:	d025      	beq.n	8002d82 <TIM_Base_SetConfig+0x72>
 8002d36:	bb26      	cbnz	r6, 8002d82 <TIM_Base_SetConfig+0x72>
 8002d38:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <TIM_Base_SetConfig+0xd4>)
 8002d3a:	4290      	cmp	r0, r2
 8002d3c:	d03e      	beq.n	8002dbc <TIM_Base_SetConfig+0xac>
 8002d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d42:	4290      	cmp	r0, r2
 8002d44:	d03a      	beq.n	8002dbc <TIM_Base_SetConfig+0xac>
 8002d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d4a:	4290      	cmp	r0, r2
 8002d4c:	d03b      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb6>
 8002d4e:	2f00      	cmp	r7, #0
 8002d50:	d139      	bne.n	8002dc6 <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <TIM_Base_SetConfig+0xd8>)
 8002d54:	4290      	cmp	r0, r2
 8002d56:	d018      	beq.n	8002d8a <TIM_Base_SetConfig+0x7a>
 8002d58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d5c:	4290      	cmp	r0, r2
 8002d5e:	d014      	beq.n	8002d8a <TIM_Base_SetConfig+0x7a>
 8002d60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d64:	4290      	cmp	r0, r2
 8002d66:	d010      	beq.n	8002d8a <TIM_Base_SetConfig+0x7a>
 8002d68:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002d6c:	4290      	cmp	r0, r2
 8002d6e:	d00c      	beq.n	8002d8a <TIM_Base_SetConfig+0x7a>
 8002d70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d74:	4290      	cmp	r0, r2
 8002d76:	d008      	beq.n	8002d8a <TIM_Base_SetConfig+0x7a>
 8002d78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d7c:	4290      	cmp	r0, r2
 8002d7e:	d108      	bne.n	8002d92 <TIM_Base_SetConfig+0x82>
 8002d80:	e003      	b.n	8002d8a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d86:	684d      	ldr	r5, [r1, #4]
 8002d88:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	68cd      	ldr	r5, [r1, #12]
 8002d90:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d92:	694a      	ldr	r2, [r1, #20]
 8002d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d98:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d9a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8002d9c:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8002d9e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da0:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002da2:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da4:	b926      	cbnz	r6, 8002db0 <TIM_Base_SetConfig+0xa0>
 8002da6:	b91f      	cbnz	r7, 8002db0 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8002dac:	6143      	str	r3, [r0, #20]
}
 8002dae:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002db0:	690b      	ldr	r3, [r1, #16]
 8002db2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002db4:	2301      	movs	r3, #1
}
 8002db6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8002db8:	6143      	str	r3, [r0, #20]
}
 8002dba:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002dc0:	684a      	ldr	r2, [r1, #4]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	e7e1      	b.n	8002d8a <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc6:	4a09      	ldr	r2, [pc, #36]	; (8002dec <TIM_Base_SetConfig+0xdc>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002dcc:	684c      	ldr	r4, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dce:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002dd0:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd4:	d0d9      	beq.n	8002d8a <TIM_Base_SetConfig+0x7a>
 8002dd6:	2f00      	cmp	r7, #0
 8002dd8:	d1d7      	bne.n	8002d8a <TIM_Base_SetConfig+0x7a>
 8002dda:	e7ba      	b.n	8002d52 <TIM_Base_SetConfig+0x42>
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40010400 	.word	0x40010400
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40000c00 	.word	0x40000c00

08002df0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002df0:	b1b8      	cbz	r0, 8002e22 <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002df2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8002df6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002df8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	b15b      	cbz	r3, 8002e18 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e02:	6820      	ldr	r0, [r4, #0]
 8002e04:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002e06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0a:	f7ff ff81 	bl	8002d10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002e0e:	2301      	movs	r3, #1
  return HAL_OK;
 8002e10:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002e16:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e1c:	f003 fe84 	bl	8006b28 <HAL_TIM_Base_MspInit>
 8002e20:	e7ee      	b.n	8002e00 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002e22:	2001      	movs	r0, #1
}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop

08002e28 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002e28:	b1b8      	cbz	r0, 8002e5a <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8002e2e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e34:	4604      	mov	r4, r0
 8002e36:	b15b      	cbz	r3, 8002e50 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e42:	f7ff ff65 	bl	8002d10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002e46:	2301      	movs	r3, #1
  return HAL_OK;
 8002e48:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002e4e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002e54:	f003 fde0 	bl	8006a18 <HAL_TIM_PWM_MspInit>
 8002e58:	e7ee      	b.n	8002e38 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8002e5a:	2001      	movs	r0, #1
}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop

08002e60 <TIM_OC2_SetConfig>:
{
 8002e60:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e62:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e64:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e66:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e6a:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002e70:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002e72:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC2P;
 8002e74:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx = TIMx->CCMR1;
 8002e78:	6987      	ldr	r7, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e7a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e7e:	4d11      	ldr	r5, [pc, #68]	; (8002ec4 <TIM_OC2_SetConfig+0x64>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e80:	403a      	ands	r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e82:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e84:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e88:	d00a      	beq.n	8002ea0 <TIM_OC2_SetConfig+0x40>
 8002e8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e8e:	42a8      	cmp	r0, r5
 8002e90:	d006      	beq.n	8002ea0 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8002e92:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002e94:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e96:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002e98:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002e9a:	6203      	str	r3, [r0, #32]
}
 8002e9c:	bcf0      	pop	{r4, r5, r6, r7}
 8002e9e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ea4:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ea6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ea8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eac:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eae:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eb2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eb8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002ebc:	e7e9      	b.n	8002e92 <TIM_OC2_SetConfig+0x32>
 8002ebe:	bf00      	nop
 8002ec0:	feff8cff 	.word	0xfeff8cff
 8002ec4:	40010000 	.word	0x40010000

08002ec8 <HAL_TIM_PWM_ConfigChannel>:
{
 8002ec8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002eca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f000 808d 	beq.w	8002fee <HAL_TIM_PWM_ConfigChannel+0x126>
 8002ed4:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed6:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002ee0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  switch (Channel)
 8002ee4:	2a14      	cmp	r2, #20
 8002ee6:	d81d      	bhi.n	8002f24 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002ee8:	e8df f002 	tbb	[pc, r2]
 8002eec:	1c1c1c0b 	.word	0x1c1c1c0b
 8002ef0:	1c1c1c37 	.word	0x1c1c1c37
 8002ef4:	1c1c1c4a 	.word	0x1c1c1c4a
 8002ef8:	1c1c1c5c 	.word	0x1c1c1c5c
 8002efc:	1c1c1c6f 	.word	0x1c1c1c6f
 8002f00:	24          	.byte	0x24
 8002f01:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f02:	4629      	mov	r1, r5
 8002f04:	6800      	ldr	r0, [r0, #0]
 8002f06:	f7ff fcdd 	bl	80028c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f0a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f0c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f0e:	6999      	ldr	r1, [r3, #24]
 8002f10:	f041 0108 	orr.w	r1, r1, #8
 8002f14:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f16:	6999      	ldr	r1, [r3, #24]
 8002f18:	f021 0104 	bic.w	r1, r1, #4
 8002f1c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	4302      	orrs	r2, r0
 8002f22:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8002f24:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	2201      	movs	r2, #1
  return HAL_OK;
 8002f28:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8002f2a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002f32:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f34:	4629      	mov	r1, r5
 8002f36:	6800      	ldr	r0, [r0, #0]
 8002f38:	f7ff fd7c 	bl	8002a34 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f3c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f3e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f42:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002f46:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f4a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002f4e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f52:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f58:	e7e4      	b.n	8002f24 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	6800      	ldr	r0, [r0, #0]
 8002f5e:	f7ff ff7f 	bl	8002e60 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f62:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f64:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f66:	6999      	ldr	r1, [r3, #24]
 8002f68:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002f6c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f6e:	6999      	ldr	r1, [r3, #24]
 8002f70:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002f74:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002f7c:	619a      	str	r2, [r3, #24]
      break;
 8002f7e:	e7d1      	b.n	8002f24 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f80:	4629      	mov	r1, r5
 8002f82:	6800      	ldr	r0, [r0, #0]
 8002f84:	f7ff fcce 	bl	8002924 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f88:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f8a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f8c:	69d9      	ldr	r1, [r3, #28]
 8002f8e:	f041 0108 	orr.w	r1, r1, #8
 8002f92:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f94:	69d9      	ldr	r1, [r3, #28]
 8002f96:	f021 0104 	bic.w	r1, r1, #4
 8002f9a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	4302      	orrs	r2, r0
 8002fa0:	61da      	str	r2, [r3, #28]
      break;
 8002fa2:	e7bf      	b.n	8002f24 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	6800      	ldr	r0, [r0, #0]
 8002fa8:	f7ff fcf0 	bl	800298c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fae:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fb0:	69d9      	ldr	r1, [r3, #28]
 8002fb2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002fb6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb8:	69d9      	ldr	r1, [r3, #28]
 8002fba:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002fbe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002fc6:	61da      	str	r2, [r3, #28]
      break;
 8002fc8:	e7ac      	b.n	8002f24 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fca:	4629      	mov	r1, r5
 8002fcc:	6800      	ldr	r0, [r0, #0]
 8002fce:	f7ff fd07 	bl	80029e0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fd2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002fd4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fd6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fd8:	f041 0108 	orr.w	r1, r1, #8
 8002fdc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fde:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fe0:	f021 0104 	bic.w	r1, r1, #4
 8002fe4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002fe6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fe8:	4302      	orrs	r2, r0
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fec:	e79a      	b.n	8002f24 <HAL_TIM_PWM_ConfigChannel+0x5c>
  __HAL_LOCK(htim);
 8002fee:	2002      	movs	r0, #2
}
 8002ff0:	bd38      	pop	{r3, r4, r5, pc}
 8002ff2:	bf00      	nop

08002ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d025      	beq.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ffc:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffe:	2302      	movs	r3, #2
{
 8003000:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003002:	4d13      	ldr	r5, [pc, #76]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003008:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800300a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800300c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800300e:	d016      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8003010:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003014:	42aa      	cmp	r2, r5
 8003016:	d012      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003018:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800301a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800301e:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003020:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003024:	2601      	movs	r6, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003026:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003028:	4321      	orrs	r1, r4

  __HAL_UNLOCK(htim);
 800302a:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 800302c:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 800302e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003030:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003034:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003038:	4628      	mov	r0, r5
 800303a:	bc70      	pop	{r4, r5, r6}
 800303c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800303e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003042:	684d      	ldr	r5, [r1, #4]
 8003044:	432b      	orrs	r3, r5
 8003046:	e7e7      	b.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8003048:	2302      	movs	r3, #2
}
 800304a:	4618      	mov	r0, r3
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40010000 	.word	0x40010000

08003054 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d03b      	beq.n	80030d4 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 800305c:	b470      	push	{r4, r5, r6}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800305e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003062:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800306a:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800306c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800306e:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003070:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003074:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003076:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800307c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800307e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003084:	4333      	orrs	r3, r6

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003086:	6806      	ldr	r6, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800308c:	432b      	orrs	r3, r5
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800308e:	4d13      	ldr	r5, [pc, #76]	; (80030dc <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003094:	42ae      	cmp	r6, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003096:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800309a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800309e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030a2:	d009      	beq.n	80030b8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80030a6:	4296      	cmp	r6, r2
 80030a8:	d006      	beq.n	80030b8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80030aa:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 80030ac:	6473      	str	r3, [r6, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80030ae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80030b2:	4610      	mov	r0, r2
 80030b4:	bc70      	pop	{r4, r5, r6}
 80030b6:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80030b8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80030ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80030be:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80030c0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80030c4:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80030c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ca:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80030cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80030d0:	4313      	orrs	r3, r2
 80030d2:	e7ea      	b.n	80030aa <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 80030d4:	2302      	movs	r3, #2
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40010400 	.word	0x40010400

080030e4 <HAL_TIMEx_CommutCallback>:
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop

080030e8 <HAL_TIMEx_BreakCallback>:
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <HAL_TIMEx_Break2Callback>:
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop

080030f0 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030f0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d137      	bne.n	8003166 <HAL_UART_Receive_IT+0x76>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f6:	2900      	cmp	r1, #0
 80030f8:	d033      	beq.n	8003162 <HAL_UART_Receive_IT+0x72>
 80030fa:	fab2 f382 	clz	r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2b00      	cmp	r3, #0
 8003102:	d12e      	bne.n	8003162 <HAL_UART_Receive_IT+0x72>
{
 8003104:	b430      	push	{r4, r5}
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003106:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 800310a:	2c01      	cmp	r4, #1
 800310c:	d042      	beq.n	8003194 <HAL_UART_Receive_IT+0xa4>
    huart->RxXferSize  = Size;
    huart->RxXferCount = Size;
    huart->RxISR       = NULL;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800310e:	6884      	ldr	r4, [r0, #8]
    __HAL_LOCK(huart);
 8003110:	2501      	movs	r5, #1
    huart->RxXferSize  = Size;
 8003112:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003116:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    huart->RxXferCount = Size;
 800311a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr  = pData;
 800311e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxISR       = NULL;
 8003120:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8003122:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
 8003126:	6802      	ldr	r2, [r0, #0]
    UART_MASK_COMPUTATION(huart);
 8003128:	d01f      	beq.n	800316a <HAL_UART_Receive_IT+0x7a>
 800312a:	2c00      	cmp	r4, #0
 800312c:	d12c      	bne.n	8003188 <HAL_UART_Receive_IT+0x98>
 800312e:	6903      	ldr	r3, [r0, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d03c      	beq.n	80031ae <HAL_UART_Receive_IT+0xbe>
 8003134:	237f      	movs	r3, #127	; 0x7f
 8003136:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800313a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313c:	2100      	movs	r1, #0
 800313e:	67c1      	str	r1, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003140:	6783      	str	r3, [r0, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003142:	6893      	ldr	r3, [r2, #8]
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6093      	str	r3, [r2, #8]
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_UART_Receive_IT+0xd4>)
 800314c:	6603      	str	r3, [r0, #96]	; 0x60

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800314e:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8003150:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003152:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    __HAL_UNLOCK(huart);
 8003156:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

    return HAL_OK;
 800315a:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800315c:	6011      	str	r1, [r2, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800315e:	bc30      	pop	{r4, r5}
 8003160:	4770      	bx	lr
      return HAL_ERROR;
 8003162:	2001      	movs	r0, #1
}
 8003164:	4770      	bx	lr
    return HAL_BUSY;
 8003166:	2002      	movs	r0, #2
 8003168:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800316a:	6901      	ldr	r1, [r0, #16]
 800316c:	b9a1      	cbnz	r1, 8003198 <HAL_UART_Receive_IT+0xa8>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800316e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	67c1      	str	r1, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 8003172:	f240 14ff 	movw	r4, #511	; 0x1ff
      huart->RxISR = UART_RxISR_16BIT;
 8003176:	4914      	ldr	r1, [pc, #80]	; (80031c8 <HAL_UART_Receive_IT+0xd8>)
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003178:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	6893      	ldr	r3, [r2, #8]
    UART_MASK_COMPUTATION(huart);
 800317c:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003180:	432b      	orrs	r3, r5
 8003182:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 8003184:	6601      	str	r1, [r0, #96]	; 0x60
 8003186:	e7e2      	b.n	800314e <HAL_UART_Receive_IT+0x5e>
    UART_MASK_COMPUTATION(huart);
 8003188:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800318c:	d013      	beq.n	80031b6 <HAL_UART_Receive_IT+0xc6>
 800318e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003192:	e7d2      	b.n	800313a <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8003194:	2002      	movs	r0, #2
 8003196:	e7e2      	b.n	800315e <HAL_UART_Receive_IT+0x6e>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003198:	2422      	movs	r4, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319a:	67c3      	str	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 800319c:	21ff      	movs	r1, #255	; 0xff
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800319e:	6784      	str	r4, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a0:	6893      	ldr	r3, [r2, #8]
    UART_MASK_COMPUTATION(huart);
 80031a2:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6093      	str	r3, [r2, #8]
 80031ac:	e7cd      	b.n	800314a <HAL_UART_Receive_IT+0x5a>
    UART_MASK_COMPUTATION(huart);
 80031ae:	23ff      	movs	r3, #255	; 0xff
 80031b0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80031b4:	e7c1      	b.n	800313a <HAL_UART_Receive_IT+0x4a>
 80031b6:	6903      	ldr	r3, [r0, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0bb      	beq.n	8003134 <HAL_UART_Receive_IT+0x44>
 80031bc:	233f      	movs	r3, #63	; 0x3f
 80031be:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80031c2:	e7ba      	b.n	800313a <HAL_UART_Receive_IT+0x4a>
 80031c4:	080031d1 	.word	0x080031d1
 80031c8:	0800322d 	.word	0x0800322d

080031cc <HAL_UART_TxCpltCallback>:
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop

080031d0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031d0:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80031d2:	6802      	ldr	r2, [r0, #0]
 80031d4:	2922      	cmp	r1, #34	; 0x22
{
 80031d6:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031d8:	d004      	beq.n	80031e4 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031da:	6993      	ldr	r3, [r2, #24]
 80031dc:	f043 0308 	orr.w	r3, r3, #8
 80031e0:	6193      	str	r3, [r2, #24]
  }
}
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031e6:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 80031ea:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80031ec:	4022      	ands	r2, r4
 80031ee:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 80031f0:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 80031f4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80031f6:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 80031f8:	3101      	adds	r1, #1
    huart->RxXferCount--;
 80031fa:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 80031fc:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80031fe:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8003202:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8003206:	b292      	uxth	r2, r2
 8003208:	2a00      	cmp	r2, #0
 800320a:	d1ea      	bne.n	80031e2 <UART_RxISR_8BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320c:	6801      	ldr	r1, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 800320e:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003210:	680c      	ldr	r4, [r1, #0]
 8003212:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8003216:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003218:	688c      	ldr	r4, [r1, #8]
 800321a:	f024 0401 	bic.w	r4, r4, #1
 800321e:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 8003220:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8003222:	6785      	str	r5, [r0, #120]	; 0x78
      HAL_UART_RxCpltCallback(huart);
 8003224:	f003 faf0 	bl	8006808 <HAL_UART_RxCpltCallback>
}
 8003228:	bd38      	pop	{r3, r4, r5, pc}
 800322a:	bf00      	nop

0800322c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800322c:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800322e:	6802      	ldr	r2, [r0, #0]
 8003230:	2922      	cmp	r1, #34	; 0x22
{
 8003232:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003234:	d004      	beq.n	8003240 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003236:	6993      	ldr	r3, [r2, #24]
 8003238:	f043 0308 	orr.w	r3, r3, #8
 800323c:	6193      	str	r3, [r2, #24]
  }
}
 800323e:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003240:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8003242:	f8b0 505c 	ldrh.w	r5, [r0, #92]	; 0x5c
 8003246:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003248:	4029      	ands	r1, r5
 800324a:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 800324e:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8003252:	6544      	str	r4, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003254:	3901      	subs	r1, #1
 8003256:	b289      	uxth	r1, r1
 8003258:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800325c:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 8003260:	b289      	uxth	r1, r1
 8003262:	2900      	cmp	r1, #0
 8003264:	d1eb      	bne.n	800323e <UART_RxISR_16BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003266:	6814      	ldr	r4, [r2, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8003268:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800326a:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800326e:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003270:	6894      	ldr	r4, [r2, #8]
 8003272:	f024 0401 	bic.w	r4, r4, #1
 8003276:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 8003278:	6601      	str	r1, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 800327a:	6785      	str	r5, [r0, #120]	; 0x78
      HAL_UART_RxCpltCallback(huart);
 800327c:	f003 fac4 	bl	8006808 <HAL_UART_RxCpltCallback>
}
 8003280:	bd38      	pop	{r3, r4, r5, pc}
 8003282:	bf00      	nop

08003284 <HAL_UART_ErrorCallback>:
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop

08003288 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003288:	6803      	ldr	r3, [r0, #0]
 800328a:	69da      	ldr	r2, [r3, #28]
{
 800328c:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800328e:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003290:	681d      	ldr	r5, [r3, #0]
{
 8003292:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003294:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 8003296:	d047      	beq.n	8003328 <HAL_UART_IRQHandler+0xa0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003298:	f011 0101 	ands.w	r1, r1, #1
 800329c:	d04b      	beq.n	8003336 <HAL_UART_IRQHandler+0xae>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800329e:	07d0      	lsls	r0, r2, #31
 80032a0:	d507      	bpl.n	80032b2 <HAL_UART_IRQHandler+0x2a>
 80032a2:	05ee      	lsls	r6, r5, #23
 80032a4:	d505      	bpl.n	80032b2 <HAL_UART_IRQHandler+0x2a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032a6:	2001      	movs	r0, #1
 80032a8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032aa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80032ac:	f040 0001 	orr.w	r0, r0, #1
 80032b0:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032b2:	0790      	lsls	r0, r2, #30
 80032b4:	d45d      	bmi.n	8003372 <HAL_UART_IRQHandler+0xea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032b6:	0750      	lsls	r0, r2, #29
 80032b8:	d501      	bpl.n	80032be <HAL_UART_IRQHandler+0x36>
 80032ba:	2900      	cmp	r1, #0
 80032bc:	d163      	bne.n	8003386 <HAL_UART_IRQHandler+0xfe>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032be:	0716      	lsls	r6, r2, #28
 80032c0:	d503      	bpl.n	80032ca <HAL_UART_IRQHandler+0x42>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032c2:	06a8      	lsls	r0, r5, #26
 80032c4:	d466      	bmi.n	8003394 <HAL_UART_IRQHandler+0x10c>
 80032c6:	2900      	cmp	r1, #0
 80032c8:	d164      	bne.n	8003394 <HAL_UART_IRQHandler+0x10c>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ca:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80032cc:	2900      	cmp	r1, #0
 80032ce:	d031      	beq.n	8003334 <HAL_UART_IRQHandler+0xac>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032d0:	0696      	lsls	r6, r2, #26
 80032d2:	d501      	bpl.n	80032d8 <HAL_UART_IRQHandler+0x50>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d4:	06a8      	lsls	r0, r5, #26
 80032d6:	d468      	bmi.n	80033aa <HAL_UART_IRQHandler+0x122>
      errorcode = huart->ErrorCode;
 80032d8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032da:	6899      	ldr	r1, [r3, #8]
 80032dc:	0649      	lsls	r1, r1, #25
 80032de:	d402      	bmi.n	80032e6 <HAL_UART_IRQHandler+0x5e>
 80032e0:	f015 0508 	ands.w	r5, r5, #8
 80032e4:	d068      	beq.n	80033b8 <HAL_UART_IRQHandler+0x130>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e6:	681a      	ldr	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80032e8:	2020      	movs	r0, #32
  huart->RxISR = NULL;
 80032ea:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032f0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80032fa:	67a0      	str	r0, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 80032fe:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	0652      	lsls	r2, r2, #25
 8003302:	d54e      	bpl.n	80033a2 <HAL_UART_IRQHandler+0x11a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003304:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003306:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800330e:	2900      	cmp	r1, #0
 8003310:	d047      	beq.n	80033a2 <HAL_UART_IRQHandler+0x11a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <HAL_UART_IRQHandler+0x13c>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003314:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003316:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003318:	f7fd fc04 	bl	8000b24 <HAL_DMA_Abort_IT>
 800331c:	b150      	cbz	r0, 8003334 <HAL_UART_IRQHandler+0xac>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800331e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 8003320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003324:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003326:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003328:	0691      	lsls	r1, r2, #26
 800332a:	d507      	bpl.n	800333c <HAL_UART_IRQHandler+0xb4>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800332c:	06ae      	lsls	r6, r5, #26
 800332e:	d505      	bpl.n	800333c <HAL_UART_IRQHandler+0xb4>
      if (huart->RxISR != NULL)
 8003330:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003332:	b9db      	cbnz	r3, 800336c <HAL_UART_IRQHandler+0xe4>
}
 8003334:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003336:	f415 7f90 	tst.w	r5, #288	; 0x120
 800333a:	d1b0      	bne.n	800329e <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800333c:	0616      	lsls	r6, r2, #24
 800333e:	d40f      	bmi.n	8003360 <HAL_UART_IRQHandler+0xd8>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003340:	0651      	lsls	r1, r2, #25
 8003342:	d5f7      	bpl.n	8003334 <HAL_UART_IRQHandler+0xac>
 8003344:	066a      	lsls	r2, r5, #25
 8003346:	d5f5      	bpl.n	8003334 <HAL_UART_IRQHandler+0xac>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003348:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800334a:	2520      	movs	r5, #32
  huart->TxISR = NULL;
 800334c:	2100      	movs	r1, #0
  HAL_UART_TxCpltCallback(huart);
 800334e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003354:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003356:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8003358:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800335a:	f7ff ff37 	bl	80031cc <HAL_UART_TxCpltCallback>
}
 800335e:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003360:	0628      	lsls	r0, r5, #24
 8003362:	d5ed      	bpl.n	8003340 <HAL_UART_IRQHandler+0xb8>
    if (huart->TxISR != NULL)
 8003364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0e4      	beq.n	8003334 <HAL_UART_IRQHandler+0xac>
      huart->TxISR(huart);
 800336a:	4620      	mov	r0, r4
}
 800336c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003370:	4718      	bx	r3
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003372:	2900      	cmp	r1, #0
 8003374:	d0a3      	beq.n	80032be <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003376:	2002      	movs	r0, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003378:	0756      	lsls	r6, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800337a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800337c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800337e:	f040 0004 	orr.w	r0, r0, #4
 8003382:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003384:	d59b      	bpl.n	80032be <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003386:	2004      	movs	r0, #4
 8003388:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800338a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800338c:	f040 0002 	orr.w	r0, r0, #2
 8003390:	67e0      	str	r0, [r4, #124]	; 0x7c
 8003392:	e794      	b.n	80032be <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003394:	2108      	movs	r1, #8
 8003396:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003398:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800339a:	f041 0108 	orr.w	r1, r1, #8
 800339e:	67e1      	str	r1, [r4, #124]	; 0x7c
 80033a0:	e793      	b.n	80032ca <HAL_UART_IRQHandler+0x42>
            HAL_UART_ErrorCallback(huart);
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7ff ff6e 	bl	8003284 <HAL_UART_ErrorCallback>
}
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 80033aa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80033ac:	2a00      	cmp	r2, #0
 80033ae:	d093      	beq.n	80032d8 <HAL_UART_IRQHandler+0x50>
          huart->RxISR(huart);
 80033b0:	4620      	mov	r0, r4
 80033b2:	4790      	blx	r2
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	e78f      	b.n	80032d8 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7ff ff63 	bl	8003284 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033be:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
 80033c2:	bf00      	nop
 80033c4:	080033c9 	.word	0x080033c9

080033c8 <UART_DMAAbortOnError>:
{
 80033c8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 80033ca:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80033ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  HAL_UART_ErrorCallback(huart);
 80033d2:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 80033d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80033d8:	f7ff ff54 	bl	8003284 <HAL_UART_ErrorCallback>
}
 80033dc:	bd08      	pop	{r3, pc}
 80033de:	bf00      	nop

080033e0 <UART_SetConfig>:
{
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e6:	49af      	ldr	r1, [pc, #700]	; (80036a4 <UART_SetConfig+0x2c4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e8:	69e6      	ldr	r6, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ea:	68e7      	ldr	r7, [r4, #12]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ec:	4dae      	ldr	r5, [pc, #696]	; (80036a8 <UART_SetConfig+0x2c8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ee:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 80033f2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f4:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f8:	6818      	ldr	r0, [r3, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033fa:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033fc:	ea01 0100 	and.w	r1, r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003400:	ea42 0206 	orr.w	r2, r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003404:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003408:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800340a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800340c:	6858      	ldr	r0, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800340e:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003410:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
  tmpreg |= huart->Init.OneBitSampling;
 8003414:	ea42 0201 	orr.w	r2, r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003418:	ea40 0007 	orr.w	r0, r0, r7
 800341c:	6058      	str	r0, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800341e:	6899      	ldr	r1, [r3, #8]
 8003420:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003424:	ea42 0201 	orr.w	r2, r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800342a:	d041      	beq.n	80034b0 <UART_SetConfig+0xd0>
 800342c:	4a9f      	ldr	r2, [pc, #636]	; (80036ac <UART_SetConfig+0x2cc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01b      	beq.n	800346a <UART_SetConfig+0x8a>
 8003432:	4a9f      	ldr	r2, [pc, #636]	; (80036b0 <UART_SetConfig+0x2d0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	f000 80b1 	beq.w	800359c <UART_SetConfig+0x1bc>
 800343a:	4a9e      	ldr	r2, [pc, #632]	; (80036b4 <UART_SetConfig+0x2d4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	f000 80df 	beq.w	8003600 <UART_SetConfig+0x220>
 8003442:	4a9d      	ldr	r2, [pc, #628]	; (80036b8 <UART_SetConfig+0x2d8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d053      	beq.n	80034f0 <UART_SetConfig+0x110>
 8003448:	4a9c      	ldr	r2, [pc, #624]	; (80036bc <UART_SetConfig+0x2dc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f000 80be 	beq.w	80035cc <UART_SetConfig+0x1ec>
 8003450:	4a9b      	ldr	r2, [pc, #620]	; (80036c0 <UART_SetConfig+0x2e0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	f000 8105 	beq.w	8003662 <UART_SetConfig+0x282>
 8003458:	4a9a      	ldr	r2, [pc, #616]	; (80036c4 <UART_SetConfig+0x2e4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	f000 8111 	beq.w	8003682 <UART_SetConfig+0x2a2>
  huart->RxISR = NULL;
 8003460:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 8003462:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8003464:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8003468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800346a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800346e:	4b96      	ldr	r3, [pc, #600]	; (80036c8 <UART_SetConfig+0x2e8>)
 8003470:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003474:	f002 020c 	and.w	r2, r2, #12
 8003478:	4413      	add	r3, r2
 800347a:	791b      	ldrb	r3, [r3, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8003480:	d01e      	beq.n	80034c0 <UART_SetConfig+0xe0>
    switch (clocksource)
 8003482:	2b08      	cmp	r3, #8
 8003484:	d8ec      	bhi.n	8003460 <UART_SetConfig+0x80>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <UART_SetConfig+0xac>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	0800358b 	.word	0x0800358b
 8003490:	0800351d 	.word	0x0800351d
 8003494:	0800363b 	.word	0x0800363b
 8003498:	08003461 	.word	0x08003461
 800349c:	080035e3 	.word	0x080035e3
 80034a0:	08003461 	.word	0x08003461
 80034a4:	08003461 	.word	0x08003461
 80034a8:	08003461 	.word	0x08003461
 80034ac:	080035bd 	.word	0x080035bd
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b0:	4b86      	ldr	r3, [pc, #536]	; (80036cc <UART_SetConfig+0x2ec>)
 80034b2:	4a85      	ldr	r2, [pc, #532]	; (80036c8 <UART_SetConfig+0x2e8>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	5cd3      	ldrb	r3, [r2, r3]
 80034be:	e7dd      	b.n	800347c <UART_SetConfig+0x9c>
    switch (clocksource)
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d8cd      	bhi.n	8003460 <UART_SetConfig+0x80>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0xec>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080035f5 	.word	0x080035f5
 80034d0:	08003547 	.word	0x08003547
 80034d4:	0800361b 	.word	0x0800361b
 80034d8:	08003461 	.word	0x08003461
 80034dc:	080035fb 	.word	0x080035fb
 80034e0:	08003461 	.word	0x08003461
 80034e4:	08003461 	.word	0x08003461
 80034e8:	08003461 	.word	0x08003461
 80034ec:	0800362b 	.word	0x0800362b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034f0:	4b76      	ldr	r3, [pc, #472]	; (80036cc <UART_SetConfig+0x2ec>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fe:	d06d      	beq.n	80035dc <UART_SetConfig+0x1fc>
 8003500:	d93d      	bls.n	800357e <UART_SetConfig+0x19e>
 8003502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003506:	f000 8085 	beq.w	8003614 <UART_SetConfig+0x234>
 800350a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800350e:	d052      	beq.n	80035b6 <UART_SetConfig+0x1d6>
 8003510:	e7a6      	b.n	8003460 <UART_SetConfig+0x80>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1a4      	bne.n	8003460 <UART_SetConfig+0x80>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003516:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800351a:	d014      	beq.n	8003546 <UART_SetConfig+0x166>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800351c:	f7fe ff22 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8003520:	6862      	ldr	r2, [r4, #4]
 8003522:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003526:	fbb3 f3f2 	udiv	r3, r3, r2
 800352a:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800352c:	f1a3 0110 	sub.w	r1, r3, #16
 8003530:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003534:	4291      	cmp	r1, r2
 8003536:	d893      	bhi.n	8003460 <UART_SetConfig+0x80>
      huart->Instance->BRR = usartdiv;
 8003538:	6822      	ldr	r2, [r4, #0]
 800353a:	2000      	movs	r0, #0
 800353c:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800353e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003540:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8003544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003546:	f7fe ff0d 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 800354a:	6862      	ldr	r2, [r4, #4]
 800354c:	0853      	lsrs	r3, r2, #1
 800354e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003552:	fbb3 f3f2 	udiv	r3, r3, r2
 8003556:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003558:	f1a3 0110 	sub.w	r1, r3, #16
 800355c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003560:	4291      	cmp	r1, r2
 8003562:	f63f af7d 	bhi.w	8003460 <UART_SetConfig+0x80>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003566:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800356a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800356e:	6821      	ldr	r1, [r4, #0]
 8003570:	2000      	movs	r0, #0
 8003572:	4313      	orrs	r3, r2
 8003574:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 8003576:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003578:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800357c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800357e:	2b00      	cmp	r3, #0
 8003580:	f47f af6e 	bne.w	8003460 <UART_SetConfig+0x80>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003584:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8003588:	d034      	beq.n	80035f4 <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800358a:	f7fe fedb 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 800358e:	6862      	ldr	r2, [r4, #4]
 8003590:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003594:	fbb3 f3f2 	udiv	r3, r3, r2
 8003598:	b29b      	uxth	r3, r3
        break;
 800359a:	e7c7      	b.n	800352c <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <UART_SetConfig+0x2ec>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d018      	beq.n	80035dc <UART_SetConfig+0x1fc>
 80035aa:	d9e8      	bls.n	800357e <UART_SetConfig+0x19e>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d031      	beq.n	8003614 <UART_SetConfig+0x234>
 80035b0:	2b30      	cmp	r3, #48	; 0x30
 80035b2:	f47f af55 	bne.w	8003460 <UART_SetConfig+0x80>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80035ba:	d036      	beq.n	800362a <UART_SetConfig+0x24a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80035bc:	6862      	ldr	r2, [r4, #4]
 80035be:	0853      	lsrs	r3, r2, #1
 80035c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80035c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80035c8:	b29b      	uxth	r3, r3
        break;
 80035ca:	e7af      	b.n	800352c <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035cc:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <UART_SetConfig+0x2ec>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035da:	d136      	bne.n	800364a <UART_SetConfig+0x26a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035dc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80035e0:	d00b      	beq.n	80035fa <UART_SetConfig+0x21a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035e2:	f7fe fdd7 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 80035e6:	6862      	ldr	r2, [r4, #4]
 80035e8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80035ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80035f0:	b29b      	uxth	r3, r3
        break;
 80035f2:	e79b      	b.n	800352c <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80035f4:	f7fe fea6 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 80035f8:	e7a7      	b.n	800354a <UART_SetConfig+0x16a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035fa:	f7fe fdcb 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 80035fe:	e7a4      	b.n	800354a <UART_SetConfig+0x16a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <UART_SetConfig+0x2ec>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d0e6      	beq.n	80035dc <UART_SetConfig+0x1fc>
 800360e:	d9b6      	bls.n	800357e <UART_SetConfig+0x19e>
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d123      	bne.n	800365c <UART_SetConfig+0x27c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003614:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8003618:	d10f      	bne.n	800363a <UART_SetConfig+0x25a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800361a:	6862      	ldr	r2, [r4, #4]
 800361c:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <UART_SetConfig+0x2f0>)
 800361e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003622:	fbb3 f3f2 	udiv	r3, r3, r2
 8003626:	b29b      	uxth	r3, r3
        break;
 8003628:	e796      	b.n	8003558 <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800362a:	6862      	ldr	r2, [r4, #4]
 800362c:	0853      	lsrs	r3, r2, #1
 800362e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003632:	fbb3 f3f2 	udiv	r3, r3, r2
 8003636:	b29b      	uxth	r3, r3
        break;
 8003638:	e78e      	b.n	8003558 <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800363a:	6862      	ldr	r2, [r4, #4]
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <UART_SetConfig+0x2f4>)
 800363e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003642:	fbb3 f3f2 	udiv	r3, r3, r2
 8003646:	b29b      	uxth	r3, r3
        break;
 8003648:	e770      	b.n	800352c <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800364a:	f67f af62 	bls.w	8003512 <UART_SetConfig+0x132>
 800364e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003652:	d0df      	beq.n	8003614 <UART_SetConfig+0x234>
 8003654:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003658:	d0ad      	beq.n	80035b6 <UART_SetConfig+0x1d6>
 800365a:	e701      	b.n	8003460 <UART_SetConfig+0x80>
 800365c:	2bc0      	cmp	r3, #192	; 0xc0
 800365e:	d0aa      	beq.n	80035b6 <UART_SetConfig+0x1d6>
 8003660:	e6fe      	b.n	8003460 <UART_SetConfig+0x80>
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <UART_SetConfig+0x2ec>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d0b4      	beq.n	80035dc <UART_SetConfig+0x1fc>
 8003672:	d984      	bls.n	800357e <UART_SetConfig+0x19e>
 8003674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003678:	d0cc      	beq.n	8003614 <UART_SetConfig+0x234>
 800367a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800367e:	d09a      	beq.n	80035b6 <UART_SetConfig+0x1d6>
 8003680:	e6ee      	b.n	8003460 <UART_SetConfig+0x80>
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <UART_SetConfig+0x2ec>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800368c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003690:	d0a4      	beq.n	80035dc <UART_SetConfig+0x1fc>
 8003692:	f67f af74 	bls.w	800357e <UART_SetConfig+0x19e>
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369a:	d0bb      	beq.n	8003614 <UART_SetConfig+0x234>
 800369c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036a0:	d089      	beq.n	80035b6 <UART_SetConfig+0x1d6>
 80036a2:	e6dd      	b.n	8003460 <UART_SetConfig+0x80>
 80036a4:	efff69f3 	.word	0xefff69f3
 80036a8:	40011000 	.word	0x40011000
 80036ac:	40004400 	.word	0x40004400
 80036b0:	40004800 	.word	0x40004800
 80036b4:	40004c00 	.word	0x40004c00
 80036b8:	40005000 	.word	0x40005000
 80036bc:	40011400 	.word	0x40011400
 80036c0:	40007800 	.word	0x40007800
 80036c4:	40007c00 	.word	0x40007c00
 80036c8:	08007c60 	.word	0x08007c60
 80036cc:	40023800 	.word	0x40023800
 80036d0:	01e84800 	.word	0x01e84800
 80036d4:	00f42400 	.word	0x00f42400

080036d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036da:	07da      	lsls	r2, r3, #31
{
 80036dc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036de:	d506      	bpl.n	80036ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e0:	6801      	ldr	r1, [r0, #0]
 80036e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80036e4:	684a      	ldr	r2, [r1, #4]
 80036e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80036ea:	4322      	orrs	r2, r4
 80036ec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ee:	079c      	lsls	r4, r3, #30
 80036f0:	d506      	bpl.n	8003700 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036f2:	6801      	ldr	r1, [r0, #0]
 80036f4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80036f6:	684a      	ldr	r2, [r1, #4]
 80036f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036fc:	4322      	orrs	r2, r4
 80036fe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003700:	0759      	lsls	r1, r3, #29
 8003702:	d506      	bpl.n	8003712 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003704:	6801      	ldr	r1, [r0, #0]
 8003706:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003708:	684a      	ldr	r2, [r1, #4]
 800370a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800370e:	4322      	orrs	r2, r4
 8003710:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003712:	071a      	lsls	r2, r3, #28
 8003714:	d506      	bpl.n	8003724 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003716:	6801      	ldr	r1, [r0, #0]
 8003718:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800371a:	684a      	ldr	r2, [r1, #4]
 800371c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003720:	4322      	orrs	r2, r4
 8003722:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	06dc      	lsls	r4, r3, #27
 8003726:	d506      	bpl.n	8003736 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003728:	6801      	ldr	r1, [r0, #0]
 800372a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800372c:	688a      	ldr	r2, [r1, #8]
 800372e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003732:	4322      	orrs	r2, r4
 8003734:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003736:	0699      	lsls	r1, r3, #26
 8003738:	d506      	bpl.n	8003748 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373a:	6801      	ldr	r1, [r0, #0]
 800373c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800373e:	688a      	ldr	r2, [r1, #8]
 8003740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003744:	4322      	orrs	r2, r4
 8003746:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003748:	065a      	lsls	r2, r3, #25
 800374a:	d50a      	bpl.n	8003762 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800374c:	6801      	ldr	r1, [r0, #0]
 800374e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003750:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003752:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003756:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800375a:	ea42 0204 	orr.w	r2, r2, r4
 800375e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003760:	d00b      	beq.n	800377a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003762:	061b      	lsls	r3, r3, #24
 8003764:	d506      	bpl.n	8003774 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003766:	6802      	ldr	r2, [r0, #0]
 8003768:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800376a:	6853      	ldr	r3, [r2, #4]
 800376c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003770:	430b      	orrs	r3, r1
 8003772:	6053      	str	r3, [r2, #4]
}
 8003774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003778:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800377a:	684a      	ldr	r2, [r1, #4]
 800377c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800377e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003782:	4322      	orrs	r2, r4
 8003784:	604a      	str	r2, [r1, #4]
 8003786:	e7ec      	b.n	8003762 <UART_AdvFeatureConfig+0x8a>

08003788 <UART_WaitOnFlagUntilTimeout>:
{
 8003788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800378c:	9d08      	ldr	r5, [sp, #32]
 800378e:	4680      	mov	r8, r0
 8003790:	460f      	mov	r7, r1
 8003792:	4616      	mov	r6, r2
 8003794:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003796:	f8d8 4000 	ldr.w	r4, [r8]
 800379a:	e001      	b.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x18>
    if (Timeout != HAL_MAX_DELAY)
 800379c:	1c6b      	adds	r3, r5, #1
 800379e:	d10a      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a0:	69e0      	ldr	r0, [r4, #28]
 80037a2:	ea37 0300 	bics.w	r3, r7, r0
 80037a6:	bf0c      	ite	eq
 80037a8:	2001      	moveq	r0, #1
 80037aa:	2000      	movne	r0, #0
 80037ac:	42b0      	cmp	r0, r6
 80037ae:	d0f5      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 80037b0:	2000      	movs	r0, #0
}
 80037b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fc fee5 	bl	8000584 <HAL_GetTick>
 80037ba:	eba0 0009 	sub.w	r0, r0, r9
 80037be:	42a8      	cmp	r0, r5
 80037c0:	d801      	bhi.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x3e>
 80037c2:	2d00      	cmp	r5, #0
 80037c4:	d1e7      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c6:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 80037ca:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80037cc:	2400      	movs	r4, #0
 80037ce:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80037e0:	f8c8 1074 	str.w	r1, [r8, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80037e4:	f888 4070 	strb.w	r4, [r8, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80037e8:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 80037ec:	e7e1      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x2a>
 80037ee:	bf00      	nop

080037f0 <UART_CheckIdleState>:
{
 80037f0:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	2500      	movs	r5, #0
{
 80037f4:	4604      	mov	r4, r0
 80037f6:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f8:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80037fa:	f7fc fec3 	bl	8000584 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	0713      	lsls	r3, r2, #28
 8003804:	d408      	bmi.n	8003818 <UART_CheckIdleState+0x28>
  __HAL_UNLOCK(huart);
 8003806:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003808:	2220      	movs	r2, #32
  return HAL_OK;
 800380a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800380c:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800380e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003812:	67a2      	str	r2, [r4, #120]	; 0x78
}
 8003814:	b002      	add	sp, #8
 8003816:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003818:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 800381c:	4603      	mov	r3, r0
 800381e:	462a      	mov	r2, r5
 8003820:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003824:	9600      	str	r6, [sp, #0]
 8003826:	4620      	mov	r0, r4
 8003828:	f7ff ffae 	bl	8003788 <UART_WaitOnFlagUntilTimeout>
 800382c:	2800      	cmp	r0, #0
 800382e:	d0ea      	beq.n	8003806 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003830:	2003      	movs	r0, #3
}
 8003832:	b002      	add	sp, #8
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	bf00      	nop

08003838 <HAL_UART_Init>:
  if (huart == NULL)
 8003838:	b370      	cbz	r0, 8003898 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800383a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800383c:	b510      	push	{r4, lr}
 800383e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003840:	b1fb      	cbz	r3, 8003882 <HAL_UART_Init+0x4a>
  __HAL_UART_DISABLE(huart);
 8003842:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003844:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003846:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003852:	f7ff fdc5 	bl	80033e0 <UART_SetConfig>
 8003856:	2801      	cmp	r0, #1
 8003858:	d018      	beq.n	800388c <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800385a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800385c:	b9c3      	cbnz	r3, 8003890 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003860:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003868:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003870:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	f042 0201 	orr.w	r2, r2, #1
}
 8003878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800387c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800387e:	f7ff bfb7 	b.w	80037f0 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 8003882:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003886:	f003 fdeb 	bl	8007460 <HAL_UART_MspInit>
 800388a:	e7da      	b.n	8003842 <HAL_UART_Init+0xa>
}
 800388c:	2001      	movs	r0, #1
 800388e:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8003890:	4620      	mov	r0, r4
 8003892:	f7ff ff21 	bl	80036d8 <UART_AdvFeatureConfig>
 8003896:	e7e2      	b.n	800385e <HAL_UART_Init+0x26>
}
 8003898:	2001      	movs	r0, #1
 800389a:	4770      	bx	lr

0800389c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <USB_CoreReset+0x30>)
 800389e:	e001      	b.n	80038a4 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80038a0:	3b01      	subs	r3, #1
 80038a2:	d010      	beq.n	80038c6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038a4:	6902      	ldr	r2, [r0, #16]
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	dafa      	bge.n	80038a0 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80038aa:	6903      	ldr	r3, [r0, #16]
 80038ac:	4a07      	ldr	r2, [pc, #28]	; (80038cc <USB_CoreReset+0x30>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6103      	str	r3, [r0, #16]
 80038b4:	e001      	b.n	80038ba <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 80038b6:	3a01      	subs	r2, #1
 80038b8:	d005      	beq.n	80038c6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038ba:	6903      	ldr	r3, [r0, #16]
 80038bc:	f013 0301 	ands.w	r3, r3, #1
 80038c0:	d1f9      	bne.n	80038b6 <USB_CoreReset+0x1a>

  return HAL_OK;
 80038c2:	4618      	mov	r0, r3
}
 80038c4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80038c6:	2003      	movs	r0, #3
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	00030d40 	.word	0x00030d40

080038d0 <USB_CoreInit>:
{
 80038d0:	b084      	sub	sp, #16
 80038d2:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 80038d6:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038d8:	2d01      	cmp	r5, #1
{
 80038da:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80038de:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038e0:	d121      	bne.n	8003926 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038e2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038e4:	4b18      	ldr	r3, [pc, #96]	; (8003948 <USB_CoreInit+0x78>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 80038ea:	9811      	ldr	r0, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038ec:	638a      	str	r2, [r1, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 80038ee:	2801      	cmp	r0, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038f0:	68ca      	ldr	r2, [r1, #12]
 80038f2:	ea03 0302 	and.w	r3, r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038f8:	68cb      	ldr	r3, [r1, #12]
 80038fa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038fe:	60cb      	str	r3, [r1, #12]
    if (cfg.use_external_vbus == 1U)
 8003900:	d01c      	beq.n	800393c <USB_CoreInit+0x6c>
    ret = USB_CoreReset(USBx);
 8003902:	4608      	mov	r0, r1
 8003904:	f7ff ffca 	bl	800389c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003908:	9b08      	ldr	r3, [sp, #32]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <USB_CoreInit+0x4e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800390e:	688b      	ldr	r3, [r1, #8]
 8003910:	f043 0306 	orr.w	r3, r3, #6
 8003914:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003916:	688b      	ldr	r3, [r1, #8]
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	608b      	str	r3, [r1, #8]
}
 800391e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003922:	b004      	add	sp, #16
 8003924:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003926:	68c3      	ldr	r3, [r0, #12]
 8003928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800392e:	f7ff ffb5 	bl	800389c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003932:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	638b      	str	r3, [r1, #56]	; 0x38
 800393a:	e7e5      	b.n	8003908 <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800393c:	68cb      	ldr	r3, [r1, #12]
 800393e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003942:	60cb      	str	r3, [r1, #12]
 8003944:	e7dd      	b.n	8003902 <USB_CoreInit+0x32>
 8003946:	bf00      	nop
 8003948:	ffbdffbf 	.word	0xffbdffbf

0800394c <USB_SetTurnaroundTime>:
  if (speed == USB_OTG_SPEED_FULL)
 800394c:	2a03      	cmp	r2, #3
{
 800394e:	4603      	mov	r3, r0
 8003950:	b410      	push	{r4}
  if (speed == USB_OTG_SPEED_FULL)
 8003952:	d00c      	beq.n	800396e <USB_SetTurnaroundTime+0x22>
 8003954:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003958:	68d9      	ldr	r1, [r3, #12]
}
 800395a:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800395c:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8003960:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	4322      	orrs	r2, r4
}
 8003966:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800396a:	60da      	str	r2, [r3, #12]
}
 800396c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800396e:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <USB_SetTurnaroundTime+0xc8>)
 8003970:	4829      	ldr	r0, [pc, #164]	; (8003a18 <USB_SetTurnaroundTime+0xcc>)
 8003972:	440a      	add	r2, r1
 8003974:	4282      	cmp	r2, r0
 8003976:	d93a      	bls.n	80039ee <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003978:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <USB_SetTurnaroundTime+0xd0>)
 800397a:	4829      	ldr	r0, [pc, #164]	; (8003a20 <USB_SetTurnaroundTime+0xd4>)
 800397c:	440a      	add	r2, r1
 800397e:	4282      	cmp	r2, r0
 8003980:	d932      	bls.n	80039e8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003982:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <USB_SetTurnaroundTime+0xd8>)
 8003984:	4828      	ldr	r0, [pc, #160]	; (8003a28 <USB_SetTurnaroundTime+0xdc>)
 8003986:	440a      	add	r2, r1
 8003988:	4282      	cmp	r2, r0
 800398a:	d933      	bls.n	80039f4 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800398c:	4a27      	ldr	r2, [pc, #156]	; (8003a2c <USB_SetTurnaroundTime+0xe0>)
 800398e:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 8003992:	440a      	add	r2, r1
 8003994:	30a0      	adds	r0, #160	; 0xa0
 8003996:	4282      	cmp	r2, r0
 8003998:	d92f      	bls.n	80039fa <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800399a:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <USB_SetTurnaroundTime+0xe4>)
 800399c:	4825      	ldr	r0, [pc, #148]	; (8003a34 <USB_SetTurnaroundTime+0xe8>)
 800399e:	440a      	add	r2, r1
 80039a0:	4282      	cmp	r2, r0
 80039a2:	d92d      	bls.n	8003a00 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039a4:	4a24      	ldr	r2, [pc, #144]	; (8003a38 <USB_SetTurnaroundTime+0xec>)
 80039a6:	f500 2092 	add.w	r0, r0, #299008	; 0x49000
 80039aa:	440a      	add	r2, r1
 80039ac:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
 80039b0:	4282      	cmp	r2, r0
 80039b2:	d928      	bls.n	8003a06 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039b4:	4a21      	ldr	r2, [pc, #132]	; (8003a3c <USB_SetTurnaroundTime+0xf0>)
 80039b6:	f500 20c3 	add.w	r0, r0, #399360	; 0x61800
 80039ba:	440a      	add	r2, r1
 80039bc:	f500 7020 	add.w	r0, r0, #640	; 0x280
 80039c0:	4282      	cmp	r2, r0
 80039c2:	d9c7      	bls.n	8003954 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039c4:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <USB_SetTurnaroundTime+0xf4>)
 80039c6:	f500 10b7 	add.w	r0, r0, #1499136	; 0x16e000
 80039ca:	440a      	add	r2, r1
 80039cc:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80039d0:	4282      	cmp	r2, r0
 80039d2:	d91b      	bls.n	8003a0c <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039d4:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <USB_SetTurnaroundTime+0xf8>)
 80039d6:	4c1c      	ldr	r4, [pc, #112]	; (8003a48 <USB_SetTurnaroundTime+0xfc>)
 80039d8:	440a      	add	r2, r1
 80039da:	42a2      	cmp	r2, r4
 80039dc:	bf8c      	ite	hi
 80039de:	f44f 54c0 	movhi.w	r4, #6144	; 0x1800
 80039e2:	f44f 54e0 	movls.w	r4, #7168	; 0x1c00
 80039e6:	e7b7      	b.n	8003958 <USB_SetTurnaroundTime+0xc>
 80039e8:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 80039ec:	e7b4      	b.n	8003958 <USB_SetTurnaroundTime+0xc>
 80039ee:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 80039f2:	e7b1      	b.n	8003958 <USB_SetTurnaroundTime+0xc>
 80039f4:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 80039f8:	e7ae      	b.n	8003958 <USB_SetTurnaroundTime+0xc>
 80039fa:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 80039fe:	e7ab      	b.n	8003958 <USB_SetTurnaroundTime+0xc>
 8003a00:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8003a04:	e7a8      	b.n	8003958 <USB_SetTurnaroundTime+0xc>
 8003a06:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8003a0a:	e7a5      	b.n	8003958 <USB_SetTurnaroundTime+0xc>
 8003a0c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8003a10:	e7a2      	b.n	8003958 <USB_SetTurnaroundTime+0xc>
 8003a12:	bf00      	nop
 8003a14:	ff275340 	.word	0xff275340
 8003a18:	000c34ff 	.word	0x000c34ff
 8003a1c:	ff1b1e40 	.word	0xff1b1e40
 8003a20:	000f423f 	.word	0x000f423f
 8003a24:	ff0bdc00 	.word	0xff0bdc00
 8003a28:	00124f7f 	.word	0x00124f7f
 8003a2c:	fef98c80 	.word	0xfef98c80
 8003a30:	fee5b660 	.word	0xfee5b660
 8003a34:	0016e35f 	.word	0x0016e35f
 8003a38:	feced300 	.word	0xfeced300
 8003a3c:	feb35bc0 	.word	0xfeb35bc0
 8003a40:	fe91ca00 	.word	0xfe91ca00
 8003a44:	fe5954e0 	.word	0xfe5954e0
 8003a48:	00419cdf 	.word	0x00419cdf

08003a4c <USB_EnableGlobalInt>:
{
 8003a4c:	4602      	mov	r2, r0
}
 8003a4e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a50:	6893      	ldr	r3, [r2, #8]
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6093      	str	r3, [r2, #8]
}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop

08003a5c <USB_DisableGlobalInt>:
{
 8003a5c:	4602      	mov	r2, r0
}
 8003a5e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a60:	6893      	ldr	r3, [r2, #8]
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	6093      	str	r3, [r2, #8]
}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop

08003a6c <USB_SetCurrentMode>:
{
 8003a6c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a6e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a70:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a72:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a76:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a78:	d00b      	beq.n	8003a92 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8003a7a:	b941      	cbnz	r1, 8003a8e <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a7c:	68c3      	ldr	r3, [r0, #12]
 8003a7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a82:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003a84:	2032      	movs	r0, #50	; 0x32
 8003a86:	f7fc fd83 	bl	8000590 <HAL_Delay>
  return HAL_OK;
 8003a8a:	2000      	movs	r0, #0
}
 8003a8c:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8003a8e:	2001      	movs	r0, #1
}
 8003a90:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a92:	68c3      	ldr	r3, [r0, #12]
 8003a94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a98:	60c3      	str	r3, [r0, #12]
 8003a9a:	e7f3      	b.n	8003a84 <USB_SetCurrentMode+0x18>

08003a9c <USB_DevInit>:
{
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (i = 0U; i < 15U; i++)
 8003aa2:	2400      	movs	r4, #0
{
 8003aa4:	af09      	add	r7, sp, #36	; 0x24
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003aaa:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 8003aae:	4620      	mov	r0, r4
{
 8003ab0:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8003ab4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003ab6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    USBx->DIEPTXF[i] = 0U;
 8003aba:	f104 0340 	add.w	r3, r4, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8003abe:	3401      	adds	r4, #1
    USBx->DIEPTXF[i] = 0U;
 8003ac0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 8003ac4:	2c0f      	cmp	r4, #15
    USBx->DIEPTXF[i] = 0U;
 8003ac6:	6058      	str	r0, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ac8:	d1f7      	bne.n	8003aba <USB_DevInit+0x1e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003aca:	6bab      	ldr	r3, [r5, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8003acc:	2900      	cmp	r1, #0
 8003ace:	f040 80a1 	bne.w	8003c14 <USB_DevInit+0x178>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ad6:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ade:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae6:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0U;
 8003ae8:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aea:	f1bc 0f01 	cmp.w	ip, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003aee:	f505 6400 	add.w	r4, r5, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 8003af2:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003af6:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8003afa:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx_DEVICE->DCFG |= speed;
 8003afe:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b02:	d03e      	beq.n	8003b82 <USB_DevInit+0xe6>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003b04:	f1bc 0f03 	cmp.w	ip, #3
 8003b08:	d03b      	beq.n	8003b82 <USB_DevInit+0xe6>
  USBx_DEVICE->DCFG |= speed;
 8003b0a:	f043 0303 	orr.w	r3, r3, #3
 8003b0e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b12:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8003b16:	4b4c      	ldr	r3, [pc, #304]	; (8003c48 <USB_DevInit+0x1ac>)
 8003b18:	612a      	str	r2, [r5, #16]
 8003b1a:	e002      	b.n	8003b22 <USB_DevInit+0x86>
    if (++count > 200000U)
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	f000 808b 	beq.w	8003c38 <USB_DevInit+0x19c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b22:	6928      	ldr	r0, [r5, #16]
 8003b24:	f010 0020 	ands.w	r0, r0, #32
 8003b28:	d1f8      	bne.n	8003b1c <USB_DevInit+0x80>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b2a:	2210      	movs	r2, #16
 8003b2c:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <USB_DevInit+0x1ac>)
 8003b2e:	612a      	str	r2, [r5, #16]
 8003b30:	e001      	b.n	8003b36 <USB_DevInit+0x9a>
    if (++count > 200000U)
 8003b32:	3b01      	subs	r3, #1
 8003b34:	d07e      	beq.n	8003c34 <USB_DevInit+0x198>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b36:	692a      	ldr	r2, [r5, #16]
 8003b38:	06d2      	lsls	r2, r2, #27
 8003b3a:	d4fa      	bmi.n	8003b32 <USB_DevInit+0x96>
  USBx_DEVICE->DIEPMSK = 0U;
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	6122      	str	r2, [r4, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b40:	6162      	str	r2, [r4, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b42:	61e2      	str	r2, [r4, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b44:	b327      	cbz	r7, 8003b90 <USB_DevInit+0xf4>
 8003b46:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b4a:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b4e:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b52:	4696      	mov	lr, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b54:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8003b58:	e009      	b.n	8003b6e <USB_DevInit+0xd2>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b5a:	f8c3 e000 	str.w	lr, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b5e:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b60:	f8c3 e010 	str.w	lr, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b64:	f8c3 8008 	str.w	r8, [r3, #8]
 8003b68:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b6a:	42ba      	cmp	r2, r7
 8003b6c:	d034      	beq.n	8003bd8 <USB_DevInit+0x13c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b6e:	f8d3 c000 	ldr.w	ip, [r3]
 8003b72:	f1bc 0f00 	cmp.w	ip, #0
 8003b76:	daf0      	bge.n	8003b5a <USB_DevInit+0xbe>
      if (i == 0U)
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	d05f      	beq.n	8003c3c <USB_DevInit+0x1a0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b7c:	f8c3 9000 	str.w	r9, [r3]
 8003b80:	e7ed      	b.n	8003b5e <USB_DevInit+0xc2>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	d0c3      	beq.n	8003b0e <USB_DevInit+0x72>
  USBx_DEVICE->DCFG |= speed;
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 8003b8e:	e7c0      	b.n	8003b12 <USB_DevInit+0x76>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b90:	6923      	ldr	r3, [r4, #16]
  if (cfg.dma_enable == 1U)
 8003b92:	2e01      	cmp	r6, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b98:	6123      	str	r3, [r4, #16]
  if (cfg.dma_enable == 1U)
 8003b9a:	d03f      	beq.n	8003c1c <USB_DevInit+0x180>
  USBx->GINTMSK = 0U;
 8003b9c:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b9e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8003ba2:	61aa      	str	r2, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ba4:	616b      	str	r3, [r5, #20]
  if (cfg.dma_enable == 0U)
 8003ba6:	b91e      	cbnz	r6, 8003bb0 <USB_DevInit+0x114>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ba8:	69ab      	ldr	r3, [r5, #24]
 8003baa:	f043 0310 	orr.w	r3, r3, #16
 8003bae:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bb0:	69ac      	ldr	r4, [r5, #24]
 8003bb2:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <USB_DevInit+0x1b0>)
  if (cfg.Sof_enable != 0U)
 8003bb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bb6:	4323      	orrs	r3, r4
 8003bb8:	61ab      	str	r3, [r5, #24]
  if (cfg.Sof_enable != 0U)
 8003bba:	b11a      	cbz	r2, 8003bc4 <USB_DevInit+0x128>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bbc:	69ab      	ldr	r3, [r5, #24]
 8003bbe:	f043 0308 	orr.w	r3, r3, #8
 8003bc2:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003bc4:	2901      	cmp	r1, #1
 8003bc6:	d103      	bne.n	8003bd0 <USB_DevInit+0x134>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bc8:	69aa      	ldr	r2, [r5, #24]
 8003bca:	4b21      	ldr	r3, [pc, #132]	; (8003c50 <USB_DevInit+0x1b4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61ab      	str	r3, [r5, #24]
}
 8003bd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd4:	b004      	add	sp, #16
 8003bd6:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bd8:	2700      	movs	r7, #0
 8003bda:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bde:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003be2:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003be6:	46be      	mov	lr, r7
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003be8:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8003bec:	e009      	b.n	8003c02 <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bee:	f8c3 e000 	str.w	lr, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf2:	3701      	adds	r7, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bf4:	f8c3 e010 	str.w	lr, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bf8:	f8c3 8008 	str.w	r8, [r3, #8]
 8003bfc:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bfe:	4297      	cmp	r7, r2
 8003c00:	d0c6      	beq.n	8003b90 <USB_DevInit+0xf4>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c02:	f8d3 c000 	ldr.w	ip, [r3]
 8003c06:	f1bc 0f00 	cmp.w	ip, #0
 8003c0a:	daf0      	bge.n	8003bee <USB_DevInit+0x152>
      if (i == 0U)
 8003c0c:	b1cf      	cbz	r7, 8003c42 <USB_DevInit+0x1a6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c0e:	f8c3 9000 	str.w	r9, [r3]
 8003c12:	e7ee      	b.n	8003bf2 <USB_DevInit+0x156>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c18:	63ab      	str	r3, [r5, #56]	; 0x38
 8003c1a:	e765      	b.n	8003ae8 <USB_DevInit+0x4c>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003c1c:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <USB_DevInit+0x1b8>)
  USBx->GINTMSK = 0U;
 8003c1e:	2600      	movs	r6, #0
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <USB_DevInit+0x1bc>)
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003c22:	6322      	str	r2, [r4, #48]	; 0x30
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003c28:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003c2a:	433b      	orrs	r3, r7
 8003c2c:	6323      	str	r3, [r4, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8003c2e:	61ae      	str	r6, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c30:	616a      	str	r2, [r5, #20]
 8003c32:	e7bd      	b.n	8003bb0 <USB_DevInit+0x114>
    ret = HAL_ERROR;
 8003c34:	2001      	movs	r0, #1
 8003c36:	e781      	b.n	8003b3c <USB_DevInit+0xa0>
    ret = HAL_ERROR;
 8003c38:	2001      	movs	r0, #1
 8003c3a:	e776      	b.n	8003b2a <USB_DevInit+0x8e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c3c:	f8c3 a000 	str.w	sl, [r3]
 8003c40:	e78d      	b.n	8003b5e <USB_DevInit+0xc2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c42:	f8c3 a000 	str.w	sl, [r3]
 8003c46:	e7d4      	b.n	8003bf2 <USB_DevInit+0x156>
 8003c48:	00030d40 	.word	0x00030d40
 8003c4c:	803c3800 	.word	0x803c3800
 8003c50:	40000004 	.word	0x40000004
 8003c54:	00800100 	.word	0x00800100
 8003c58:	00010003 	.word	0x00010003

08003c5c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c5c:	0189      	lsls	r1, r1, #6
 8003c5e:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <USB_FlushTxFifo+0x20>)
 8003c60:	f041 0120 	orr.w	r1, r1, #32
 8003c64:	6101      	str	r1, [r0, #16]
 8003c66:	e001      	b.n	8003c6c <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 8003c68:	3a01      	subs	r2, #1
 8003c6a:	d005      	beq.n	8003c78 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c6c:	6903      	ldr	r3, [r0, #16]
 8003c6e:	f013 0320 	ands.w	r3, r3, #32
 8003c72:	d1f9      	bne.n	8003c68 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8003c74:	4618      	mov	r0, r3
 8003c76:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003c78:	2003      	movs	r0, #3
}
 8003c7a:	4770      	bx	lr
 8003c7c:	00030d40 	.word	0x00030d40

08003c80 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c80:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c84:	f013 0006 	ands.w	r0, r3, #6
 8003c88:	d004      	beq.n	8003c94 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c8a:	f013 0f02 	tst.w	r3, #2
    speed = USB_OTG_SPEED_FULL;
 8003c8e:	bf0c      	ite	eq
 8003c90:	2000      	moveq	r0, #0
 8003c92:	2003      	movne	r0, #3
}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop

08003c98 <USB_ActivateEndpoint>:
{
 8003c98:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8003c9a:	780a      	ldrb	r2, [r1, #0]
 8003c9c:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 8003c9e:	784d      	ldrb	r5, [r1, #1]
 8003ca0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8003ca4:	f002 060f 	and.w	r6, r2, #15
 8003ca8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8003cac:	2d01      	cmp	r5, #1
 8003cae:	fa03 f306 	lsl.w	r3, r3, r6
 8003cb2:	d017      	beq.n	8003ce4 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003cb4:	69e2      	ldr	r2, [r4, #28]
 8003cb6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8003cba:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003cbc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	d40c      	bmi.n	8003cde <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cc4:	688a      	ldr	r2, [r1, #8]
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <USB_ActivateEndpoint+0x80>)
 8003cc8:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ccc:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cce:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003cde:	2000      	movs	r0, #0
 8003ce0:	bc70      	pop	{r4, r5, r6}
 8003ce2:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ce4:	69e5      	ldr	r5, [r4, #28]
 8003ce6:	432b      	orrs	r3, r5
 8003ce8:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003cee:	041c      	lsls	r4, r3, #16
 8003cf0:	d4f5      	bmi.n	8003cde <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cf2:	688c      	ldr	r4, [r1, #8]
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <USB_ActivateEndpoint+0x80>)
 8003cf6:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cfa:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cfc:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8003d00:	4323      	orrs	r3, r4
 8003d02:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8003d06:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8003d0a:	430a      	orrs	r2, r1
}
 8003d0c:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d0e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8003d12:	2000      	movs	r0, #0
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	10008000 	.word	0x10008000

08003d1c <USB_DeactivateEndpoint>:
{
 8003d1c:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8003d1e:	780c      	ldrb	r4, [r1, #0]
 8003d20:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 8003d22:	7849      	ldrb	r1, [r1, #1]
 8003d24:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003d28:	f004 050f 	and.w	r5, r4, #15
 8003d2c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8003d30:	2901      	cmp	r1, #1
 8003d32:	fa03 f305 	lsl.w	r3, r3, r5
 8003d36:	d010      	beq.n	8003d5a <USB_DeactivateEndpoint+0x3e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d38:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8003d3a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d3e:	490f      	ldr	r1, [pc, #60]	; (8003d7c <USB_DeactivateEndpoint+0x60>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d40:	401c      	ands	r4, r3
 8003d42:	63d4      	str	r4, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d44:	69d4      	ldr	r4, [r2, #28]
 8003d46:	4023      	ands	r3, r4
 8003d48:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d4a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003d4e:	4019      	ands	r1, r3
}
 8003d50:	bc30      	pop	{r4, r5}
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d52:	f8c0 1b00 	str.w	r1, [r0, #2816]	; 0xb00
}
 8003d56:	2000      	movs	r0, #0
 8003d58:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d5a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8003d5c:	43db      	mvns	r3, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d5e:	4908      	ldr	r1, [pc, #32]	; (8003d80 <USB_DeactivateEndpoint+0x64>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d60:	401c      	ands	r4, r3
 8003d62:	63d4      	str	r4, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d64:	69d4      	ldr	r4, [r2, #28]
 8003d66:	4023      	ands	r3, r4
 8003d68:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d6a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003d6e:	4019      	ands	r1, r3
}
 8003d70:	bc30      	pop	{r4, r5}
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d72:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8003d76:	2000      	movs	r0, #0
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	eff37800 	.word	0xeff37800
 8003d80:	ec337800 	.word	0xec337800

08003d84 <USB_EPStartXfer>:
{
 8003d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8003d88:	784f      	ldrb	r7, [r1, #1]
 8003d8a:	780b      	ldrb	r3, [r1, #0]
 8003d8c:	2f01      	cmp	r7, #1
 8003d8e:	694c      	ldr	r4, [r1, #20]
 8003d90:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003d94:	78ce      	ldrb	r6, [r1, #3]
 8003d96:	d055      	beq.n	8003e44 <USB_EPStartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d98:	f503 6730 	add.w	r7, r3, #2816	; 0xb00
 8003d9c:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 8003f78 <USB_EPStartXfer+0x1f4>
 8003da0:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003da4:	4d72      	ldr	r5, [pc, #456]	; (8003f70 <USB_EPStartXfer+0x1ec>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003da6:	ea0c 0e0e 	and.w	lr, ip, lr
 8003daa:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003dae:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003db2:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8003db6:	ea0e 0505 	and.w	r5, lr, r5
 8003dba:	613d      	str	r5, [r7, #16]
    if (ep->xfer_len == 0U)
 8003dbc:	b38c      	cbz	r4, 8003e22 <USB_EPStartXfer+0x9e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003dbe:	eb0c 0504 	add.w	r5, ip, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003dc2:	4c6c      	ldr	r4, [pc, #432]	; (8003f74 <USB_EPStartXfer+0x1f0>)
 8003dc4:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 8003dc8:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003dca:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003dce:	fbb5 f5fc 	udiv	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003dd2:	ea04 4ec5 	and.w	lr, r4, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003dd6:	b2ad      	uxth	r5, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003dd8:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003ddc:	fb0c f405 	mul.w	r4, ip, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003de0:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003de4:	693d      	ldr	r5, [r7, #16]
 8003de6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003dea:	ea44 0405 	orr.w	r4, r4, r5
 8003dee:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 8003df0:	d023      	beq.n	8003e3a <USB_EPStartXfer+0xb6>
    if (ep->type == EP_TYPE_ISOC)
 8003df2:	2e01      	cmp	r6, #1
 8003df4:	d10c      	bne.n	8003e10 <USB_EPStartXfer+0x8c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003df6:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8003dfa:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003dfe:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003e02:	bf0c      	ite	eq
 8003e04:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003e08:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8003e0c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e10:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003e14:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003e18:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e22:	693d      	ldr	r5, [r7, #16]
 8003e24:	f3cc 0412 	ubfx	r4, ip, #0, #19
    if (dma == 1U)
 8003e28:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e2a:	ea44 0405 	orr.w	r4, r4, r5
 8003e2e:	613c      	str	r4, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e30:	693c      	ldr	r4, [r7, #16]
 8003e32:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003e36:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 8003e38:	d1db      	bne.n	8003df2 <USB_EPStartXfer+0x6e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e3a:	68ca      	ldr	r2, [r1, #12]
 8003e3c:	2a00      	cmp	r2, #0
 8003e3e:	d0d8      	beq.n	8003df2 <USB_EPStartXfer+0x6e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e40:	617a      	str	r2, [r7, #20]
 8003e42:	e7d6      	b.n	8003df2 <USB_EPStartXfer+0x6e>
 8003e44:	f503 6510 	add.w	r5, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8003e48:	2c00      	cmp	r4, #0
 8003e4a:	d13e      	bne.n	8003eca <USB_EPStartXfer+0x146>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e4c:	f8d5 e010 	ldr.w	lr, [r5, #16]
    if (dma == 1U)
 8003e50:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e52:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8003f70 <USB_EPStartXfer+0x1ec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e56:	4f48      	ldr	r7, [pc, #288]	; (8003f78 <USB_EPStartXfer+0x1f4>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e58:	ea0e 0c0c 	and.w	ip, lr, ip
 8003e5c:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e60:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003e64:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 8003e68:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e6c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003e70:	ea0c 0707 	and.w	r7, ip, r7
 8003e74:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8003e76:	d072      	beq.n	8003f5e <USB_EPStartXfer+0x1da>
    if (ep->type == EP_TYPE_ISOC)
 8003e78:	2e01      	cmp	r6, #1
 8003e7a:	d15d      	bne.n	8003f38 <USB_EPStartXfer+0x1b4>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e7c:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8003e80:	f415 7f80 	tst.w	r5, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e84:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 8003e88:	bf0c      	ite	eq
 8003e8a:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e8e:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8003e92:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e96:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 8003e9a:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8003e9e:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
  if (dma == 0U)
 8003ea2:	2a00      	cmp	r2, #0
 8003ea4:	d1ba      	bne.n	8003e1c <USB_EPStartXfer+0x98>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ea6:	b2a2      	uxth	r2, r4
 8003ea8:	3203      	adds	r2, #3
    for (i = 0U; i < count32b; i++)
 8003eaa:	0892      	lsrs	r2, r2, #2
 8003eac:	d0b6      	beq.n	8003e1c <USB_EPStartXfer+0x98>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8003eae:	780c      	ldrb	r4, [r1, #0]
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003eb0:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8003eb2:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8003eb6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003eba:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003ebe:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 8003ec2:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8003ec4:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8003ec6:	d1fa      	bne.n	8003ebe <USB_EPStartXfer+0x13a>
 8003ec8:	e7a8      	b.n	8003e1c <USB_EPStartXfer+0x98>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003eca:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ece:	f3c4 0c12 	ubfx	ip, r4, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ed2:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003ed6:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003ed8:	eb08 0e04 	add.w	lr, r8, r4
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003edc:	f8df a098 	ldr.w	sl, [pc, #152]	; 8003f78 <USB_EPStartXfer+0x1f4>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003ee0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ee4:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ee8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003f70 <USB_EPStartXfer+0x1ec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eec:	f8c5 a010 	str.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ef0:	f8d5 a010 	ldr.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003ef4:	fbbe f8f8 	udiv	r8, lr, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ef8:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003efc:	f8df e074 	ldr.w	lr, [pc, #116]	; 8003f74 <USB_EPStartXfer+0x1f0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f00:	f8c5 9010 	str.w	r9, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f04:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 8003f08:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8003f0c:	ea4e 0e08 	orr.w	lr, lr, r8
 8003f10:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f14:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8003f18:	ea4c 0c0e 	orr.w	ip, ip, lr
 8003f1c:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003f20:	d013      	beq.n	8003f4a <USB_EPStartXfer+0x1c6>
    if (dma == 1U)
 8003f22:	2a01      	cmp	r2, #1
 8003f24:	d020      	beq.n	8003f68 <USB_EPStartXfer+0x1e4>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f26:	780a      	ldrb	r2, [r1, #0]
 8003f28:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 8003f2c:	f002 020f 	and.w	r2, r2, #15
 8003f30:	4097      	lsls	r7, r2
 8003f32:	430f      	orrs	r7, r1
 8003f34:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f38:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
}
 8003f3c:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f3e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003f42:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8003f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f4a:	692f      	ldr	r7, [r5, #16]
    if (dma == 1U)
 8003f4c:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f4e:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 8003f52:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f54:	692f      	ldr	r7, [r5, #16]
 8003f56:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8003f5a:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8003f5c:	d18e      	bne.n	8003e7c <USB_EPStartXfer+0xf8>
      if ((uint32_t)ep->dma_addr != 0U)
 8003f5e:	690f      	ldr	r7, [r1, #16]
 8003f60:	2f00      	cmp	r7, #0
 8003f62:	d089      	beq.n	8003e78 <USB_EPStartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f64:	616f      	str	r7, [r5, #20]
 8003f66:	e787      	b.n	8003e78 <USB_EPStartXfer+0xf4>
      if ((uint32_t)ep->dma_addr != 0U)
 8003f68:	690f      	ldr	r7, [r1, #16]
 8003f6a:	2f00      	cmp	r7, #0
 8003f6c:	d1fa      	bne.n	8003f64 <USB_EPStartXfer+0x1e0>
 8003f6e:	e7e3      	b.n	8003f38 <USB_EPStartXfer+0x1b4>
 8003f70:	e007ffff 	.word	0xe007ffff
 8003f74:	1ff80000 	.word	0x1ff80000
 8003f78:	fff80000 	.word	0xfff80000

08003f7c <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8003f7c:	784b      	ldrb	r3, [r1, #1]
{
 8003f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8003f80:	2b01      	cmp	r3, #1
  uint32_t epnum = (uint32_t)ep->num;
 8003f82:	780d      	ldrb	r5, [r1, #0]
 8003f84:	694f      	ldr	r7, [r1, #20]
 8003f86:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 8003f8a:	d025      	beq.n	8003fd8 <USB_EP0StartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f8c:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8003f90:	4e3e      	ldr	r6, [pc, #248]	; (800408c <USB_EP0StartXfer+0x110>)
 8003f92:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f94:	4d3e      	ldr	r5, [pc, #248]	; (8004090 <USB_EP0StartXfer+0x114>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f96:	4006      	ands	r6, r0
 8003f98:	6888      	ldr	r0, [r1, #8]
 8003f9a:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f9c:	691e      	ldr	r6, [r3, #16]
 8003f9e:	4035      	ands	r5, r6
 8003fa0:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 8003fa2:	b107      	cbz	r7, 8003fa6 <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 8003fa4:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fa6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003fa8:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 8003fac:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fae:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003fb2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003fb4:	691d      	ldr	r5, [r3, #16]
 8003fb6:	ea40 0005 	orr.w	r0, r0, r5
 8003fba:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8003fbc:	d007      	beq.n	8003fce <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003fbe:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
}
 8003fc2:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003fc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fc8:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8003fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fce:	68ca      	ldr	r2, [r1, #12]
 8003fd0:	2a00      	cmp	r2, #0
 8003fd2:	d0f4      	beq.n	8003fbe <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fd4:	615a      	str	r2, [r3, #20]
 8003fd6:	e7f2      	b.n	8003fbe <USB_EP0StartXfer+0x42>
 8003fd8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8003fdc:	b39f      	cbz	r7, 8004046 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fde:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8003fe2:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800408c <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fe6:	4e2a      	ldr	r6, [pc, #168]	; (8004090 <USB_EP0StartXfer+0x114>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fe8:	ea0e 0c0c 	and.w	ip, lr, ip
      if (ep->xfer_len > ep->maxpacket)
 8003fec:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ff0:	f8c3 c010 	str.w	ip, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003ff4:	45be      	cmp	lr, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ff6:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8003ffa:	ea0c 0606 	and.w	r6, ip, r6
 8003ffe:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004000:	d236      	bcs.n	8004070 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004002:	691f      	ldr	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004004:	f3ce 0612 	ubfx	r6, lr, #0, #19
        ep->xfer_len = ep->maxpacket;
 8004008:	f8c1 e014 	str.w	lr, [r1, #20]
    if (dma == 1U)
 800400c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800400e:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8004012:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004014:	691f      	ldr	r7, [r3, #16]
 8004016:	ea46 0607 	orr.w	r6, r6, r7
 800401a:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 800401c:	d023      	beq.n	8004066 <USB_EP0StartXfer+0xea>
      if (ep->xfer_len > 0U)
 800401e:	f1be 0f00 	cmp.w	lr, #0
 8004022:	d008      	beq.n	8004036 <USB_EP0StartXfer+0xba>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004024:	f005 020f 	and.w	r2, r5, #15
 8004028:	2501      	movs	r5, #1
 800402a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800402e:	4095      	lsls	r5, r2
 8004030:	431d      	orrs	r5, r3
 8004032:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004036:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 800403a:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800403c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004040:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8004044:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004046:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8004048:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800404a:	4d11      	ldr	r5, [pc, #68]	; (8004090 <USB_EP0StartXfer+0x114>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800404c:	480f      	ldr	r0, [pc, #60]	; (800408c <USB_EP0StartXfer+0x110>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800404e:	ea05 0506 	and.w	r5, r5, r6
 8004052:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004054:	691d      	ldr	r5, [r3, #16]
 8004056:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800405a:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800405c:	691d      	ldr	r5, [r3, #16]
 800405e:	ea00 0005 	and.w	r0, r0, r5
 8004062:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8004064:	d1e7      	bne.n	8004036 <USB_EP0StartXfer+0xba>
      if ((uint32_t)ep->dma_addr != 0U)
 8004066:	690a      	ldr	r2, [r1, #16]
 8004068:	2a00      	cmp	r2, #0
 800406a:	d0e4      	beq.n	8004036 <USB_EP0StartXfer+0xba>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800406c:	615a      	str	r2, [r3, #20]
 800406e:	e7e2      	b.n	8004036 <USB_EP0StartXfer+0xba>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004070:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004072:	f3c7 0712 	ubfx	r7, r7, #0, #19
    if (dma == 1U)
 8004076:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004078:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800407c:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800407e:	691e      	ldr	r6, [r3, #16]
 8004080:	ea47 0706 	orr.w	r7, r7, r6
 8004084:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 8004086:	d1cd      	bne.n	8004024 <USB_EP0StartXfer+0xa8>
 8004088:	e7ed      	b.n	8004066 <USB_EP0StartXfer+0xea>
 800408a:	bf00      	nop
 800408c:	fff80000 	.word	0xfff80000
 8004090:	e007ffff 	.word	0xe007ffff

08004094 <USB_WritePacket>:
{
 8004094:	b410      	push	{r4}
 8004096:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800409a:	b96c      	cbnz	r4, 80040b8 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 800409c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	d00a      	beq.n	80040b8 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80040a2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80040a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80040aa:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80040ae:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 80040b2:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80040b4:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80040b6:	d1fa      	bne.n	80040ae <USB_WritePacket+0x1a>
}
 80040b8:	2000      	movs	r0, #0
 80040ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80040c0:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 80040c2:	0892      	lsrs	r2, r2, #2
 80040c4:	d00c      	beq.n	80040e0 <USB_ReadPacket+0x20>
{
 80040c6:	b410      	push	{r4}
 80040c8:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80040cc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 80040d6:	4281      	cmp	r1, r0
 80040d8:	d1fa      	bne.n	80040d0 <USB_ReadPacket+0x10>
}
 80040da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040de:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 80040e0:	4608      	mov	r0, r1
}
 80040e2:	4770      	bx	lr

080040e4 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80040e4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80040e6:	784a      	ldrb	r2, [r1, #1]
 80040e8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80040ec:	3300      	adds	r3, #0
 80040ee:	bf18      	it	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2a01      	cmp	r2, #1
 80040f4:	d012      	beq.n	800411c <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040f6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80040fa:	2a00      	cmp	r2, #0
 80040fc:	db06      	blt.n	800410c <USB_EPSetStall+0x28>
 80040fe:	b12b      	cbz	r3, 800410c <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004100:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004104:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004108:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800410c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004114:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004118:	2000      	movs	r0, #0
 800411a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800411c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8004120:	2a00      	cmp	r2, #0
 8004122:	db06      	blt.n	8004132 <USB_EPSetStall+0x4e>
 8004124:	b12b      	cbz	r3, 8004132 <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004126:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800412a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800412e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004132:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800413a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800413e:	2000      	movs	r0, #0
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <USB_EPClearStall>:
{
 8004144:	78cb      	ldrb	r3, [r1, #3]
 8004146:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8004148:	7849      	ldrb	r1, [r1, #1]
 800414a:	3b02      	subs	r3, #2
 800414c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8004150:	2901      	cmp	r1, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	d011      	beq.n	800417a <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004156:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800415a:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800415c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004160:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004164:	d901      	bls.n	800416a <USB_EPClearStall+0x26>
}
 8004166:	2000      	movs	r0, #0
 8004168:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800416a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004172:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004176:	2000      	movs	r0, #0
 8004178:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800417a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800417e:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004180:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004184:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004188:	d8ed      	bhi.n	8004166 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800418a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004192:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8004196:	2000      	movs	r0, #0
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop

0800419c <USB_SetDevAddress>:
{
 800419c:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800419e:	0109      	lsls	r1, r1, #4
}
 80041a0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041a2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041a6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041aa:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 80041ae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041b2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80041b6:	4311      	orrs	r1, r2
 80041b8:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop

080041c0 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041c0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 80041c4:	2003      	movs	r0, #3
{
 80041c6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041c8:	6853      	ldr	r3, [r2, #4]
 80041ca:	f023 0302 	bic.w	r3, r3, #2
 80041ce:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80041d0:	f7fc f9de 	bl	8000590 <HAL_Delay>
}
 80041d4:	2000      	movs	r0, #0
 80041d6:	bd08      	pop	{r3, pc}

080041d8 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041d8:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 80041dc:	2003      	movs	r0, #3
{
 80041de:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041e0:	6853      	ldr	r3, [r2, #4]
 80041e2:	f043 0302 	orr.w	r3, r3, #2
 80041e6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80041e8:	f7fc f9d2 	bl	8000590 <HAL_Delay>
}
 80041ec:	2000      	movs	r0, #0
 80041ee:	bd08      	pop	{r3, pc}

080041f0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80041f0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80041f2:	6980      	ldr	r0, [r0, #24]
}
 80041f4:	4010      	ands	r0, r2
 80041f6:	4770      	bx	lr

080041f8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80041f8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80041fc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004200:	69c0      	ldr	r0, [r0, #28]
 8004202:	4018      	ands	r0, r3
}
 8004204:	0c00      	lsrs	r0, r0, #16
 8004206:	4770      	bx	lr

08004208 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004208:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800420c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004210:	69c0      	ldr	r0, [r0, #28]
 8004212:	4018      	ands	r0, r3
}
 8004214:	b280      	uxth	r0, r0
 8004216:	4770      	bx	lr

08004218 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004218:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800421c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004220:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004224:	6940      	ldr	r0, [r0, #20]
}
 8004226:	4010      	ands	r0, r2
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop

0800422c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800422c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004230:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 8004234:	b410      	push	{r4}
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004236:	f001 040f 	and.w	r4, r1, #15
  msk = USBx_DEVICE->DIEPMSK;
 800423a:	6911      	ldr	r1, [r2, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800423c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800423e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004242:	40e3      	lsrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004244:	6880      	ldr	r0, [r0, #8]
}
 8004246:	f85d 4b04 	ldr.w	r4, [sp], #4
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800424a:	01db      	lsls	r3, r3, #7
 800424c:	b2db      	uxtb	r3, r3
 800424e:	430b      	orrs	r3, r1
}
 8004250:	4018      	ands	r0, r3
 8004252:	4770      	bx	lr

08004254 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004254:	6940      	ldr	r0, [r0, #20]
}
 8004256:	f000 0001 	and.w	r0, r0, #1
 800425a:	4770      	bx	lr

0800425c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800425c:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004260:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <USB_ActivateSetup+0x34>)
 8004266:	400a      	ands	r2, r1
 8004268:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	f002 0206 	and.w	r2, r2, #6
 8004272:	2a04      	cmp	r2, #4
 8004274:	d105      	bne.n	8004282 <USB_ActivateSetup+0x26>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004276:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800427a:	f042 0203 	orr.w	r2, r2, #3
 800427e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004282:	685a      	ldr	r2, [r3, #4]
}
 8004284:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428a:	605a      	str	r2, [r3, #4]
}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	fffff800 	.word	0xfffff800

08004294 <USB_EP0_OutStart>:
{
 8004294:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004296:	4c12      	ldr	r4, [pc, #72]	; (80042e0 <USB_EP0_OutStart+0x4c>)
 8004298:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800429c:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800429e:	42a5      	cmp	r5, r4
 80042a0:	d903      	bls.n	80042aa <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042a2:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 80042a6:	2c00      	cmp	r4, #0
 80042a8:	db16      	blt.n	80042d8 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042aa:	2400      	movs	r4, #0
  if (dma == 1U)
 80042ac:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042ae:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042b0:	691c      	ldr	r4, [r3, #16]
 80042b2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80042b6:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042b8:	691c      	ldr	r4, [r3, #16]
 80042ba:	f044 0418 	orr.w	r4, r4, #24
 80042be:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80042c0:	691c      	ldr	r4, [r3, #16]
 80042c2:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80042c6:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 80042c8:	d106      	bne.n	80042d8 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80042ca:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80042cc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80042d0:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80042d4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80042d8:	2000      	movs	r0, #0
 80042da:	bc30      	pop	{r4, r5}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	4f54300a 	.word	0x4f54300a

080042e4 <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 80042e4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  
  if(pdev->pClassData != NULL)
 80042e8:	b11b      	cbz	r3, 80042f2 <USBD_MIDI_DataIn+0xe>
  {
    
    hmidi->TxState = 0;
 80042ea:	2000      	movs	r0, #0
 80042ec:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80042f0:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80042f2:	2002      	movs	r0, #2
  }
}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop

080042f8 <USBD_MIDI_EP0_RxReady>:
  */
static uint8_t  USBD_MIDI_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hmidi->CmdOpCode != 0xFF))
 80042f8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80042fc:	b183      	cbz	r3, 8004320 <USBD_MIDI_EP0_RxReady+0x28>
{ 
 80042fe:	b510      	push	{r4, lr}
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004300:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hmidi->CmdOpCode != 0xFF))
 8004304:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004308:	28ff      	cmp	r0, #255	; 0xff
 800430a:	d007      	beq.n	800431c <USBD_MIDI_EP0_RxReady+0x24>
  {
    ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Control(hmidi->CmdOpCode,
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	4621      	mov	r1, r4
 8004310:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004314:	4798      	blx	r3
                                                      (uint8_t *)hmidi->data,
                                                      hmidi->CmdLength);
      hmidi->CmdOpCode = 0xFF;
 8004316:	23ff      	movs	r3, #255	; 0xff
 8004318:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800431c:	2000      	movs	r0, #0
 800431e:	bd10      	pop	{r4, pc}
 8004320:	2000      	movs	r0, #0
 8004322:	4770      	bx	lr

08004324 <USBD_MIDI_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MIDI_CfgFSDesc);
 8004324:	2365      	movs	r3, #101	; 0x65
 8004326:	8003      	strh	r3, [r0, #0]
  return USBD_MIDI_CfgFSDesc;
}
 8004328:	4800      	ldr	r0, [pc, #0]	; (800432c <USBD_MIDI_GetFSCfgDesc+0x8>)
 800432a:	4770      	bx	lr
 800432c:	20000008 	.word	0x20000008

08004330 <USBD_MIDI_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MIDI_CfgHSDesc);
 8004330:	2365      	movs	r3, #101	; 0x65
 8004332:	8003      	strh	r3, [r0, #0]
  return USBD_MIDI_CfgHSDesc;
}
 8004334:	4800      	ldr	r0, [pc, #0]	; (8004338 <USBD_MIDI_GetHSCfgDesc+0x8>)
 8004336:	4770      	bx	lr
 8004338:	20000070 	.word	0x20000070

0800433c <USBD_MIDI_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MIDI_OtherSpeedCfgDesc);
 800433c:	2365      	movs	r3, #101	; 0x65
 800433e:	8003      	strh	r3, [r0, #0]
  return USBD_MIDI_OtherSpeedCfgDesc;
}
 8004340:	4800      	ldr	r0, [pc, #0]	; (8004344 <USBD_MIDI_GetOtherSpeedCfgDesc+0x8>)
 8004342:	4770      	bx	lr
 8004344:	200000d8 	.word	0x200000d8

08004348 <USBD_MIDI_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MIDI_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 8004348:	230a      	movs	r3, #10
 800434a:	8003      	strh	r3, [r0, #0]
  return USBD_MIDI_DeviceQualifierDesc;
}
 800434c:	4800      	ldr	r0, [pc, #0]	; (8004350 <USBD_MIDI_GetDeviceQualifierDescriptor+0x8>)
 800434e:	4770      	bx	lr
 8004350:	20000140 	.word	0x20000140

08004354 <USBD_MIDI_DataOut>:
{      
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4604      	mov	r4, r0
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004358:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hmidi->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800435c:	f003 fa44 	bl	80077e8 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8004360:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hmidi->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004364:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8004368:	b14b      	cbz	r3, 800437e <USBD_MIDI_DataOut+0x2a>
    ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->RxBuffer, &hmidi->RxLength);
 800436a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800436e:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8004372:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4798      	blx	r3
    return USBD_OK;
 800437a:	2000      	movs	r0, #0
}
 800437c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800437e:	2002      	movs	r0, #2
}
 8004380:	bd38      	pop	{r3, r4, r5, pc}
 8004382:	bf00      	nop

08004384 <USBD_MIDI_Setup>:
{
 8004384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004388:	780b      	ldrb	r3, [r1, #0]
{
 800438a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800438c:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8004390:	d00e      	beq.n	80043b0 <USBD_MIDI_Setup+0x2c>
 8004392:	2a20      	cmp	r2, #32
 8004394:	d109      	bne.n	80043aa <USBD_MIDI_Setup+0x26>
    if (req->wLength)
 8004396:	88ce      	ldrh	r6, [r1, #6]
 8004398:	4605      	mov	r5, r0
 800439a:	784f      	ldrb	r7, [r1, #1]
 800439c:	b996      	cbnz	r6, 80043c4 <USBD_MIDI_Setup+0x40>
      ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800439e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80043a2:	4632      	mov	r2, r6
 80043a4:	4638      	mov	r0, r7
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4798      	blx	r3
}
 80043aa:	2000      	movs	r0, #0
 80043ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 80043b0:	784b      	ldrb	r3, [r1, #1]
 80043b2:	2b0a      	cmp	r3, #10
 80043b4:	d1f9      	bne.n	80043aa <USBD_MIDI_Setup+0x26>
      USBD_CtlSendData (pdev,
 80043b6:	2201      	movs	r2, #1
 80043b8:	490f      	ldr	r1, [pc, #60]	; (80043f8 <USBD_MIDI_Setup+0x74>)
 80043ba:	f000 fcc1 	bl	8004d40 <USBD_CtlSendData>
}
 80043be:	2000      	movs	r0, #0
 80043c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->bmRequest & 0x80)
 80043c4:	061b      	lsls	r3, r3, #24
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 80043c6:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
      if (req->bmRequest & 0x80)
 80043ca:	d50c      	bpl.n	80043e6 <USBD_MIDI_Setup+0x62>
        ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043cc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80043d0:	4632      	mov	r2, r6
 80043d2:	4641      	mov	r1, r8
 80043d4:	4638      	mov	r0, r7
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4798      	blx	r3
          USBD_CtlSendData (pdev, 
 80043da:	88e2      	ldrh	r2, [r4, #6]
 80043dc:	4641      	mov	r1, r8
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 fcae 	bl	8004d40 <USBD_CtlSendData>
 80043e4:	e7e1      	b.n	80043aa <USBD_MIDI_Setup+0x26>
        hmidi->CmdOpCode = req->bRequest;
 80043e6:	f888 7200 	strb.w	r7, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, 
 80043ea:	4632      	mov	r2, r6
        hmidi->CmdLength = req->wLength;
 80043ec:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80043f0:	4641      	mov	r1, r8
 80043f2:	f000 fcbb 	bl	8004d6c <USBD_CtlPrepareRx>
 80043f6:	e7d8      	b.n	80043aa <USBD_MIDI_Setup+0x26>
 80043f8:	20000278 	.word	0x20000278

080043fc <USBD_MIDI_DeInit>:
{
 80043fc:	b510      	push	{r4, lr}
 80043fe:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8004400:	2181      	movs	r1, #129	; 0x81
 8004402:	f003 f989 	bl	8007718 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8004406:	2101      	movs	r1, #1
 8004408:	4620      	mov	r0, r4
 800440a:	f003 f985 	bl	8007718 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800440e:	4620      	mov	r0, r4
 8004410:	2182      	movs	r1, #130	; 0x82
 8004412:	f003 f981 	bl	8007718 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8004416:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800441a:	b153      	cbz	r3, 8004432 <USBD_MIDI_DeInit+0x36>
    ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->DeInit();
 800441c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004424:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8004428:	f003 fb44 	bl	8007ab4 <free>
    pdev->pClassData = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
}
 8004432:	2000      	movs	r0, #0
 8004434:	bd10      	pop	{r4, pc}
 8004436:	bf00      	nop

08004438 <USBD_MIDI_Init>:
{
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800443a:	7c03      	ldrb	r3, [r0, #16]
{
 800443c:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800443e:	bb73      	cbnz	r3, 800449e <USBD_MIDI_Init+0x66>
    USBD_LL_OpenEP(pdev,
 8004440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004444:	2202      	movs	r2, #2
 8004446:	2181      	movs	r1, #129	; 0x81
 8004448:	f003 f954 	bl	80076f4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800444c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004450:	2202      	movs	r2, #2
 8004452:	2101      	movs	r1, #1
 8004454:	4620      	mov	r0, r4
 8004456:	f003 f94d 	bl	80076f4 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800445a:	2308      	movs	r3, #8
 800445c:	2203      	movs	r2, #3
 800445e:	2182      	movs	r1, #130	; 0x82
 8004460:	4620      	mov	r0, r4
 8004462:	f003 f947 	bl	80076f4 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8004466:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800446a:	f003 fb1b 	bl	8007aa4 <malloc>
 800446e:	4605      	mov	r5, r0
 8004470:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8004474:	b330      	cbz	r0, 80044c4 <USBD_MIDI_Init+0x8c>
    ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Init();
 8004476:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    hmidi->TxState =0;
 800447a:	2600      	movs	r6, #0
    ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Init();
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004480:	7c27      	ldrb	r7, [r4, #16]
    hmidi->TxState =0;
 8004482:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev,
 8004486:	4620      	mov	r0, r4
    hmidi->RxState =0;
 8004488:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev,
 800448c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004490:	b18f      	cbz	r7, 80044b6 <USBD_MIDI_Init+0x7e>
      USBD_LL_PrepareReceive(pdev,
 8004492:	2340      	movs	r3, #64	; 0x40
 8004494:	2101      	movs	r1, #1
 8004496:	f003 f999 	bl	80077cc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800449a:	4630      	mov	r0, r6
}
 800449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800449e:	2340      	movs	r3, #64	; 0x40
 80044a0:	2202      	movs	r2, #2
 80044a2:	2181      	movs	r1, #129	; 0x81
 80044a4:	f003 f926 	bl	80076f4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	2202      	movs	r2, #2
 80044ac:	2101      	movs	r1, #1
 80044ae:	4620      	mov	r0, r4
 80044b0:	f003 f920 	bl	80076f4 <USBD_LL_OpenEP>
 80044b4:	e7d1      	b.n	800445a <USBD_MIDI_Init+0x22>
      USBD_LL_PrepareReceive(pdev,
 80044b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ba:	2101      	movs	r1, #1
 80044bc:	f003 f986 	bl	80077cc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80044c0:	4638      	mov	r0, r7
}
 80044c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80044c4:	2001      	movs	r0, #1
}
 80044c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044c8 <USBD_MIDI_RegisterInterface>:
uint8_t  USBD_MIDI_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_MIDI_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80044c8:	b119      	cbz	r1, 80044d2 <USBD_MIDI_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80044ca:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;    
 80044ce:	2000      	movs	r0, #0
 80044d0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80044d2:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop

080044d8 <USBD_MIDI_SetTxBuffer>:
  */
uint8_t  USBD_MIDI_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 80044d8:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  
  hmidi->TxBuffer = pbuff;
  hmidi->TxLength = length;
  
  return USBD_OK;  
}
 80044dc:	2000      	movs	r0, #0
  hmidi->TxBuffer = pbuff;
 80044de:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hmidi->TxLength = length;
 80044e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80044e6:	4770      	bx	lr

080044e8 <USBD_MIDI_SetRxBuffer>:
uint8_t  USBD_MIDI_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
  
  hmidi->RxBuffer = pbuff;
 80044e8:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  
  return USBD_OK;
}
 80044ec:	2000      	movs	r0, #0
  hmidi->RxBuffer = pbuff;
 80044ee:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80044f2:	4770      	bx	lr

080044f4 <USBD_MIDI_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_MIDI_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 80044f4:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
  
  if(pdev->pClassData != NULL)
 80044f8:	b189      	cbz	r1, 800451e <USBD_MIDI_TransmitPacket+0x2a>
{      
 80044fa:	b538      	push	{r3, r4, r5, lr}
  {
    if(hmidi->TxState == 0)
 80044fc:	f8d1 4214 	ldr.w	r4, [r1, #532]	; 0x214
 8004500:	b10c      	cbz	r4, 8004506 <USBD_MIDI_TransmitPacket+0x12>
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004502:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004504:	bd38      	pop	{r3, r4, r5, pc}
      hmidi->TxState = 1;
 8004506:	2501      	movs	r5, #1
      USBD_LL_Transmit(pdev,
 8004508:	f8b1 3210 	ldrh.w	r3, [r1, #528]	; 0x210
 800450c:	f8d1 2208 	ldr.w	r2, [r1, #520]	; 0x208
      hmidi->TxState = 1;
 8004510:	f8c1 5214 	str.w	r5, [r1, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 8004514:	2181      	movs	r1, #129	; 0x81
 8004516:	f003 f94b 	bl	80077b0 <USBD_LL_Transmit>
      return USBD_OK;
 800451a:	4620      	mov	r0, r4
}
 800451c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800451e:	2002      	movs	r0, #2
}
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop

08004524 <USBD_MIDI_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_MIDI_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004524:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004528:	b18a      	cbz	r2, 800454e <USBD_MIDI_ReceivePacket+0x2a>
 800452a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{      
 800452e:	b510      	push	{r4, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004530:	7c04      	ldrb	r4, [r0, #16]
 8004532:	b12c      	cbz	r4, 8004540 <USBD_MIDI_ReceivePacket+0x1c>
                             MIDI_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004534:	2340      	movs	r3, #64	; 0x40
 8004536:	2101      	movs	r1, #1
 8004538:	f003 f948 	bl	80077cc <USBD_LL_PrepareReceive>
                             MIDI_OUT_EP,
                             hmidi->RxBuffer,
                             MIDI_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800453c:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800453e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004544:	2101      	movs	r1, #1
 8004546:	f003 f941 	bl	80077cc <USBD_LL_PrepareReceive>
    return USBD_OK;
 800454a:	4620      	mov	r0, r4
}
 800454c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800454e:	2002      	movs	r0, #2
}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop

08004554 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004554:	b188      	cbz	r0, 800457a <USBD_Init+0x26>
{
 8004556:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004558:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800455c:	b113      	cbz	r3, 8004564 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004564:	b109      	cbz	r1, 800456a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004566:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800456a:	2101      	movs	r1, #1
  pdev->id = id;
 800456c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800456e:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004572:	f003 f87f 	bl	8007674 <USBD_LL_Init>

  return USBD_OK;
 8004576:	2000      	movs	r0, #0
}
 8004578:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800457a:	2002      	movs	r0, #2
}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop

08004580 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004580:	b119      	cbz	r1, 800458a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004582:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8004586:	2000      	movs	r0, #0
 8004588:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800458a:	2002      	movs	r0, #2
  }

  return status;
}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop

08004590 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004590:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004592:	f003 f8a1 	bl	80076d8 <USBD_LL_Start>

  return USBD_OK;
}
 8004596:	2000      	movs	r0, #0
 8004598:	bd08      	pop	{r3, pc}
 800459a:	bf00      	nop

0800459c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800459c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800459e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80045a2:	b11b      	cbz	r3, 80045ac <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4798      	blx	r3
 80045a8:	b900      	cbnz	r0, 80045ac <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80045aa:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80045ac:	2002      	movs	r0, #2
}
 80045ae:	bd08      	pop	{r3, pc}

080045b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80045b0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80045b2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4798      	blx	r3
  return USBD_OK;
}
 80045ba:	2000      	movs	r0, #0
 80045bc:	bd08      	pop	{r3, pc}
 80045be:	bf00      	nop

080045c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80045c0:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80045c2:	f500 7520 	add.w	r5, r0, #640	; 0x280
{
 80045c6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80045c8:	4628      	mov	r0, r5
 80045ca:	f000 fb7f 	bl	8004ccc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80045ce:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 80045d2:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 80045d4:	f8b4 2286 	ldrh.w	r2, [r4, #646]	; 0x286
  switch (pdev->request.bmRequest & 0x1FU)
 80045d8:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 80045dc:	f8c4 026c 	str.w	r0, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 80045e0:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 80045e2:	f8c4 2270 	str.w	r2, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 80045e6:	d015      	beq.n	8004614 <USBD_LL_SetupStage+0x54>
 80045e8:	d30e      	bcc.n	8004608 <USBD_LL_SetupStage+0x48>
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d006      	beq.n	80045fc <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80045ee:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80045f2:	4620      	mov	r0, r4
 80045f4:	f003 f89e 	bl	8007734 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 80045f8:	2000      	movs	r0, #0
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 80045fc:	4629      	mov	r1, r5
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 facc 	bl	8004b9c <USBD_StdEPReq>
}
 8004604:	2000      	movs	r0, #0
 8004606:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 8004608:	4629      	mov	r1, r5
 800460a:	4620      	mov	r0, r4
 800460c:	f000 f900 	bl	8004810 <USBD_StdDevReq>
}
 8004610:	2000      	movs	r0, #0
 8004612:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8004614:	4629      	mov	r1, r5
 8004616:	4620      	mov	r0, r4
 8004618:	f000 fa94 	bl	8004b44 <USBD_StdItfReq>
}
 800461c:	2000      	movs	r0, #0
 800461e:	bd38      	pop	{r3, r4, r5, pc}

08004620 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004624:	b941      	cbnz	r1, 8004638 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004626:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800462a:	2b03      	cmp	r3, #3
 800462c:	d00f      	beq.n	800464e <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800462e:	2b05      	cmp	r3, #5
 8004630:	460c      	mov	r4, r1
 8004632:	d02e      	beq.n	8004692 <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004634:	2000      	movs	r0, #0
}
 8004636:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 8004638:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	b1c3      	cbz	r3, 8004672 <USBD_LL_DataOutStage+0x52>
 8004640:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004644:	2a03      	cmp	r2, #3
 8004646:	d114      	bne.n	8004672 <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 8004648:	4798      	blx	r3
  return USBD_OK;
 800464a:	2000      	movs	r0, #0
}
 800464c:	bd70      	pop	{r4, r5, r6, pc}
 800464e:	4616      	mov	r6, r2
      if(pep->rem_length > pep->maxpacket)
 8004650:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8004654:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8004658:	4293      	cmp	r3, r2
 800465a:	d90c      	bls.n	8004676 <USBD_LL_DataOutStage+0x56>
        pep->rem_length -=  pep->maxpacket;
 800465c:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx (pdev,
 800465e:	4631      	mov	r1, r6
 8004660:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8004662:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8004666:	bf8c      	ite	hi
 8004668:	b29a      	uxthhi	r2, r3
 800466a:	b292      	uxthls	r2, r2
 800466c:	f000 fb8e 	bl	8004d8c <USBD_CtlContinueRx>
 8004670:	e7e0      	b.n	8004634 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8004672:	2002      	movs	r0, #2
}
 8004674:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004676:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	b123      	cbz	r3, 8004688 <USBD_LL_DataOutStage+0x68>
 800467e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004682:	2a03      	cmp	r2, #3
 8004684:	d100      	bne.n	8004688 <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 8004686:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004688:	4628      	mov	r0, r5
 800468a:	f000 fb87 	bl	8004d9c <USBD_CtlSendStatus>
  return USBD_OK;
 800468e:	2000      	movs	r0, #0
}
 8004690:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 8004692:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004696:	f003 f84d 	bl	8007734 <USBD_LL_StallEP>
  return USBD_OK;
 800469a:	4620      	mov	r0, r4
}
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	bf00      	nop

080046a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80046a4:	b961      	cbnz	r1, 80046c0 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80046a6:	f8d0 526c 	ldr.w	r5, [r0, #620]	; 0x26c
 80046aa:	2d02      	cmp	r5, #2
 80046ac:	d016      	beq.n	80046dc <USBD_LL_DataInStage+0x3c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80046ae:	f035 0304 	bics.w	r3, r5, #4
 80046b2:	d034      	beq.n	800471e <USBD_LL_DataInStage+0x7e>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80046b4:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80046b8:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d00b      	beq.n	80046d6 <USBD_LL_DataInStage+0x36>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80046be:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 80046c0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	b343      	cbz	r3, 800471a <USBD_LL_DataInStage+0x7a>
 80046c8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80046cc:	2a03      	cmp	r2, #3
 80046ce:	d124      	bne.n	800471a <USBD_LL_DataInStage+0x7a>
    pdev->pClass->DataIn(pdev, epnum);
 80046d0:	4798      	blx	r3
  return USBD_OK;
 80046d2:	2000      	movs	r0, #0
}
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 80046d6:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
}
 80046da:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 80046dc:	e9d0 5308 	ldrd	r5, r3, [r0, #32]
 80046e0:	460e      	mov	r6, r1
 80046e2:	429d      	cmp	r5, r3
 80046e4:	d81f      	bhi.n	8004726 <USBD_LL_DataInStage+0x86>
        if((pep->total_length % pep->maxpacket == 0U) &&
 80046e6:	69c5      	ldr	r5, [r0, #28]
 80046e8:	fbb5 f2f3 	udiv	r2, r5, r3
 80046ec:	fb03 5212 	mls	r2, r3, r2, r5
 80046f0:	b90a      	cbnz	r2, 80046f6 <USBD_LL_DataInStage+0x56>
 80046f2:	42ab      	cmp	r3, r5
 80046f4:	d924      	bls.n	8004740 <USBD_LL_DataInStage+0xa0>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80046f6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	b12b      	cbz	r3, 800470a <USBD_LL_DataInStage+0x6a>
 80046fe:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8004702:	2a03      	cmp	r2, #3
 8004704:	d101      	bne.n	800470a <USBD_LL_DataInStage+0x6a>
            pdev->pClass->EP0_TxSent(pdev);
 8004706:	4620      	mov	r0, r4
 8004708:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800470a:	2180      	movs	r1, #128	; 0x80
 800470c:	4620      	mov	r0, r4
 800470e:	f003 f811 	bl	8007734 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004712:	4620      	mov	r0, r4
 8004714:	f000 fb4e 	bl	8004db4 <USBD_CtlReceiveStatus>
 8004718:	e7cc      	b.n	80046b4 <USBD_LL_DataInStage+0x14>
    return USBD_FAIL;
 800471a:	2002      	movs	r0, #2
}
 800471c:	bd70      	pop	{r4, r5, r6, pc}
        USBD_LL_StallEP(pdev, 0x80U);
 800471e:	2180      	movs	r1, #128	; 0x80
 8004720:	f003 f808 	bl	8007734 <USBD_LL_StallEP>
 8004724:	e7c6      	b.n	80046b4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8004726:	1aeb      	subs	r3, r5, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004728:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800472a:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800472c:	b29a      	uxth	r2, r3
 800472e:	f000 fb15 	bl	8004d5c <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004732:	4633      	mov	r3, r6
 8004734:	4632      	mov	r2, r6
 8004736:	4631      	mov	r1, r6
 8004738:	4620      	mov	r0, r4
 800473a:	f003 f847 	bl	80077cc <USBD_LL_PrepareReceive>
 800473e:	e7b9      	b.n	80046b4 <USBD_LL_DataInStage+0x14>
           (pep->total_length >= pep->maxpacket) &&
 8004740:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 8004744:	429d      	cmp	r5, r3
 8004746:	d2d6      	bcs.n	80046f6 <USBD_LL_DataInStage+0x56>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004748:	460a      	mov	r2, r1
 800474a:	f000 fb07 	bl	8004d5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800474e:	f8c4 6270 	str.w	r6, [r4, #624]	; 0x270
 8004752:	e7ee      	b.n	8004732 <USBD_LL_DataInStage+0x92>

08004754 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004754:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004756:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004758:	2640      	movs	r6, #64	; 0x40
{
 800475a:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800475c:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800475e:	4611      	mov	r1, r2
 8004760:	4633      	mov	r3, r6
 8004762:	f002 ffc7 	bl	80076f4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004766:	4633      	mov	r3, r6
 8004768:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800476a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800476e:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004772:	4620      	mov	r0, r4
 8004774:	2200      	movs	r2, #0
 8004776:	f002 ffbd 	bl	80076f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800477a:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800477c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004780:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004782:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004784:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004788:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800478c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800478e:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8004792:	b123      	cbz	r3, 800479e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004794:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004798:	4620      	mov	r0, r4
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800479e:	2000      	movs	r0, #0
 80047a0:	bd70      	pop	{r4, r5, r6, pc}
 80047a2:	bf00      	nop

080047a4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80047a4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80047a6:	2000      	movs	r0, #0
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop

080047ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80047ac:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80047ae:	2104      	movs	r1, #4
  return USBD_OK;
}
 80047b0:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 80047b2:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80047b6:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 80047ba:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 80047be:	4770      	bx	lr

080047c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80047c0:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
  return USBD_OK;
}
 80047c2:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 80047c4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80047c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop

080047d0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80047d0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80047d4:	2a03      	cmp	r2, #3
 80047d6:	d001      	beq.n	80047dc <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 80047d8:	2000      	movs	r0, #0
 80047da:	4770      	bx	lr
{
 80047dc:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 80047de:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	b103      	cbz	r3, 80047e8 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80047e6:	4798      	blx	r3
}
 80047e8:	2000      	movs	r0, #0
 80047ea:	bd08      	pop	{r3, pc}

080047ec <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80047ec:	2000      	movs	r0, #0
 80047ee:	4770      	bx	lr

080047f0 <USBD_LL_IsoOUTIncomplete>:
 80047f0:	2000      	movs	r0, #0
 80047f2:	4770      	bx	lr

080047f4 <USBD_LL_DevConnected>:
 80047f4:	2000      	movs	r0, #0
 80047f6:	4770      	bx	lr

080047f8 <USBD_LL_DevDisconnected>:
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80047f8:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047fc:	2101      	movs	r1, #1
{
 80047fe:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004800:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004804:	7901      	ldrb	r1, [r0, #4]
 8004806:	6853      	ldr	r3, [r2, #4]
 8004808:	4798      	blx	r3

  return USBD_OK;
}
 800480a:	2000      	movs	r0, #0
 800480c:	bd08      	pop	{r3, pc}
 800480e:	bf00      	nop

08004810 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004810:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004812:	780b      	ldrb	r3, [r1, #0]
{
 8004814:	b083      	sub	sp, #12
 8004816:	460d      	mov	r5, r1
 8004818:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800481a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800481e:	2b20      	cmp	r3, #32
 8004820:	d028      	beq.n	8004874 <USBD_StdDevReq+0x64>
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d026      	beq.n	8004874 <USBD_StdDevReq+0x64>
 8004826:	b153      	cbz	r3, 800483e <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	4620      	mov	r0, r4
 800482c:	f002 ff82 	bl	8007734 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004830:	4620      	mov	r0, r4
 8004832:	2100      	movs	r1, #0
 8004834:	f002 ff7e 	bl	8007734 <USBD_LL_StallEP>
}
 8004838:	2000      	movs	r0, #0
 800483a:	b003      	add	sp, #12
 800483c:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800483e:	784b      	ldrb	r3, [r1, #1]
 8004840:	2b09      	cmp	r3, #9
 8004842:	d8f1      	bhi.n	8004828 <USBD_StdDevReq+0x18>
 8004844:	a201      	add	r2, pc, #4	; (adr r2, 800484c <USBD_StdDevReq+0x3c>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	080048c9 	.word	0x080048c9
 8004850:	080048f5 	.word	0x080048f5
 8004854:	08004829 	.word	0x08004829
 8004858:	08004911 	.word	0x08004911
 800485c:	08004829 	.word	0x08004829
 8004860:	0800491d 	.word	0x0800491d
 8004864:	0800495b 	.word	0x0800495b
 8004868:	08004829 	.word	0x08004829
 800486c:	080049a9 	.word	0x080049a9
 8004870:	08004887 	.word	0x08004887
    pdev->pClass->Setup(pdev, req);
 8004874:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004878:	4629      	mov	r1, r5
 800487a:	4620      	mov	r0, r4
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4798      	blx	r3
}
 8004880:	2000      	movs	r0, #0
 8004882:	b003      	add	sp, #12
 8004884:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 8004886:	7889      	ldrb	r1, [r1, #2]
 8004888:	4dad      	ldr	r5, [pc, #692]	; (8004b40 <USBD_StdDevReq+0x330>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800488a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800488c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800488e:	d8cb      	bhi.n	8004828 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8004890:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004894:	2b02      	cmp	r3, #2
 8004896:	f000 8128 	beq.w	8004aea <USBD_StdDevReq+0x2da>
 800489a:	2b03      	cmp	r3, #3
 800489c:	f040 8119 	bne.w	8004ad2 <USBD_StdDevReq+0x2c2>
      if (cfgidx == 0U)
 80048a0:	2900      	cmp	r1, #0
 80048a2:	f000 813e 	beq.w	8004b22 <USBD_StdDevReq+0x312>
      else if (cfgidx != pdev->dev_config)
 80048a6:	6841      	ldr	r1, [r0, #4]
 80048a8:	2901      	cmp	r1, #1
 80048aa:	d009      	beq.n	80048c0 <USBD_StdDevReq+0xb0>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80048ac:	b2c9      	uxtb	r1, r1
 80048ae:	f7ff fe7f 	bl	80045b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80048b2:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80048b4:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 80048b6:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80048b8:	f7ff fe70 	bl	800459c <USBD_SetClassConfig>
 80048bc:	2802      	cmp	r0, #2
 80048be:	d0b3      	beq.n	8004828 <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 80048c0:	4620      	mov	r0, r4
 80048c2:	f000 fa6b 	bl	8004d9c <USBD_CtlSendStatus>
 80048c6:	e7b7      	b.n	8004838 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80048c8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80048cc:	2203      	movs	r2, #3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d8a9      	bhi.n	8004828 <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 80048d4:	88cb      	ldrh	r3, [r1, #6]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d1a6      	bne.n	8004828 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80048da:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup)
 80048dc:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80048e0:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80048e2:	b103      	cbz	r3, 80048e6 <USBD_StdDevReq+0xd6>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80048e4:	60c2      	str	r2, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80048e6:	2202      	movs	r2, #2
 80048e8:	f104 010c 	add.w	r1, r4, #12
 80048ec:	4620      	mov	r0, r4
 80048ee:	f000 fa27 	bl	8004d40 <USBD_CtlSendData>
 80048f2:	e7a1      	b.n	8004838 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80048f4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80048f8:	3b01      	subs	r3, #1
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d894      	bhi.n	8004828 <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80048fe:	884b      	ldrh	r3, [r1, #2]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d199      	bne.n	8004838 <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800490a:	f000 fa47 	bl	8004d9c <USBD_CtlSendStatus>
 800490e:	e793      	b.n	8004838 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004910:	884b      	ldrh	r3, [r1, #2]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d190      	bne.n	8004838 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 8004916:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
 800491a:	e7d1      	b.n	80048c0 <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800491c:	888b      	ldrh	r3, [r1, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d182      	bne.n	8004828 <USBD_StdDevReq+0x18>
 8004922:	88cb      	ldrh	r3, [r1, #6]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f47f af7f 	bne.w	8004828 <USBD_StdDevReq+0x18>
 800492a:	884d      	ldrh	r5, [r1, #2]
 800492c:	2d7f      	cmp	r5, #127	; 0x7f
 800492e:	f63f af7b 	bhi.w	8004828 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004932:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004936:	2b03      	cmp	r3, #3
 8004938:	f43f af76 	beq.w	8004828 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800493c:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800493e:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004942:	f002 ff27 	bl	8007794 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004946:	4620      	mov	r0, r4
 8004948:	f000 fa28 	bl	8004d9c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800494c:	2d00      	cmp	r5, #0
 800494e:	f000 80f2 	beq.w	8004b36 <USBD_StdDevReq+0x326>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004952:	2302      	movs	r3, #2
 8004954:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8004958:	e76e      	b.n	8004838 <USBD_StdDevReq+0x28>
      USBD_GetDescriptor (pdev, req);
 800495a:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 800495c:	0a13      	lsrs	r3, r2, #8
 800495e:	3b01      	subs	r3, #1
 8004960:	2b0e      	cmp	r3, #14
 8004962:	f63f af61 	bhi.w	8004828 <USBD_StdDevReq+0x18>
 8004966:	a101      	add	r1, pc, #4	; (adr r1, 800496c <USBD_StdDevReq+0x15c>)
 8004968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800496c:	08004a51 	.word	0x08004a51
 8004970:	08004a39 	.word	0x08004a39
 8004974:	08004a61 	.word	0x08004a61
 8004978:	08004829 	.word	0x08004829
 800497c:	08004829 	.word	0x08004829
 8004980:	08004a09 	.word	0x08004a09
 8004984:	08004a1f 	.word	0x08004a1f
 8004988:	08004829 	.word	0x08004829
 800498c:	08004829 	.word	0x08004829
 8004990:	08004829 	.word	0x08004829
 8004994:	08004829 	.word	0x08004829
 8004998:	08004829 	.word	0x08004829
 800499c:	08004829 	.word	0x08004829
 80049a0:	08004829 	.word	0x08004829
 80049a4:	080049cf 	.word	0x080049cf
  if (req->wLength != 1U)
 80049a8:	88ca      	ldrh	r2, [r1, #6]
 80049aa:	2a01      	cmp	r2, #1
 80049ac:	f47f af3c 	bne.w	8004828 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80049b0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f43f af37 	beq.w	8004828 <USBD_StdDevReq+0x18>
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	f240 80a3 	bls.w	8004b06 <USBD_StdDevReq+0x2f6>
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	f47f af31 	bne.w	8004828 <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80049c6:	1d01      	adds	r1, r0, #4
 80049c8:	f000 f9ba 	bl	8004d40 <USBD_CtlSendData>
 80049cc:	e734      	b.n	8004838 <USBD_StdDevReq+0x28>
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80049ce:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80049d2:	f10d 0106 	add.w	r1, sp, #6
 80049d6:	7c00      	ldrb	r0, [r0, #16]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80049dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80049e0:	88ea      	ldrh	r2, [r5, #6]
 80049e2:	b16b      	cbz	r3, 8004a00 <USBD_StdDevReq+0x1f0>
 80049e4:	2a00      	cmp	r2, #0
 80049e6:	f43f af6b 	beq.w	80048c0 <USBD_StdDevReq+0xb0>
    len = MIN(len, req->wLength);
 80049ea:	4293      	cmp	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 80049ec:	4601      	mov	r1, r0
 80049ee:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80049f0:	bf28      	it	cs
 80049f2:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 80049f4:	461a      	mov	r2, r3
    len = MIN(len, req->wLength);
 80049f6:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80049fa:	f000 f9a1 	bl	8004d40 <USBD_CtlSendData>
 80049fe:	88ea      	ldrh	r2, [r5, #6]
  if(req->wLength == 0U)
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	f47f af19 	bne.w	8004838 <USBD_StdDevReq+0x28>
 8004a06:	e75b      	b.n	80048c0 <USBD_StdDevReq+0xb0>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004a08:	7c03      	ldrb	r3, [r0, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f47f af0c 	bne.w	8004828 <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004a10:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a14:	f10d 0006 	add.w	r0, sp, #6
 8004a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1a:	4798      	blx	r3
 8004a1c:	e7de      	b.n	80049dc <USBD_StdDevReq+0x1cc>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004a1e:	7c03      	ldrb	r3, [r0, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f47f af01 	bne.w	8004828 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004a26:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a2a:	f10d 0006 	add.w	r0, sp, #6
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004a32:	2307      	movs	r3, #7
 8004a34:	7043      	strb	r3, [r0, #1]
 8004a36:	e7d1      	b.n	80049dc <USBD_StdDevReq+0x1cc>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004a38:	7c02      	ldrb	r2, [r0, #16]
 8004a3a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d168      	bne.n	8004b14 <USBD_StdDevReq+0x304>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	f10d 0006 	add.w	r0, sp, #6
 8004a48:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	7043      	strb	r3, [r0, #1]
 8004a4e:	e7c5      	b.n	80049dc <USBD_StdDevReq+0x1cc>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004a50:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004a54:	f10d 0106 	add.w	r1, sp, #6
 8004a58:	7c00      	ldrb	r0, [r0, #16]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4798      	blx	r3
 8004a5e:	e7bd      	b.n	80049dc <USBD_StdDevReq+0x1cc>
    switch ((uint8_t)(req->wValue))
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	2a05      	cmp	r2, #5
 8004a64:	f63f aee0 	bhi.w	8004828 <USBD_StdDevReq+0x18>
 8004a68:	e8df f002 	tbb	[pc, r2]
 8004a6c:	131b232b 	.word	0x131b232b
 8004a70:	030b      	.short	0x030b
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004a72:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004a76:	f10d 0106 	add.w	r1, sp, #6
 8004a7a:	7c00      	ldrb	r0, [r0, #16]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	4798      	blx	r3
 8004a80:	e7ac      	b.n	80049dc <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004a82:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004a86:	f10d 0106 	add.w	r1, sp, #6
 8004a8a:	7c00      	ldrb	r0, [r0, #16]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4798      	blx	r3
 8004a90:	e7a4      	b.n	80049dc <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004a92:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004a96:	f10d 0106 	add.w	r1, sp, #6
 8004a9a:	7c00      	ldrb	r0, [r0, #16]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	4798      	blx	r3
 8004aa0:	e79c      	b.n	80049dc <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004aa2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004aa6:	f10d 0106 	add.w	r1, sp, #6
 8004aaa:	7c00      	ldrb	r0, [r0, #16]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	4798      	blx	r3
 8004ab0:	e794      	b.n	80049dc <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004ab2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004ab6:	f10d 0106 	add.w	r1, sp, #6
 8004aba:	7c00      	ldrb	r0, [r0, #16]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	4798      	blx	r3
 8004ac0:	e78c      	b.n	80049dc <USBD_StdDevReq+0x1cc>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004ac2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004ac6:	f10d 0106 	add.w	r1, sp, #6
 8004aca:	7c00      	ldrb	r0, [r0, #16]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4798      	blx	r3
 8004ad0:	e784      	b.n	80049dc <USBD_StdDevReq+0x1cc>
  USBD_LL_StallEP(pdev , 0x80U);
 8004ad2:	2180      	movs	r1, #128	; 0x80
 8004ad4:	f002 fe2e 	bl	8007734 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4620      	mov	r0, r4
 8004adc:	f002 fe2a 	bl	8007734 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 8004ae0:	7829      	ldrb	r1, [r5, #0]
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7ff fd64 	bl	80045b0 <USBD_ClrClassConfig>
 8004ae8:	e6a6      	b.n	8004838 <USBD_StdDevReq+0x28>
      if (cfgidx)
 8004aea:	2900      	cmp	r1, #0
 8004aec:	f43f aee8 	beq.w	80048c0 <USBD_StdDevReq+0xb0>
        pdev->dev_config = cfgidx;
 8004af0:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004af2:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8004af4:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004af6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004afa:	f7ff fd4f 	bl	800459c <USBD_SetClassConfig>
 8004afe:	2802      	cmp	r0, #2
 8004b00:	f47f aede 	bne.w	80048c0 <USBD_StdDevReq+0xb0>
 8004b04:	e690      	b.n	8004828 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	4601      	mov	r1, r0
 8004b0a:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004b0e:	f000 f917 	bl	8004d40 <USBD_CtlSendData>
 8004b12:	e691      	b.n	8004838 <USBD_StdDevReq+0x28>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	f10d 0006 	add.w	r0, sp, #6
 8004b1a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	7043      	strb	r3, [r0, #1]
 8004b20:	e75c      	b.n	80049dc <USBD_StdDevReq+0x1cc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b22:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8004b24:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b26:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 8004b2a:	f7ff fd41 	bl	80045b0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 f934 	bl	8004d9c <USBD_CtlSendStatus>
 8004b34:	e680      	b.n	8004838 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8004b3c:	e67c      	b.n	8004838 <USBD_StdDevReq+0x28>
 8004b3e:	bf00      	nop
 8004b40:	20000279 	.word	0x20000279

08004b44 <USBD_StdItfReq>:
{
 8004b44:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b46:	780b      	ldrb	r3, [r1, #0]
{
 8004b48:	460d      	mov	r5, r1
 8004b4a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d00c      	beq.n	8004b6e <USBD_StdItfReq+0x2a>
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d00a      	beq.n	8004b6e <USBD_StdItfReq+0x2a>
 8004b58:	b14b      	cbz	r3, 8004b6e <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev , 0x80U);
 8004b5a:	2180      	movs	r1, #128	; 0x80
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f002 fde9 	bl	8007734 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004b62:	4620      	mov	r0, r4
 8004b64:	2100      	movs	r1, #0
 8004b66:	f002 fde5 	bl	8007734 <USBD_LL_StallEP>
}
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8004b6e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8004b72:	3b01      	subs	r3, #1
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d8f0      	bhi.n	8004b5a <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004b78:	792b      	ldrb	r3, [r5, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d8ed      	bhi.n	8004b5a <USBD_StdItfReq+0x16>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004b7e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004b82:	4629      	mov	r1, r5
 8004b84:	4620      	mov	r0, r4
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b8a:	88eb      	ldrh	r3, [r5, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ec      	bne.n	8004b6a <USBD_StdItfReq+0x26>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d1ea      	bne.n	8004b6a <USBD_StdItfReq+0x26>
          USBD_CtlSendStatus(pdev);
 8004b94:	4620      	mov	r0, r4
 8004b96:	f000 f901 	bl	8004d9c <USBD_CtlSendStatus>
 8004b9a:	e7e6      	b.n	8004b6a <USBD_StdItfReq+0x26>

08004b9c <USBD_StdEPReq>:
{
 8004b9c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b9e:	780b      	ldrb	r3, [r1, #0]
{
 8004ba0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d00c      	beq.n	8004bc4 <USBD_StdEPReq+0x28>
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d00a      	beq.n	8004bc4 <USBD_StdEPReq+0x28>
 8004bae:	b183      	cbz	r3, 8004bd2 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f002 fdbe 	bl	8007734 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004bb8:	4620      	mov	r0, r4
 8004bba:	2100      	movs	r1, #0
 8004bbc:	f002 fdba 	bl	8007734 <USBD_LL_StallEP>
}
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
 8004bc4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004bc8:	4620      	mov	r0, r4
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4798      	blx	r3
}
 8004bce:	2000      	movs	r0, #0
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8004bd2:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004bd4:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8004bd6:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004bd8:	b2d5      	uxtb	r5, r2
    switch (req->bRequest)
 8004bda:	d037      	beq.n	8004c4c <USBD_StdEPReq+0xb0>
 8004bdc:	d314      	bcc.n	8004c08 <USBD_StdEPReq+0x6c>
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d1e6      	bne.n	8004bb0 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 8004be2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d03f      	beq.n	8004c6a <USBD_StdEPReq+0xce>
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d1e0      	bne.n	8004bb0 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004bee:	884b      	ldrh	r3, [r1, #2]
 8004bf0:	b933      	cbnz	r3, 8004c00 <USBD_StdEPReq+0x64>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004bf2:	066a      	lsls	r2, r5, #25
 8004bf4:	d004      	beq.n	8004c00 <USBD_StdEPReq+0x64>
 8004bf6:	88cb      	ldrh	r3, [r1, #6]
 8004bf8:	b913      	cbnz	r3, 8004c00 <USBD_StdEPReq+0x64>
            USBD_LL_StallEP(pdev, ep_addr);
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	f002 fd9a 	bl	8007734 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 f8cb 	bl	8004d9c <USBD_CtlSendStatus>
        break;
 8004c06:	e7db      	b.n	8004bc0 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8004c08:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d036      	beq.n	8004c7e <USBD_StdEPReq+0xe2>
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d1cd      	bne.n	8004bb0 <USBD_StdEPReq+0x14>
 8004c14:	f005 030f 	and.w	r3, r5, #15
        if((ep_addr & 0x80U) == 0x80U)
 8004c18:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8004c22:	d43e      	bmi.n	8004ca2 <USBD_StdEPReq+0x106>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c24:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0c1      	beq.n	8004bb0 <USBD_StdEPReq+0x14>
 8004c2c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004c30:	2614      	movs	r6, #20
 8004c32:	fb06 0603 	mla	r6, r6, r3, r0
 8004c36:	f506 76a0 	add.w	r6, r6, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d13c      	bne.n	8004cb8 <USBD_StdEPReq+0x11c>
            pep->status = 0x0001U;
 8004c3e:	6033      	str	r3, [r6, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004c40:	4631      	mov	r1, r6
 8004c42:	4620      	mov	r0, r4
 8004c44:	2202      	movs	r2, #2
 8004c46:	f000 f87b 	bl	8004d40 <USBD_CtlSendData>
          break;
 8004c4a:	e7b9      	b.n	8004bc0 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8004c4c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d00a      	beq.n	8004c6a <USBD_StdEPReq+0xce>
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d1ab      	bne.n	8004bb0 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004c58:	884b      	ldrh	r3, [r1, #2]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1b0      	bne.n	8004bc0 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 8004c5e:	066e      	lsls	r6, r5, #25
 8004c60:	d0ce      	beq.n	8004c00 <USBD_StdEPReq+0x64>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004c62:	4629      	mov	r1, r5
 8004c64:	f002 fd74 	bl	8007750 <USBD_LL_ClearStallEP>
 8004c68:	e7ca      	b.n	8004c00 <USBD_StdEPReq+0x64>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c6a:	066b      	lsls	r3, r5, #25
 8004c6c:	d0a0      	beq.n	8004bb0 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f002 fd60 	bl	8007734 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004c74:	4620      	mov	r0, r4
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	f002 fd5c 	bl	8007734 <USBD_LL_StallEP>
 8004c7c:	e7a0      	b.n	8004bc0 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c7e:	0668      	lsls	r0, r5, #25
 8004c80:	d196      	bne.n	8004bb0 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004c82:	0611      	lsls	r1, r2, #24
          pep->status = 0x0000U;
 8004c84:	f04f 0500 	mov.w	r5, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004c8e:	bf4c      	ite	mi
 8004c90:	f104 0314 	addmi.w	r3, r4, #20
 8004c94:	f504 73a0 	addpl.w	r3, r4, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004c98:	4619      	mov	r1, r3
          pep->status = 0x0000U;
 8004c9a:	601d      	str	r5, [r3, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004c9c:	f000 f850 	bl	8004d40 <USBD_CtlSendData>
          break;
 8004ca0:	e78e      	b.n	8004bc0 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d083      	beq.n	8004bb0 <USBD_StdEPReq+0x14>
 8004ca8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004cac:	1c5e      	adds	r6, r3, #1
 8004cae:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004cb2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8004cb6:	e7c0      	b.n	8004c3a <USBD_StdEPReq+0x9e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f002 fd56 	bl	800776c <USBD_LL_IsStallEP>
 8004cc0:	b108      	cbz	r0, 8004cc6 <USBD_StdEPReq+0x12a>
            pep->status = 0x0001U;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e7bb      	b.n	8004c3e <USBD_StdEPReq+0xa2>
            pep->status = 0x0000U;
 8004cc6:	6030      	str	r0, [r6, #0]
 8004cc8:	e7ba      	b.n	8004c40 <USBD_StdEPReq+0xa4>
 8004cca:	bf00      	nop

08004ccc <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004ccc:	780b      	ldrb	r3, [r1, #0]
 8004cce:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004cd0:	784b      	ldrb	r3, [r1, #1]
 8004cd2:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004cd4:	78ca      	ldrb	r2, [r1, #3]
 8004cd6:	788b      	ldrb	r3, [r1, #2]
 8004cd8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004cdc:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004cde:	794a      	ldrb	r2, [r1, #5]
 8004ce0:	790b      	ldrb	r3, [r1, #4]
 8004ce2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ce6:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004ce8:	79ca      	ldrb	r2, [r1, #7]
 8004cea:	798b      	ldrb	r3, [r1, #6]
 8004cec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004cf0:	80c3      	strh	r3, [r0, #6]
}
 8004cf2:	4770      	bx	lr

08004cf4 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8004cf4:	b300      	cbz	r0, 8004d38 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8004cf6:	7803      	ldrb	r3, [r0, #0]
{
 8004cf8:	b430      	push	{r4, r5}
    while (*buf != '\0')
 8004cfa:	b1f3      	cbz	r3, 8004d3a <USBD_GetString+0x46>
 8004cfc:	4604      	mov	r4, r0
    uint8_t  len = 0U;
 8004cfe:	2300      	movs	r3, #0
    {
        len++;
 8004d00:	3301      	adds	r3, #1
    while (*buf != '\0')
 8004d02:	f814 5f01 	ldrb.w	r5, [r4, #1]!
        len++;
 8004d06:	b2db      	uxtb	r3, r3
    while (*buf != '\0')
 8004d08:	2d00      	cmp	r5, #0
 8004d0a:	d1f9      	bne.n	8004d00 <USBD_GetString+0xc>
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004d10:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004d12:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004d14:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004d16:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8004d18:	7804      	ldrb	r4, [r0, #0]
 8004d1a:	b15c      	cbz	r4, 8004d34 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004d1c:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8004d1e:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8004d24:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8004d26:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8004d2c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8004d30:	2c00      	cmp	r4, #0
 8004d32:	d1f5      	bne.n	8004d20 <USBD_GetString+0x2c>
}
 8004d34:	bc30      	pop	{r4, r5}
 8004d36:	4770      	bx	lr
 8004d38:	4770      	bx	lr
    while (*buf != '\0')
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e7e8      	b.n	8004d10 <USBD_GetString+0x1c>
 8004d3e:	bf00      	nop

08004d40 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004d44:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004d46:	460a      	mov	r2, r1
 8004d48:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 8004d4a:	61c5      	str	r5, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004d4c:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length   = len;
 8004d4e:	6205      	str	r5, [r0, #32]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004d50:	f8c0 626c 	str.w	r6, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004d54:	f002 fd2c 	bl	80077b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d58:	2000      	movs	r0, #0
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}

08004d5c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8004d5c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004d5e:	4613      	mov	r3, r2
 8004d60:	460a      	mov	r2, r1
 8004d62:	2100      	movs	r1, #0
 8004d64:	f002 fd24 	bl	80077b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d68:	2000      	movs	r0, #0
 8004d6a:	bd08      	pop	{r3, pc}

08004d6c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004d70:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8004d72:	460a      	mov	r2, r1
 8004d74:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 8004d76:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8004d7a:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length   = len;
 8004d7c:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004d80:	f8c0 626c 	str.w	r6, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8004d84:	f002 fd22 	bl	80077cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d88:	2000      	movs	r0, #0
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}

08004d8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8004d8c:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004d8e:	4613      	mov	r3, r2
 8004d90:	460a      	mov	r2, r1
 8004d92:	2100      	movs	r1, #0
 8004d94:	f002 fd1a 	bl	80077cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d98:	2000      	movs	r0, #0
 8004d9a:	bd08      	pop	{r3, pc}

08004d9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8004d9c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004d9e:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004da0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004da2:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004da6:	4619      	mov	r1, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	f002 fd01 	bl	80077b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004dae:	2000      	movs	r0, #0
 8004db0:	bd08      	pop	{r3, pc}
 8004db2:	bf00      	nop

08004db4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8004db4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004db6:	2205      	movs	r2, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004db8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004dba:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f002 fd03 	bl	80077cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	bd08      	pop	{r3, pc}
 8004dca:	bf00      	nop

08004dcc <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004dcc:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <MX_ADC1_Init+0x9c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004dce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hadc1.Instance = ADC1;
 8004dd2:	4926      	ldr	r1, [pc, #152]	; (8004e6c <MX_ADC1_Init+0xa0>)
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = ENABLE;
  hadc1.Init.NbrOfDiscConversion = 1;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004dd4:	4826      	ldr	r0, [pc, #152]	; (8004e70 <MX_ADC1_Init+0xa4>)
{
 8004dd6:	b530      	push	{r4, r5, lr}
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8004dd8:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
{
 8004ddc:	b085      	sub	sp, #20
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 3;
 8004dde:	2403      	movs	r4, #3
  hadc1.Instance = ADC1;
 8004de0:	6019      	str	r1, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004de2:	605a      	str	r2, [r3, #4]
  hadc1.Init.ScanConvMode = ENABLE;
 8004de4:	2101      	movs	r1, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8004de6:	2200      	movs	r2, #0
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004de8:	6298      	str	r0, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004dea:	4618      	mov	r0, r3
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8004dec:	609d      	str	r5, [r3, #8]
  hadc1.Init.NbrOfConversion = 3;
 8004dee:	61dc      	str	r4, [r3, #28]
  hadc1.Init.ScanConvMode = ENABLE;
 8004df0:	6119      	str	r1, [r3, #16]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8004df2:	f883 1020 	strb.w	r1, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8004df6:	6259      	str	r1, [r3, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8004df8:	9200      	str	r2, [sp, #0]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004dfc:	60da      	str	r2, [r3, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004dfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8004e02:	9203      	str	r2, [sp, #12]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004e04:	e9c3 1205 	strd	r1, r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004e08:	e9cd 2201 	strd	r2, r2, [sp, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004e0c:	f7fb fbd2 	bl	80005b4 <HAL_ADC_Init>
 8004e10:	bb30      	cbnz	r0, 8004e60 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004e12:	2404      	movs	r4, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004e14:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004e16:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e18:	4669      	mov	r1, sp
 8004e1a:	4813      	ldr	r0, [pc, #76]	; (8004e68 <MX_ADC1_Init+0x9c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004e1c:	9302      	str	r3, [sp, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004e1e:	e9cd 4200 	strd	r4, r2, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e22:	f7fb fd5b 	bl	80008dc <HAL_ADC_ConfigChannel>
 8004e26:	b9c0      	cbnz	r0, 8004e5a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004e28:	2206      	movs	r2, #6
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004e2a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e2c:	4669      	mov	r1, sp
 8004e2e:	480e      	ldr	r0, [pc, #56]	; (8004e68 <MX_ADC1_Init+0x9c>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004e30:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e34:	f7fb fd52 	bl	80008dc <HAL_ADC_ConfigChannel>
 8004e38:	b960      	cbnz	r0, 8004e54 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004e3a:	2207      	movs	r2, #7
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004e3c:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e3e:	4669      	mov	r1, sp
 8004e40:	4809      	ldr	r0, [pc, #36]	; (8004e68 <MX_ADC1_Init+0x9c>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004e42:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e46:	f7fb fd49 	bl	80008dc <HAL_ADC_ConfigChannel>
 8004e4a:	b108      	cbz	r0, 8004e50 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8004e4c:	f001 fd3a 	bl	80068c4 <Error_Handler>
  }

}
 8004e50:	b005      	add	sp, #20
 8004e52:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8004e54:	f001 fd36 	bl	80068c4 <Error_Handler>
 8004e58:	e7ef      	b.n	8004e3a <MX_ADC1_Init+0x6e>
    Error_Handler();
 8004e5a:	f001 fd33 	bl	80068c4 <Error_Handler>
 8004e5e:	e7e3      	b.n	8004e28 <MX_ADC1_Init+0x5c>
    Error_Handler();
 8004e60:	f001 fd30 	bl	80068c4 <Error_Handler>
 8004e64:	e7d5      	b.n	8004e12 <MX_ADC1_Init+0x46>
 8004e66:	bf00      	nop
 8004e68:	2000029c 	.word	0x2000029c
 8004e6c:	40012000 	.word	0x40012000
 8004e70:	0f000001 	.word	0x0f000001

08004e74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8004e74:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e76:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8004e78:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <HAL_ADC_MspInit+0x58>)
{
 8004e7a:	b530      	push	{r4, r5, lr}
  if(adcHandle->Instance==ADC1)
 8004e7c:	4291      	cmp	r1, r2
{
 8004e7e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e80:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004e84:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004e88:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8004e8a:	d001      	beq.n	8004e90 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e8c:	b009      	add	sp, #36	; 0x24
 8004e8e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <HAL_ADC_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8004e92:	25d0      	movs	r5, #208	; 0xd0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e94:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e96:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e9a:	480e      	ldr	r0, [pc, #56]	; (8004ed4 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004ea8:	9201      	str	r2, [sp, #4]
 8004eaa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8004eb6:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eb8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ebc:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec2:	f7fb fe43 	bl	8000b4c <HAL_GPIO_Init>
}
 8004ec6:	b009      	add	sp, #36	; 0x24
 8004ec8:	bd30      	pop	{r4, r5, pc}
 8004eca:	bf00      	nop
 8004ecc:	40012000 	.word	0x40012000
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40020000 	.word	0x40020000

08004ed8 <initFifo>:

midiData_t fifoData[FIFO_SIZE];

void initFifo(midiFifo *fifo)
{
	fifo->head = 0;
 8004ed8:	2100      	movs	r1, #0
	fifo->tail = 0;
 8004eda:	22ff      	movs	r2, #255	; 0xff
	fifo->size = FIFO_SIZE;
	fifo->midiData = fifoData;
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <initFifo+0x10>)
	fifo->head = 0;
 8004ede:	6001      	str	r1, [r0, #0]
	fifo->tail = 0;
 8004ee0:	8082      	strh	r2, [r0, #4]
	fifo->midiData = fifoData;
 8004ee2:	6083      	str	r3, [r0, #8]
}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	200002e4 	.word	0x200002e4

08004eec <push>:

uint8_t push(midiFifo *fifo, midiData_t *newData)
{
 8004eec:	b430      	push	{r4, r5}
	if( (fifo->head + 1 == fifo->tail) ||
 8004eee:	8804      	ldrh	r4, [r0, #0]
{
 8004ef0:	4603      	mov	r3, r0
	if( (fifo->head + 1 == fifo->tail) ||
 8004ef2:	8840      	ldrh	r0, [r0, #2]
 8004ef4:	1c62      	adds	r2, r4, #1
 8004ef6:	4282      	cmp	r2, r0
 8004ef8:	d013      	beq.n	8004f22 <push+0x36>
			( (fifo->head + 1 == fifo->size) && (fifo->tail == 0) ) )
 8004efa:	889d      	ldrh	r5, [r3, #4]
 8004efc:	b908      	cbnz	r0, 8004f02 <push+0x16>
 8004efe:	4295      	cmp	r5, r2
 8004f00:	d00f      	beq.n	8004f22 <push+0x36>
	{
		return 0;
	}
	else
	{
		fifo->midiData[fifo->head++] = newData[0];
 8004f02:	b292      	uxth	r2, r2
 8004f04:	6808      	ldr	r0, [r1, #0]
 8004f06:	6899      	ldr	r1, [r3, #8]
		if(fifo->head == fifo->size)
 8004f08:	4295      	cmp	r5, r2
		fifo->midiData[fifo->head++] = newData[0];
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
		if(fifo->head == fifo->size)
 8004f10:	d002      	beq.n	8004f18 <push+0x2c>
		{
			fifo->head = 0;
		}
	}
	return 1;
 8004f12:	2001      	movs	r0, #1
}
 8004f14:	bc30      	pop	{r4, r5}
 8004f16:	4770      	bx	lr
			fifo->head = 0;
 8004f18:	2200      	movs	r2, #0
	return 1;
 8004f1a:	2001      	movs	r0, #1
			fifo->head = 0;
 8004f1c:	801a      	strh	r2, [r3, #0]
}
 8004f1e:	bc30      	pop	{r4, r5}
 8004f20:	4770      	bx	lr
		return 0;
 8004f22:	2000      	movs	r0, #0
}
 8004f24:	bc30      	pop	{r4, r5}
 8004f26:	4770      	bx	lr

08004f28 <pop>:

midiData_t pop(midiFifo *fifo)
{
	midiData_t returnVal = {.status = 0, .channel = 0, .data1 = 0, .data2 = 0};
	if( fifo->tail != fifo->head )
 8004f28:	8843      	ldrh	r3, [r0, #2]
 8004f2a:	8802      	ldrh	r2, [r0, #0]
 8004f2c:	429a      	cmp	r2, r3
{
 8004f2e:	b4f0      	push	{r4, r5, r6, r7}
 8004f30:	b082      	sub	sp, #8
	if( fifo->tail != fifo->head )
 8004f32:	d01c      	beq.n	8004f6e <pop+0x46>
	{
		returnVal = fifo->midiData[fifo->tail++];
 8004f34:	6884      	ldr	r4, [r0, #8]
 8004f36:	1c5a      	adds	r2, r3, #1
		if( fifo->tail == fifo->size )
 8004f38:	8887      	ldrh	r7, [r0, #4]
		returnVal = fifo->midiData[fifo->tail++];
 8004f3a:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8004f3e:	f814 6023 	ldrb.w	r6, [r4, r3, lsl #2]
 8004f42:	b293      	uxth	r3, r2
 8004f44:	784d      	ldrb	r5, [r1, #1]
		if( fifo->tail == fifo->size )
 8004f46:	429f      	cmp	r7, r3
		returnVal = fifo->midiData[fifo->tail++];
 8004f48:	8043      	strh	r3, [r0, #2]
 8004f4a:	788c      	ldrb	r4, [r1, #2]
 8004f4c:	78ca      	ldrb	r2, [r1, #3]
		if( fifo->tail == fifo->size )
 8004f4e:	d00b      	beq.n	8004f68 <pop+0x40>
		{
			fifo->tail = 0;
		}
	}
	return returnVal;
 8004f50:	2000      	movs	r0, #0
 8004f52:	f366 0007 	bfi	r0, r6, #0, #8
 8004f56:	f365 200f 	bfi	r0, r5, #8, #8
 8004f5a:	f364 4017 	bfi	r0, r4, #16, #8
 8004f5e:	f362 601f 	bfi	r0, r2, #24, #8
}
 8004f62:	b002      	add	sp, #8
 8004f64:	bcf0      	pop	{r4, r5, r6, r7}
 8004f66:	4770      	bx	lr
			fifo->tail = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	8043      	strh	r3, [r0, #2]
 8004f6c:	e7f0      	b.n	8004f50 <pop+0x28>
	midiData_t returnVal = {.status = 0, .channel = 0, .data1 = 0, .data2 = 0};
 8004f6e:	2200      	movs	r2, #0
 8004f70:	4614      	mov	r4, r2
 8004f72:	4615      	mov	r5, r2
 8004f74:	4616      	mov	r6, r2
 8004f76:	e7eb      	b.n	8004f50 <pop+0x28>

08004f78 <MX_GFXSIMULATOR_Init>:

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{

}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> UART4_RX
*/
void MX_GPIO_Init(void)
{
 8004f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f80:	4b5e      	ldr	r3, [pc, #376]	; (80050fc <MX_GPIO_Init+0x180>)
{
 8004f82:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f84:	2400      	movs	r4, #0
                           PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM22_Pin 
                          |PWM23_Pin|PWM25_Pin|PWM27_Pin|PWM30_Pin 
                          |PWM64_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f86:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOE, PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM22_Pin 
 8004f88:	f8df a178 	ldr.w	sl, [pc, #376]	; 8005104 <MX_GPIO_Init+0x188>
 8004f8c:	f249 51be 	movw	r1, #38334	; 0x95be
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f90:	9408      	str	r4, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM22_Pin 
 8004f92:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f94:	9407      	str	r4, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM22_Pin 
 8004f96:	4650      	mov	r0, sl
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f98:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin 
 8004f9a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8005108 <MX_GPIO_Init+0x18c>
  HAL_GPIO_WritePin(GPIOA, PWM44_Pin|PWM45_Pin|PWM46_Pin, GPIO_PIN_RESET);
 8004f9e:	4f58      	ldr	r7, [pc, #352]	; (8005100 <MX_GPIO_Init+0x184>)
  HAL_GPIO_WritePin(GPIOB, PWM21_Pin|PWM31_Pin|PWM32_Pin, GPIO_PIN_RESET);
 8004fa0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800510c <MX_GPIO_Init+0x190>
  HAL_GPIO_WritePin(GPIOD, PWM35_Pin|PWM36_Pin|PWM37_Pin|PWM38_Pin 
 8004fa4:	f8df b168 	ldr.w	fp, [pc, #360]	; 8005110 <MX_GPIO_Init+0x194>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fac:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8004fae:	f045 0510 	orr.w	r5, r5, #16
 8004fb2:	631d      	str	r5, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb4:	2503      	movs	r5, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fb6:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8004fba:	f00c 0c10 	and.w	ip, ip, #16
 8004fbe:	f8cd c004 	str.w	ip, [sp, #4]
 8004fc2:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fc6:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8004fca:	f04c 0c04 	orr.w	ip, ip, #4
 8004fce:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8004fd2:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8004fd6:	f00c 0c04 	and.w	ip, ip, #4
 8004fda:	f8cd c008 	str.w	ip, [sp, #8]
 8004fde:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fe2:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8004fe6:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8004fea:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8004fee:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8004ff2:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 8004ff6:	f8cd c00c 	str.w	ip, [sp, #12]
 8004ffa:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffe:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8005002:	ea4c 0c06 	orr.w	ip, ip, r6
 8005006:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800500a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800500e:	ea0c 0c06 	and.w	ip, ip, r6
 8005012:	f8cd c010 	str.w	ip, [sp, #16]
 8005016:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800501a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800501e:	f04c 0c02 	orr.w	ip, ip, #2
 8005022:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8005026:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800502a:	f00c 0c02 	and.w	ip, ip, #2
 800502e:	f8cd c014 	str.w	ip, [sp, #20]
 8005032:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005036:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800503a:	f04c 0c08 	orr.w	ip, ip, #8
 800503e:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	9306      	str	r3, [sp, #24]
 800504a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM22_Pin 
 800504c:	f7fb fea2 	bl	8000d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin 
 8005050:	4622      	mov	r2, r4
 8005052:	4648      	mov	r0, r9
 8005054:	f64f 413f 	movw	r1, #64575	; 0xfc3f
 8005058:	f7fb fe9c 	bl	8000d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PWM44_Pin|PWM45_Pin|PWM46_Pin, GPIO_PIN_RESET);
 800505c:	4622      	mov	r2, r4
 800505e:	4638      	mov	r0, r7
 8005060:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8005064:	f7fb fe96 	bl	8000d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PWM21_Pin|PWM31_Pin|PWM32_Pin, GPIO_PIN_RESET);
 8005068:	4622      	mov	r2, r4
 800506a:	4640      	mov	r0, r8
 800506c:	f243 0104 	movw	r1, #12292	; 0x3004
 8005070:	f7fb fe90 	bl	8000d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, PWM35_Pin|PWM36_Pin|PWM37_Pin|PWM38_Pin 
 8005074:	4622      	mov	r2, r4
 8005076:	4658      	mov	r0, fp
 8005078:	f640 71ff 	movw	r1, #4095	; 0xfff
 800507c:	f7fb fe8a 	bl	8000d94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM22_Pin 
 8005080:	f249 539e 	movw	r3, #38302	; 0x959e
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005084:	4650      	mov	r0, sl
 8005086:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005088:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800508c:	e9cd 3607 	strd	r3, r6, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005090:	f7fb fd5c 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin 
 8005094:	f64f 433f 	movw	r3, #64575	; 0xfc3f
                          |PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM17_Pin 
                          |PWM18_Pin|PWM47_Pin|PWM48_Pin|PWM49_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005098:	4648      	mov	r0, r9
 800509a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin 
 800509c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800509e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a0:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050a4:	f7fb fd52 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80050a8:	23d0      	movs	r3, #208	; 0xd0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050aa:	a907      	add	r1, sp, #28
 80050ac:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80050ae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b4:	f7fb fd4a 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PWM13_Pin|PWM44_Pin|PWM45_Pin|PWM46_Pin|PWM63_Pin;
 80050b8:	f248 6321 	movw	r3, #34337	; 0x8621
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050bc:	4638      	mov	r0, r7
 80050be:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = PWM13_Pin|PWM44_Pin|PWM45_Pin|PWM46_Pin|PWM63_Pin;
 80050c0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c4:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c8:	f7fb fd40 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWM21_Pin|PWM31_Pin|PWM32_Pin;
 80050cc:	f243 0304 	movw	r3, #12292	; 0x3004
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d0:	4640      	mov	r0, r8
 80050d2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = PWM21_Pin|PWM31_Pin|PWM32_Pin;
 80050d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d8:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050dc:	f7fb fd36 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PWM35_Pin|PWM36_Pin|PWM37_Pin|PWM38_Pin 
 80050e0:	f640 73ff 	movw	r3, #4095	; 0xfff
                          |PWM50_Pin|PWM51_Pin|PWM52_Pin|PWM53_Pin 
                          |PWM54_Pin|PWM55_Pin|PWM56_Pin|PWM57_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050e4:	a907      	add	r1, sp, #28
 80050e6:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050e8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = PWM35_Pin|PWM36_Pin|PWM37_Pin|PWM38_Pin 
 80050ea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ec:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050f0:	f7fb fd2c 	bl	8000b4c <HAL_GPIO_Init>

}
 80050f4:	b00d      	add	sp, #52	; 0x34
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fa:	bf00      	nop
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020000 	.word	0x40020000
 8005104:	40021000 	.word	0x40021000
 8005108:	40020800 	.word	0x40020800
 800510c:	40020400 	.word	0x40020400
 8005110:	40020c00 	.word	0x40020c00

08005114 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005114:	b538      	push	{r3, r4, r5, lr}

  hi2c1.Instance = I2C1;
 8005116:	4b13      	ldr	r3, [pc, #76]	; (8005164 <MX_I2C1_Init+0x50>)
  hi2c1.Init.Timing = 0x20404768;
  hi2c1.Init.OwnAddress1 = 0;
 8005118:	2200      	movs	r2, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800511a:	2101      	movs	r1, #1
  hi2c1.Instance = I2C1;
 800511c:	4d12      	ldr	r5, [pc, #72]	; (8005168 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x20404768;
 800511e:	4c13      	ldr	r4, [pc, #76]	; (800516c <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005120:	4618      	mov	r0, r3
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005122:	621a      	str	r2, [r3, #32]
  hi2c1.Init.Timing = 0x20404768;
 8005124:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c1.Init.OwnAddress1 = 0;
 8005128:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800512c:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005130:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005134:	f7fb fefc 	bl	8000f30 <HAL_I2C_Init>
 8005138:	b988      	cbnz	r0, 800515e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800513a:	2100      	movs	r1, #0
 800513c:	4809      	ldr	r0, [pc, #36]	; (8005164 <MX_I2C1_Init+0x50>)
 800513e:	f7fc f805 	bl	800114c <HAL_I2CEx_ConfigAnalogFilter>
 8005142:	b948      	cbnz	r0, 8005158 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005144:	2100      	movs	r1, #0
 8005146:	4807      	ldr	r0, [pc, #28]	; (8005164 <MX_I2C1_Init+0x50>)
 8005148:	f7fc f82a 	bl	80011a0 <HAL_I2CEx_ConfigDigitalFilter>
 800514c:	b900      	cbnz	r0, 8005150 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
  }

}
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8005154:	f001 bbb6 	b.w	80068c4 <Error_Handler>
    Error_Handler();
 8005158:	f001 fbb4 	bl	80068c4 <Error_Handler>
 800515c:	e7f2      	b.n	8005144 <MX_I2C1_Init+0x30>
    Error_Handler();
 800515e:	f001 fbb1 	bl	80068c4 <Error_Handler>
 8005162:	e7ea      	b.n	800513a <MX_I2C1_Init+0x26>
 8005164:	20000778 	.word	0x20000778
 8005168:	40005400 	.word	0x40005400
 800516c:	20404768 	.word	0x20404768

08005170 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005170:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x20404768;
  hi2c2.Init.OwnAddress1 = 0;
 8005174:	2200      	movs	r2, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005176:	2101      	movs	r1, #1
  hi2c2.Instance = I2C2;
 8005178:	4d12      	ldr	r5, [pc, #72]	; (80051c4 <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x20404768;
 800517a:	4c13      	ldr	r4, [pc, #76]	; (80051c8 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800517c:	4618      	mov	r0, r3
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800517e:	621a      	str	r2, [r3, #32]
  hi2c2.Init.Timing = 0x20404768;
 8005180:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.OwnAddress1 = 0;
 8005184:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8005188:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800518c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005190:	f7fb fece 	bl	8000f30 <HAL_I2C_Init>
 8005194:	b988      	cbnz	r0, 80051ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005196:	2100      	movs	r1, #0
 8005198:	4809      	ldr	r0, [pc, #36]	; (80051c0 <MX_I2C2_Init+0x50>)
 800519a:	f7fb ffd7 	bl	800114c <HAL_I2CEx_ConfigAnalogFilter>
 800519e:	b948      	cbnz	r0, 80051b4 <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80051a0:	2100      	movs	r1, #0
 80051a2:	4807      	ldr	r0, [pc, #28]	; (80051c0 <MX_I2C2_Init+0x50>)
 80051a4:	f7fb fffc 	bl	80011a0 <HAL_I2CEx_ConfigDigitalFilter>
 80051a8:	b900      	cbnz	r0, 80051ac <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
  }

}
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80051b0:	f001 bb88 	b.w	80068c4 <Error_Handler>
    Error_Handler();
 80051b4:	f001 fb86 	bl	80068c4 <Error_Handler>
 80051b8:	e7f2      	b.n	80051a0 <MX_I2C2_Init+0x30>
    Error_Handler();
 80051ba:	f001 fb83 	bl	80068c4 <Error_Handler>
 80051be:	e7ea      	b.n	8005196 <MX_I2C2_Init+0x26>
 80051c0:	200007c4 	.word	0x200007c4
 80051c4:	40005800 	.word	0x40005800
 80051c8:	20404768 	.word	0x20404768

080051cc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80051cc:	b538      	push	{r3, r4, r5, lr}

  hi2c3.Instance = I2C3;
 80051ce:	4b13      	ldr	r3, [pc, #76]	; (800521c <MX_I2C3_Init+0x50>)
  hi2c3.Init.Timing = 0x20404768;
  hi2c3.Init.OwnAddress1 = 0;
 80051d0:	2200      	movs	r2, #0
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051d2:	2101      	movs	r1, #1
  hi2c3.Instance = I2C3;
 80051d4:	4d12      	ldr	r5, [pc, #72]	; (8005220 <MX_I2C3_Init+0x54>)
  hi2c3.Init.Timing = 0x20404768;
 80051d6:	4c13      	ldr	r4, [pc, #76]	; (8005224 <MX_I2C3_Init+0x58>)
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80051d8:	4618      	mov	r0, r3
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051da:	621a      	str	r2, [r3, #32]
  hi2c3.Init.Timing = 0x20404768;
 80051dc:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c3.Init.OwnAddress1 = 0;
 80051e0:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80051e4:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051e8:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80051ec:	f7fb fea0 	bl	8000f30 <HAL_I2C_Init>
 80051f0:	b988      	cbnz	r0, 8005216 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80051f2:	2100      	movs	r1, #0
 80051f4:	4809      	ldr	r0, [pc, #36]	; (800521c <MX_I2C3_Init+0x50>)
 80051f6:	f7fb ffa9 	bl	800114c <HAL_I2CEx_ConfigAnalogFilter>
 80051fa:	b948      	cbnz	r0, 8005210 <MX_I2C3_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80051fc:	2100      	movs	r1, #0
 80051fe:	4807      	ldr	r0, [pc, #28]	; (800521c <MX_I2C3_Init+0x50>)
 8005200:	f7fb ffce 	bl	80011a0 <HAL_I2CEx_ConfigDigitalFilter>
 8005204:	b900      	cbnz	r0, 8005208 <MX_I2C3_Init+0x3c>
  {
    Error_Handler();
  }

}
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800520c:	f001 bb5a 	b.w	80068c4 <Error_Handler>
    Error_Handler();
 8005210:	f001 fb58 	bl	80068c4 <Error_Handler>
 8005214:	e7f2      	b.n	80051fc <MX_I2C3_Init+0x30>
    Error_Handler();
 8005216:	f001 fb55 	bl	80068c4 <Error_Handler>
 800521a:	e7ea      	b.n	80051f2 <MX_I2C3_Init+0x26>
 800521c:	200006e0 	.word	0x200006e0
 8005220:	40005c00 	.word	0x40005c00
 8005224:	20404768 	.word	0x20404768

08005228 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8005228:	b538      	push	{r3, r4, r5, lr}

  hi2c4.Instance = I2C4;
 800522a:	4b13      	ldr	r3, [pc, #76]	; (8005278 <MX_I2C4_Init+0x50>)
  hi2c4.Init.Timing = 0x20404768;
  hi2c4.Init.OwnAddress1 = 0;
 800522c:	2200      	movs	r2, #0
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800522e:	2101      	movs	r1, #1
  hi2c4.Instance = I2C4;
 8005230:	4d12      	ldr	r5, [pc, #72]	; (800527c <MX_I2C4_Init+0x54>)
  hi2c4.Init.Timing = 0x20404768;
 8005232:	4c13      	ldr	r4, [pc, #76]	; (8005280 <MX_I2C4_Init+0x58>)
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8005234:	4618      	mov	r0, r3
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005236:	621a      	str	r2, [r3, #32]
  hi2c4.Init.Timing = 0x20404768;
 8005238:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c4.Init.OwnAddress1 = 0;
 800523c:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c4.Init.OwnAddress2 = 0;
 8005240:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005244:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8005248:	f7fb fe72 	bl	8000f30 <HAL_I2C_Init>
 800524c:	b988      	cbnz	r0, 8005272 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800524e:	2100      	movs	r1, #0
 8005250:	4809      	ldr	r0, [pc, #36]	; (8005278 <MX_I2C4_Init+0x50>)
 8005252:	f7fb ff7b 	bl	800114c <HAL_I2CEx_ConfigAnalogFilter>
 8005256:	b948      	cbnz	r0, 800526c <MX_I2C4_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8005258:	2100      	movs	r1, #0
 800525a:	4807      	ldr	r0, [pc, #28]	; (8005278 <MX_I2C4_Init+0x50>)
 800525c:	f7fb ffa0 	bl	80011a0 <HAL_I2CEx_ConfigDigitalFilter>
 8005260:	b900      	cbnz	r0, 8005264 <MX_I2C4_Init+0x3c>
  {
    Error_Handler();
  }

}
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8005268:	f001 bb2c 	b.w	80068c4 <Error_Handler>
    Error_Handler();
 800526c:	f001 fb2a 	bl	80068c4 <Error_Handler>
 8005270:	e7f2      	b.n	8005258 <MX_I2C4_Init+0x30>
    Error_Handler();
 8005272:	f001 fb27 	bl	80068c4 <Error_Handler>
 8005276:	e7ea      	b.n	800524e <MX_I2C4_Init+0x26>
 8005278:	2000072c 	.word	0x2000072c
 800527c:	40006000 	.word	0x40006000
 8005280:	20404768 	.word	0x20404768

08005284 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8005284:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005286:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C1)
 8005288:	495d      	ldr	r1, [pc, #372]	; (8005400 <HAL_I2C_MspInit+0x17c>)
{
 800528a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(i2cHandle->Instance==I2C1)
 800528e:	428a      	cmp	r2, r1
{
 8005290:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005292:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8005296:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800529a:	930d      	str	r3, [sp, #52]	; 0x34
  if(i2cHandle->Instance==I2C1)
 800529c:	d030      	beq.n	8005300 <HAL_I2C_MspInit+0x7c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800529e:	4b59      	ldr	r3, [pc, #356]	; (8005404 <HAL_I2C_MspInit+0x180>)
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d051      	beq.n	8005348 <HAL_I2C_MspInit+0xc4>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 80052a4:	4b58      	ldr	r3, [pc, #352]	; (8005408 <HAL_I2C_MspInit+0x184>)
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d073      	beq.n	8005392 <HAL_I2C_MspInit+0x10e>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 80052aa:	4b58      	ldr	r3, [pc, #352]	; (800540c <HAL_I2C_MspInit+0x188>)
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d002      	beq.n	80052b6 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80052b0:	b00e      	add	sp, #56	; 0x38
 80052b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052b6:	4c56      	ldr	r4, [pc, #344]	; (8005410 <HAL_I2C_MspInit+0x18c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052b8:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052ba:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80052bc:	f44f 5640 	mov.w	r6, #12288	; 0x3000
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c2:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052c4:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052c6:	f043 0308 	orr.w	r3, r3, #8
 80052ca:	6323      	str	r3, [r4, #48]	; 0x30
 80052cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052ce:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80052d0:	2204      	movs	r2, #4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052d2:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052d6:	900b      	str	r0, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052d8:	484e      	ldr	r0, [pc, #312]	; (8005414 <HAL_I2C_MspInit+0x190>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052da:	9307      	str	r3, [sp, #28]
 80052dc:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80052de:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80052e0:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052e4:	f7fb fc32 	bl	8000b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80052e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ee:	6423      	str	r3, [r4, #64]	; 0x40
 80052f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f6:	9308      	str	r3, [sp, #32]
 80052f8:	9b08      	ldr	r3, [sp, #32]
}
 80052fa:	b00e      	add	sp, #56	; 0x38
 80052fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005300:	4c43      	ldr	r4, [pc, #268]	; (8005410 <HAL_I2C_MspInit+0x18c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005302:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005304:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005306:	26c0      	movs	r6, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005308:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800530a:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800530c:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800530e:	f043 0302 	orr.w	r3, r3, #2
 8005312:	6323      	str	r3, [r4, #48]	; 0x30
 8005314:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005316:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005318:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800531a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800531e:	900b      	str	r0, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005320:	483d      	ldr	r0, [pc, #244]	; (8005418 <HAL_I2C_MspInit+0x194>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005326:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005328:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800532c:	f7fb fc0e 	bl	8000b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005336:	6423      	str	r3, [r4, #64]	; 0x40
 8005338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800533a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	9b01      	ldr	r3, [sp, #4]
}
 8005342:	b00e      	add	sp, #56	; 0x38
 8005344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005348:	4c31      	ldr	r4, [pc, #196]	; (8005410 <HAL_I2C_MspInit+0x18c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800534a:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800534c:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800534e:	f44f 6640 	mov.w	r6, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005352:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005354:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005356:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005358:	f043 0302 	orr.w	r3, r3, #2
 800535c:	6323      	str	r3, [r4, #48]	; 0x30
 800535e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005360:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005362:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005364:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005368:	900b      	str	r0, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800536a:	482b      	ldr	r0, [pc, #172]	; (8005418 <HAL_I2C_MspInit+0x194>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005370:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005372:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005376:	f7fb fbe9 	bl	8000b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800537a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800537c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005380:	6423      	str	r3, [r4, #64]	; 0x40
 8005382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	9b03      	ldr	r3, [sp, #12]
}
 800538c:	b00e      	add	sp, #56	; 0x38
 800538e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005392:	4c1f      	ldr	r4, [pc, #124]	; (8005410 <HAL_I2C_MspInit+0x18c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005394:	2504      	movs	r5, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005396:	2701      	movs	r7, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005398:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800539c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800539e:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a2:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053a4:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053a6:	432b      	orrs	r3, r5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053a8:	481c      	ldr	r0, [pc, #112]	; (800541c <HAL_I2C_MspInit+0x198>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053aa:	6323      	str	r3, [r4, #48]	; 0x30
 80053ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053ae:	402b      	ands	r3, r5
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053b6:	433b      	orrs	r3, r7
 80053b8:	6323      	str	r3, [r4, #48]	; 0x30
 80053ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053bc:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053be:	403b      	ands	r3, r7
 80053c0:	9305      	str	r3, [sp, #20]
 80053c2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053c4:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80053c8:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053cc:	f7fb fbbe 	bl	8000b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80053d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d4:	a909      	add	r1, sp, #36	; 0x24
 80053d6:	4812      	ldr	r0, [pc, #72]	; (8005420 <HAL_I2C_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80053d8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053da:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80053de:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e2:	f7fb fbb3 	bl	8000b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80053e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053ec:	6423      	str	r3, [r4, #64]	; 0x40
 80053ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f4:	9306      	str	r3, [sp, #24]
 80053f6:	9b06      	ldr	r3, [sp, #24]
}
 80053f8:	b00e      	add	sp, #56	; 0x38
 80053fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053fe:	bf00      	nop
 8005400:	40005400 	.word	0x40005400
 8005404:	40005800 	.word	0x40005800
 8005408:	40005c00 	.word	0x40005c00
 800540c:	40006000 	.word	0x40006000
 8005410:	40023800 	.word	0x40023800
 8005414:	40020c00 	.word	0x40020c00
 8005418:	40020400 	.word	0x40020400
 800541c:	40020800 	.word	0x40020800
 8005420:	40020000 	.word	0x40020000

08005424 <setOutputNoteValue.part.1>:

void setOutputNoteValue(uint8_t channel, uint8_t noteVel)
{
	if(channel < 65)
	{
		outputParams *out = &outputs[channel-1];
 8005424:	3801      	subs	r0, #1
 8005426:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
void setOutputNoteValue(uint8_t channel, uint8_t noteVel)
 800542a:	b570      	push	{r4, r5, r6, lr}
 800542c:	4d0e      	ldr	r5, [pc, #56]	; (8005468 <setOutputNoteValue.part.1+0x44>)
 800542e:	0084      	lsls	r4, r0, #2
 8005430:	192b      	adds	r3, r5, r4
 8005432:	5928      	ldr	r0, [r5, r4]

		if(noteVel)
 8005434:	b141      	cbz	r1, 8005448 <setOutputNoteValue.part.1+0x24>
	if(out->htim != NULL)
 8005436:	b190      	cbz	r0, 800545e <setOutputNoteValue.part.1+0x3a>
		HAL_TIM_PWM_Start(out->htim,out->timChannel);
 8005438:	8899      	ldrh	r1, [r3, #4]
		out->outputEnabled = 1;
 800543a:	442c      	add	r4, r5
		HAL_TIM_PWM_Start(out->htim,out->timChannel);
 800543c:	f7fd fb6a 	bl	8002b14 <HAL_TIM_PWM_Start>
		out->outputEnabled = 1;
 8005440:	f240 1301 	movw	r3, #257	; 0x101
 8005444:	8363      	strh	r3, [r4, #26]
		else
		{
			setOutputOff(out);
		}
	}
}
 8005446:	bd70      	pop	{r4, r5, r6, pc}
	if(out->htim != NULL)
 8005448:	b910      	cbnz	r0, 8005450 <setOutputNoteValue.part.1+0x2c>
		out->outputEnabled = 0;
 800544a:	442c      	add	r4, r5
 800544c:	8360      	strh	r0, [r4, #26]
}
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	460e      	mov	r6, r1
		out->outputEnabled = 0;
 8005452:	442c      	add	r4, r5
		HAL_TIM_PWM_Stop(out->htim,out->timChannel);
 8005454:	8899      	ldrh	r1, [r3, #4]
 8005456:	f7fd fb5f 	bl	8002b18 <HAL_TIM_PWM_Stop>
		out->outputEnabled = 0;
 800545a:	8366      	strh	r6, [r4, #26]
}
 800545c:	bd70      	pop	{r4, r5, r6, pc}
		out->outputEnabled = 1;
 800545e:	442c      	add	r4, r5
 8005460:	f240 1301 	movw	r3, #257	; 0x101
 8005464:	8363      	strh	r3, [r4, #26]
}
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	20000838 	.word	0x20000838

0800546c <initializeOutputs>:
	out->htim = NULL;
 800546c:	4bf0      	ldr	r3, [pc, #960]	; (8005830 <initializeOutputs+0x3c4>)
 800546e:	2200      	movs	r2, #0
	out->outType = outType;
 8005470:	2101      	movs	r1, #1
	out->gpio = gpio;
 8005472:	f8df c3e8 	ldr.w	ip, [pc, #1000]	; 800585c <initializeOutputs+0x3f0>
	out->deviceAddress = deviceAddress;
 8005476:	2042      	movs	r0, #66	; 0x42
{
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	out->gpio = gpio;
 800547c:	4fed      	ldr	r7, [pc, #948]	; (8005834 <initializeOutputs+0x3c8>)
	out->deviceAddress = deviceAddress;
 800547e:	2440      	movs	r4, #64	; 0x40
	out->hi2c = hi2c;
 8005480:	4ded      	ldr	r5, [pc, #948]	; (8005838 <initializeOutputs+0x3cc>)
	out->gpio = gpio;
 8005482:	f8df b3dc 	ldr.w	fp, [pc, #988]	; 8005860 <initializeOutputs+0x3f4>
	out->htim = htim;
 8005486:	4eed      	ldr	r6, [pc, #948]	; (800583c <initializeOutputs+0x3d0>)
	out->gpio = gpio;
 8005488:	f8df a3d8 	ldr.w	sl, [pc, #984]	; 8005864 <initializeOutputs+0x3f8>
 800548c:	f8df 93d8 	ldr.w	r9, [pc, #984]	; 8005868 <initializeOutputs+0x3fc>
 8005490:	615f      	str	r7, [r3, #20]
	out->gpio = NULL;
 8005492:	f44f 0740 	mov.w	r7, #12582912	; 0xc00000
	out->gpio = gpio;
 8005496:	f8c3 a030 	str.w	sl, [r3, #48]	; 0x30
 800549a:	f10a 0a18 	add.w	sl, sl, #24
 800549e:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 80054a2:	f1a9 090c 	sub.w	r9, r9, #12
	out->hi2c = hi2c;
 80054a6:	609d      	str	r5, [r3, #8]
 80054a8:	625d      	str	r5, [r3, #36]	; 0x24
 80054aa:	641d      	str	r5, [r3, #64]	; 0x40
	out->hi2c = hi2c;
 80054ac:	65dd      	str	r5, [r3, #92]	; 0x5c
	out->deviceAddress = deviceAddress;
 80054ae:	731c      	strb	r4, [r3, #12]
 80054b0:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
 80054b4:	f883 4044 	strb.w	r4, [r3, #68]	; 0x44
	out->deviceAddress = deviceAddress;
 80054b8:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
	out->htim = htim;
 80054bc:	655e      	str	r6, [r3, #84]	; 0x54
	out->htim = NULL;
 80054be:	601a      	str	r2, [r3, #0]
	out->timChannel = 0;
 80054c0:	809a      	strh	r2, [r3, #4]
	out->outputEnabled = 0;
 80054c2:	769a      	strb	r2, [r3, #26]
	out->isOutputSetByNoteOn = 0;
 80054c4:	76da      	strb	r2, [r3, #27]
	out->htim = NULL;
 80054c6:	61da      	str	r2, [r3, #28]
	out->timChannel = 0;
 80054c8:	841a      	strh	r2, [r3, #32]
	out->outputEnabled = 0;
 80054ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	out->isOutputSetByNoteOn = 0;
 80054ce:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	out->htim = NULL;
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
	out->timChannel = 0;
 80054d4:	879a      	strh	r2, [r3, #60]	; 0x3c
	out->outputEnabled = 0;
 80054d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	out->timChannel = timChannel;
 80054da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	out->gpio = NULL;
 80054de:	665a      	str	r2, [r3, #100]	; 0x64
	out->gpio = gpio;
 80054e0:	f8c3 b010 	str.w	fp, [r3, #16]
 80054e4:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
 80054e8:	f8c3 b048 	str.w	fp, [r3, #72]	; 0x48
	out->outType = outType;
 80054ec:	7659      	strb	r1, [r3, #25]
 80054ee:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
 80054f2:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
	out->gpio = NULL;
 80054f6:	669f      	str	r7, [r3, #104]	; 0x68
 80054f8:	f04f 7740 	mov.w	r7, #50331648	; 0x3000000
	out->htim = htim;
 80054fc:	671e      	str	r6, [r3, #112]	; 0x70
	out->timChannel = timChannel;
 80054fe:	f04f 0604 	mov.w	r6, #4
	out->gpio = gpio;
 8005502:	f8df 8368 	ldr.w	r8, [pc, #872]	; 800586c <initializeOutputs+0x400>
	out->timChannel = timChannel;
 8005506:	f8a3 6074 	strh.w	r6, [r3, #116]	; 0x74
	out->gpio = NULL;
 800550a:	f04f 7640 	mov.w	r6, #50331648	; 0x3000000
	out->gpio = gpio;
 800550e:	f8df e360 	ldr.w	lr, [pc, #864]	; 8005870 <initializeOutputs+0x404>
	out->gpio = NULL;
 8005512:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
	out->gpio = gpio;
 8005516:	4eca      	ldr	r6, [pc, #808]	; (8005840 <initializeOutputs+0x3d4>)
	out->hi2c = hi2c;
 8005518:	679d      	str	r5, [r3, #120]	; 0x78
	out->deviceAddress = deviceAddress;
 800551a:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	out->hi2c = hi2c;
 800551e:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	out->deviceAddress = deviceAddress;
 8005522:	f883 4098 	strb.w	r4, [r3, #152]	; 0x98
	out->hi2c = hi2c;
 8005526:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
	out->deviceAddress = deviceAddress;
 800552a:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	out->hi2c = hi2c;
 800552e:	f8c3 50cc 	str.w	r5, [r3, #204]	; 0xcc
	out->deviceAddress = deviceAddress;
 8005532:	f883 40d0 	strb.w	r4, [r3, #208]	; 0xd0
	out->gpio = gpio;
 8005536:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
 800553a:	f8c3 c0bc 	str.w	ip, [r3, #188]	; 0xbc
 800553e:	f8c3 809c 	str.w	r8, [r3, #156]	; 0x9c
	out->outType = outType;
 8005542:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
	out->outputEnabled = 0;
 8005546:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	out->gpio = NULL;
 800554a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	out->outType = outType;
 800554e:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
	out->outputEnabled = 0;
 8005552:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	out->isOutputSetByNoteOn = 0;
 8005556:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	out->htim = NULL;
 800555a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	out->timChannel = 0;
 800555e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	out->outType = outType;
 8005562:	f883 10a5 	strb.w	r1, [r3, #165]	; 0xa5
	out->outputEnabled = 0;
 8005566:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	out->isOutputSetByNoteOn = 0;
 800556a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	out->htim = NULL;
 800556e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	out->timChannel = 0;
 8005572:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	out->outType = outType;
 8005576:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
	out->outputEnabled = 0;
 800557a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	out->isOutputSetByNoteOn = 0;
 800557e:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	out->htim = NULL;
 8005582:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	out->timChannel = 0;
 8005586:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	out->gpio = gpio;
 800558a:	f8c3 80b8 	str.w	r8, [r3, #184]	; 0xb8
 800558e:	f8c3 60d8 	str.w	r6, [r3, #216]	; 0xd8
 8005592:	4eac      	ldr	r6, [pc, #688]	; (8005844 <initializeOutputs+0x3d8>)
 8005594:	f8c3 80d4 	str.w	r8, [r3, #212]	; 0xd4
 8005598:	f8c3 60f4 	str.w	r6, [r3, #244]	; 0xf4
 800559c:	4eaa      	ldr	r6, [pc, #680]	; (8005848 <initializeOutputs+0x3dc>)
	out->hi2c = hi2c;
 800559e:	f8c3 50e8 	str.w	r5, [r3, #232]	; 0xe8
	out->gpio = gpio;
 80055a2:	f8c3 80f0 	str.w	r8, [r3, #240]	; 0xf0
	out->hi2c = hi2c;
 80055a6:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	out->gpio = gpio;
 80055aa:	f8c3 810c 	str.w	r8, [r3, #268]	; 0x10c
	out->hi2c = hi2c;
 80055ae:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
	out->gpio = gpio;
 80055b2:	f8c3 8128 	str.w	r8, [r3, #296]	; 0x128
 80055b6:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 80055ba:	f8c3 912c 	str.w	r9, [r3, #300]	; 0x12c
	out->timChannel = timChannel;
 80055be:	f04f 0908 	mov.w	r9, #8
	out->outType = outType;
 80055c2:	f883 10dd 	strb.w	r1, [r3, #221]	; 0xdd
	out->outputEnabled = 0;
 80055c6:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
	out->isOutputSetByNoteOn = 0;
 80055ca:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	out->htim = NULL;
 80055ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	out->timChannel = 0;
 80055d2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	out->outType = outType;
 80055d6:	f883 10f9 	strb.w	r1, [r3, #249]	; 0xf9
	out->outputEnabled = 0;
 80055da:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	out->isOutputSetByNoteOn = 0;
 80055de:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
	out->htim = NULL;
 80055e2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	out->timChannel = 0;
 80055e6:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	out->outType = outType;
 80055ea:	f883 1115 	strb.w	r1, [r3, #277]	; 0x115
	out->outputEnabled = 0;
 80055ee:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
	out->isOutputSetByNoteOn = 0;
 80055f2:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	out->htim = NULL;
 80055f6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	out->timChannel = 0;
 80055fa:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	out->outType = outType;
 80055fe:	f883 1131 	strb.w	r1, [r3, #305]	; 0x131
	out->outputEnabled = 0;
 8005602:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	out->isOutputSetByNoteOn = 0;
 8005606:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	out->htim = NULL;
 800560a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	out->deviceAddress = deviceAddress;
 800560e:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8005612:	f883 0108 	strb.w	r0, [r3, #264]	; 0x108
 8005616:	f883 0124 	strb.w	r0, [r3, #292]	; 0x124
	out->gpio = NULL;
 800561a:	f8c3 7164 	str.w	r7, [r3, #356]	; 0x164
	out->timChannel = timChannel;
 800561e:	f04f 0704 	mov.w	r7, #4
	out->htim = htim;
 8005622:	f8df c250 	ldr.w	ip, [pc, #592]	; 8005874 <initializeOutputs+0x408>
	out->timChannel = timChannel;
 8005626:	f8a3 7170 	strh.w	r7, [r3, #368]	; 0x170
	out->gpio = NULL;
 800562a:	f04f 6740 	mov.w	r7, #201326592	; 0xc000000
	out->gpio = gpio;
 800562e:	f8df e248 	ldr.w	lr, [pc, #584]	; 8005878 <initializeOutputs+0x40c>
	out->gpio = NULL;
 8005632:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
 8005636:	f04f 5740 	mov.w	r7, #805306368	; 0x30000000
	out->hi2c = hi2c;
 800563a:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
	out->gpio = NULL;
 800563e:	f8c3 719c 	str.w	r7, [r3, #412]	; 0x19c
	out->timChannel = timChannel;
 8005642:	f04f 070c 	mov.w	r7, #12
	out->gpio = gpio;
 8005646:	f8c3 8144 	str.w	r8, [r3, #324]	; 0x144
	out->hi2c = hi2c;
 800564a:	f8c3 5158 	str.w	r5, [r3, #344]	; 0x158
 800564e:	f8c3 5174 	str.w	r5, [r3, #372]	; 0x174
 8005652:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
	out->gpio = gpio;
 8005656:	f8c3 e148 	str.w	lr, [r3, #328]	; 0x148
	out->htim = htim;
 800565a:	f8c3 c150 	str.w	ip, [r3, #336]	; 0x150
 800565e:	f8c3 c16c 	str.w	ip, [r3, #364]	; 0x16c
 8005662:	f8c3 c188 	str.w	ip, [r3, #392]	; 0x188
 8005666:	f8c3 c1a4 	str.w	ip, [r3, #420]	; 0x1a4
	out->timChannel = timChannel;
 800566a:	f8a3 918c 	strh.w	r9, [r3, #396]	; 0x18c
	out->timChannel = 0;
 800566e:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	out->deviceAddress = deviceAddress;
 8005672:	f883 0140 	strb.w	r0, [r3, #320]	; 0x140
	out->outType = outType;
 8005676:	f883 114d 	strb.w	r1, [r3, #333]	; 0x14d
	out->outputEnabled = 0;
 800567a:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	out->timChannel = timChannel;
 800567e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	out->deviceAddress = deviceAddress;
 8005682:	f883 015c 	strb.w	r0, [r3, #348]	; 0x15c
	out->gpio = NULL;
 8005686:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	out->outType = outType;
 800568a:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
	out->outputEnabled = 0;
 800568e:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
	out->deviceAddress = deviceAddress;
 8005692:	f883 0178 	strb.w	r0, [r3, #376]	; 0x178
	out->gpio = NULL;
 8005696:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	out->outType = outType;
 800569a:	f883 1185 	strb.w	r1, [r3, #389]	; 0x185
	out->outputEnabled = 0;
 800569e:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
	out->deviceAddress = deviceAddress;
 80056a2:	f883 0194 	strb.w	r0, [r3, #404]	; 0x194
	out->gpio = NULL;
 80056a6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	out->outType = outType;
 80056aa:	f883 11a1 	strb.w	r1, [r3, #417]	; 0x1a1
	out->outputEnabled = 0;
 80056ae:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
	out->timChannel = timChannel;
 80056b2:	f8a3 71a8 	strh.w	r7, [r3, #424]	; 0x1a8
	out->gpio = NULL;
 80056b6:	f04f 4740 	mov.w	r7, #3221225472	; 0xc0000000
	out->hi2c = hi2c;
 80056ba:	4e64      	ldr	r6, [pc, #400]	; (800584c <initializeOutputs+0x3e0>)
	out->hi2c = hi2c;
 80056bc:	f8c3 51ac 	str.w	r5, [r3, #428]	; 0x1ac
	out->gpio = gpio;
 80056c0:	f8c3 a1f0 	str.w	sl, [r3, #496]	; 0x1f0
	out->gpio = NULL;
 80056c4:	f44f 1a40 	mov.w	sl, #3145728	; 0x300000
	out->gpio = gpio;
 80056c8:	4d61      	ldr	r5, [pc, #388]	; (8005850 <initializeOutputs+0x3e4>)
	out->gpio = NULL;
 80056ca:	f8c3 71b8 	str.w	r7, [r3, #440]	; 0x1b8
	out->htim = htim;
 80056ce:	4f61      	ldr	r7, [pc, #388]	; (8005854 <initializeOutputs+0x3e8>)
	out->deviceAddress = deviceAddress;
 80056d0:	f883 41cc 	strb.w	r4, [r3, #460]	; 0x1cc
	out->gpio = gpio;
 80056d4:	f8c3 81d0 	str.w	r8, [r3, #464]	; 0x1d0
	out->deviceAddress = deviceAddress;
 80056d8:	f883 41e8 	strb.w	r4, [r3, #488]	; 0x1e8
	out->gpio = gpio;
 80056dc:	f8c3 81ec 	str.w	r8, [r3, #492]	; 0x1ec
	out->timChannel = timChannel;
 80056e0:	f8a3 91fc 	strh.w	r9, [r3, #508]	; 0x1fc
	out->deviceAddress = deviceAddress;
 80056e4:	f883 4204 	strb.w	r4, [r3, #516]	; 0x204
	out->gpio = gpio;
 80056e8:	f8c3 51d4 	str.w	r5, [r3, #468]	; 0x1d4
	out->hi2c = hi2c;
 80056ec:	f8c3 61c8 	str.w	r6, [r3, #456]	; 0x1c8
 80056f0:	f8c3 61e4 	str.w	r6, [r3, #484]	; 0x1e4
	out->hi2c = hi2c;
 80056f4:	f8c3 6200 	str.w	r6, [r3, #512]	; 0x200
	out->htim = htim;
 80056f8:	f8c3 71f8 	str.w	r7, [r3, #504]	; 0x1f8
 80056fc:	f8c3 7214 	str.w	r7, [r3, #532]	; 0x214
	out->deviceAddress = deviceAddress;
 8005700:	f883 01b0 	strb.w	r0, [r3, #432]	; 0x1b0
	out->gpio = NULL;
 8005704:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	out->outType = outType;
 8005708:	f883 11bd 	strb.w	r1, [r3, #445]	; 0x1bd
	out->outputEnabled = 0;
 800570c:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
	out->isOutputSetByNoteOn = 0;
 8005710:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
	out->htim = NULL;
 8005714:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	out->timChannel = 0;
 8005718:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	out->outType = outType;
 800571c:	f883 11d9 	strb.w	r1, [r3, #473]	; 0x1d9
	out->outputEnabled = 0;
 8005720:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	out->isOutputSetByNoteOn = 0;
 8005724:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
	out->htim = NULL;
 8005728:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	out->timChannel = 0;
 800572c:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
	out->outType = outType;
 8005730:	f883 11f5 	strb.w	r1, [r3, #501]	; 0x1f5
	out->outputEnabled = 0;
 8005734:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
	out->gpio = NULL;
 8005738:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	out->outType = outType;
 800573c:	f883 1211 	strb.w	r1, [r3, #529]	; 0x211
	out->outputEnabled = 0;
 8005740:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
	out->gpio = NULL;
 8005744:	f8c3 a20c 	str.w	sl, [r3, #524]	; 0x20c
	out->timChannel = timChannel;
 8005748:	f04f 0a0c 	mov.w	sl, #12
	out->gpio = gpio;
 800574c:	f8df e12c 	ldr.w	lr, [pc, #300]	; 800587c <initializeOutputs+0x410>
	out->timChannel = timChannel;
 8005750:	f8a3 a218 	strh.w	sl, [r3, #536]	; 0x218
	out->gpio = NULL;
 8005754:	f44f 0a40 	mov.w	sl, #12582912	; 0xc00000
	out->gpio = gpio;
 8005758:	f8df c124 	ldr.w	ip, [pc, #292]	; 8005880 <initializeOutputs+0x414>
	out->gpio = NULL;
 800575c:	4657      	mov	r7, sl
	out->gpio = gpio;
 800575e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8005884 <initializeOutputs+0x418>
	out->hi2c = hi2c;
 8005762:	f8c3 621c 	str.w	r6, [r3, #540]	; 0x21c
	out->gpio = gpio;
 8005766:	f107 577d 	add.w	r7, r7, #1061158912	; 0x3f400000
	out->deviceAddress = deviceAddress;
 800576a:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
	out->gpio = NULL;
 800576e:	f8c3 a228 	str.w	sl, [r3, #552]	; 0x228
	out->gpio = gpio;
 8005772:	f507 3701 	add.w	r7, r7, #132096	; 0x20400
	out->hi2c = hi2c;
 8005776:	f8c3 6238 	str.w	r6, [r3, #568]	; 0x238
	out->deviceAddress = deviceAddress;
 800577a:	f883 423c 	strb.w	r4, [r3, #572]	; 0x23c
	out->hi2c = hi2c;
 800577e:	f8c3 6254 	str.w	r6, [r3, #596]	; 0x254
	out->deviceAddress = deviceAddress;
 8005782:	f883 4258 	strb.w	r4, [r3, #600]	; 0x258
	out->hi2c = hi2c;
 8005786:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	out->deviceAddress = deviceAddress;
 800578a:	f883 4274 	strb.w	r4, [r3, #628]	; 0x274
	out->gpio = gpio;
 800578e:	f8c3 e244 	str.w	lr, [r3, #580]	; 0x244
	out->gpio = NULL;
 8005792:	f04f 4e40 	mov.w	lr, #3221225472	; 0xc0000000
	out->gpio = gpio;
 8005796:	f8c3 c260 	str.w	ip, [r3, #608]	; 0x260
 800579a:	f8c3 927c 	str.w	r9, [r3, #636]	; 0x27c
	out->gpio = NULL;
 800579e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	out->outType = outType;
 80057a2:	f883 122d 	strb.w	r1, [r3, #557]	; 0x22d
	out->outputEnabled = 0;
 80057a6:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
	out->isOutputSetByNoteOn = 0;
 80057aa:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
	out->htim = NULL;
 80057ae:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	out->timChannel = 0;
 80057b2:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	out->outType = outType;
 80057b6:	f883 1249 	strb.w	r1, [r3, #585]	; 0x249
	out->outputEnabled = 0;
 80057ba:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
	out->isOutputSetByNoteOn = 0;
 80057be:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
	out->htim = NULL;
 80057c2:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	out->timChannel = 0;
 80057c6:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
	out->gpio = gpio;
 80057ca:	f8c3 b25c 	str.w	fp, [r3, #604]	; 0x25c
	out->outType = outType;
 80057ce:	f883 1265 	strb.w	r1, [r3, #613]	; 0x265
	out->outputEnabled = 0;
 80057d2:	f883 2266 	strb.w	r2, [r3, #614]	; 0x266
	out->isOutputSetByNoteOn = 0;
 80057d6:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
	out->htim = NULL;
 80057da:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	out->timChannel = 0;
 80057de:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
	out->gpio = gpio;
 80057e2:	f8c3 b278 	str.w	fp, [r3, #632]	; 0x278
	out->outType = outType;
 80057e6:	f883 1281 	strb.w	r1, [r3, #641]	; 0x281
	out->gpio = gpio;
 80057ea:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 80057ee:	f44f 3741 	mov.w	r7, #197632	; 0x30400
	out->htim = htim;
 80057f2:	4d19      	ldr	r5, [pc, #100]	; (8005858 <initializeOutputs+0x3ec>)
	out->gpio = NULL;
 80057f4:	f8c3 e298 	str.w	lr, [r3, #664]	; 0x298
	out->timChannel = timChannel;
 80057f8:	f04f 0e04 	mov.w	lr, #4
	out->gpio = gpio;
 80057fc:	f8c3 72b4 	str.w	r7, [r3, #692]	; 0x2b4
	out->gpio = NULL;
 8005800:	f44f 2740 	mov.w	r7, #786432	; 0xc0000
	out->hi2c = hi2c;
 8005804:	f8c3 628c 	str.w	r6, [r3, #652]	; 0x28c
	out->deviceAddress = deviceAddress;
 8005808:	f883 4290 	strb.w	r4, [r3, #656]	; 0x290
	out->hi2c = hi2c;
 800580c:	f8c3 62a8 	str.w	r6, [r3, #680]	; 0x2a8
	out->timChannel = timChannel;
 8005810:	f8a3 e2c0 	strh.w	lr, [r3, #704]	; 0x2c0
	out->hi2c = hi2c;
 8005814:	f8c3 62c4 	str.w	r6, [r3, #708]	; 0x2c4
	out->hi2c = hi2c;
 8005818:	f8c3 62e0 	str.w	r6, [r3, #736]	; 0x2e0
	out->htim = htim;
 800581c:	f8c3 5284 	str.w	r5, [r3, #644]	; 0x284
 8005820:	f8c3 52bc 	str.w	r5, [r3, #700]	; 0x2bc
	out->outputEnabled = 0;
 8005824:	f8a3 2282 	strh.w	r2, [r3, #642]	; 0x282
	out->timChannel = timChannel;
 8005828:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
 800582c:	e02c      	b.n	8005888 <initializeOutputs+0x41c>
 800582e:	bf00      	nop
 8005830:	20000838 	.word	0x20000838
 8005834:	00030004 	.word	0x00030004
 8005838:	20000778 	.word	0x20000778
 800583c:	20001184 	.word	0x20001184
 8005840:	c0008000 	.word	0xc0008000
 8005844:	00030001 	.word	0x00030001
 8005848:	000c0002 	.word	0x000c0002
 800584c:	200007c4 	.word	0x200007c4
 8005850:	00030010 	.word	0x00030010
 8005854:	20001044 	.word	0x20001044
 8005858:	20001144 	.word	0x20001144
 800585c:	30004000 	.word	0x30004000
 8005860:	40021000 	.word	0x40021000
 8005864:	000c0008 	.word	0x000c0008
 8005868:	00300010 	.word	0x00300010
 800586c:	40020800 	.word	0x40020800
 8005870:	0c002000 	.word	0x0c002000
 8005874:	20001004 	.word	0x20001004
 8005878:	00c00008 	.word	0x00c00008
 800587c:	03000004 	.word	0x03000004
 8005880:	0c000080 	.word	0x0c000080
 8005884:	30000100 	.word	0x30000100
	out->gpio = NULL;
 8005888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	out->outType = outType;
 800588c:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
	out->outputEnabled = 0;
 8005890:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
	out->isOutputSetByNoteOn = 0;
 8005894:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
	out->htim = NULL;
 8005898:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	out->timChannel = 0;
 800589c:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	out->deviceAddress = deviceAddress;
 80058a0:	f883 02ac 	strb.w	r0, [r3, #684]	; 0x2ac
	out->gpio = gpio;
 80058a4:	f8c3 b2b0 	str.w	fp, [r3, #688]	; 0x2b0
	out->outType = outType;
 80058a8:	f883 12b9 	strb.w	r1, [r3, #697]	; 0x2b9
	out->outputEnabled = 0;
 80058ac:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
	out->isOutputSetByNoteOn = 0;
 80058b0:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
	out->deviceAddress = deviceAddress;
 80058b4:	f883 02c8 	strb.w	r0, [r3, #712]	; 0x2c8
	out->gpio = NULL;
 80058b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	out->outType = outType;
 80058bc:	f883 12d5 	strb.w	r1, [r3, #725]	; 0x2d5
	out->outputEnabled = 0;
 80058c0:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	out->isOutputSetByNoteOn = 0;
 80058c4:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
	out->htim = NULL;
 80058c8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	out->timChannel = 0;
 80058cc:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	out->deviceAddress = deviceAddress;
 80058d0:	f883 02e4 	strb.w	r0, [r3, #740]	; 0x2e4
	out->gpio = gpio;
 80058d4:	f8c3 b2e8 	str.w	fp, [r3, #744]	; 0x2e8
	out->gpio = NULL;
 80058d8:	f8c3 72d0 	str.w	r7, [r3, #720]	; 0x2d0
 80058dc:	f44f 0740 	mov.w	r7, #12582912	; 0xc00000
	out->htim = htim;
 80058e0:	f8c3 52f4 	str.w	r5, [r3, #756]	; 0x2f4
 80058e4:	f8c3 5310 	str.w	r5, [r3, #784]	; 0x310
	out->timChannel = timChannel;
 80058e8:	f04f 050c 	mov.w	r5, #12
	out->gpio = gpio;
 80058ec:	f8df c420 	ldr.w	ip, [pc, #1056]	; 8005d10 <initializeOutputs+0x8a4>
	out->timChannel = timChannel;
 80058f0:	f8a3 5314 	strh.w	r5, [r3, #788]	; 0x314
	out->gpio = NULL;
 80058f4:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
	out->gpio = gpio;
 80058f8:	f8c3 c2ec 	str.w	ip, [r3, #748]	; 0x2ec
	out->timChannel = timChannel;
 80058fc:	f04f 0c08 	mov.w	ip, #8
	out->gpio = NULL;
 8005900:	f8c3 5324 	str.w	r5, [r3, #804]	; 0x324
	out->gpio = gpio;
 8005904:	4df5      	ldr	r5, [pc, #980]	; (8005cdc <initializeOutputs+0x870>)
	out->timChannel = timChannel;
 8005906:	f8a3 c2f8 	strh.w	ip, [r3, #760]	; 0x2f8
	out->hi2c = hi2c;
 800590a:	f8c3 62fc 	str.w	r6, [r3, #764]	; 0x2fc
	out->gpio = NULL;
 800590e:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
	out->hi2c = hi2c;
 8005912:	f8c3 6318 	str.w	r6, [r3, #792]	; 0x318
	out->hi2c = hi2c;
 8005916:	f8c3 6334 	str.w	r6, [r3, #820]	; 0x334
 800591a:	f8c3 6350 	str.w	r6, [r3, #848]	; 0x350
	out->outType = outType;
 800591e:	f883 12f1 	strb.w	r1, [r3, #753]	; 0x2f1
	out->outputEnabled = 0;
 8005922:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2
	out->deviceAddress = deviceAddress;
 8005926:	f883 0300 	strb.w	r0, [r3, #768]	; 0x300
	out->gpio = NULL;
 800592a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	out->outType = outType;
 800592e:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
	out->outputEnabled = 0;
 8005932:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
	out->deviceAddress = deviceAddress;
 8005936:	f883 031c 	strb.w	r0, [r3, #796]	; 0x31c
	out->gpio = NULL;
 800593a:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	out->outType = outType;
 800593e:	f883 1329 	strb.w	r1, [r3, #809]	; 0x329
	out->outputEnabled = 0;
 8005942:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
	out->isOutputSetByNoteOn = 0;
 8005946:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
	out->htim = NULL;
 800594a:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	out->timChannel = 0;
 800594e:	f8a3 2330 	strh.w	r2, [r3, #816]	; 0x330
	out->deviceAddress = deviceAddress;
 8005952:	f883 0338 	strb.w	r0, [r3, #824]	; 0x338
	out->gpio = gpio;
 8005956:	f8c3 b33c 	str.w	fp, [r3, #828]	; 0x33c
	out->outType = outType;
 800595a:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
	out->outputEnabled = 0;
 800595e:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
	out->isOutputSetByNoteOn = 0;
 8005962:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
	out->htim = NULL;
 8005966:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	out->timChannel = 0;
 800596a:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
	out->deviceAddress = deviceAddress;
 800596e:	f883 0354 	strb.w	r0, [r3, #852]	; 0x354
	out->gpio = gpio;
 8005972:	f8c3 5340 	str.w	r5, [r3, #832]	; 0x340
 8005976:	f105 5550 	add.w	r5, r5, #872415232	; 0x34000000
 800597a:	f8df 9398 	ldr.w	r9, [pc, #920]	; 8005d14 <initializeOutputs+0x8a8>
 800597e:	f505 35c2 	add.w	r5, r5, #99328	; 0x18400
	out->hi2c = hi2c;
 8005982:	f8df c394 	ldr.w	ip, [pc, #916]	; 8005d18 <initializeOutputs+0x8ac>
	out->htim = htim;
 8005986:	f8df e394 	ldr.w	lr, [pc, #916]	; 8005d1c <initializeOutputs+0x8b0>
	out->gpio = gpio;
 800598a:	f8c3 5358 	str.w	r5, [r3, #856]	; 0x358
 800598e:	f8c3 5374 	str.w	r5, [r3, #884]	; 0x374
	out->timChannel = timChannel;
 8005992:	f04f 0504 	mov.w	r5, #4
	out->gpio = gpio;
 8005996:	f8df a388 	ldr.w	sl, [pc, #904]	; 8005d20 <initializeOutputs+0x8b4>
	out->hi2c = hi2c;
 800599a:	f8c3 636c 	str.w	r6, [r3, #876]	; 0x36c
	out->timChannel = timChannel;
 800599e:	f8a3 53a0 	strh.w	r5, [r3, #928]	; 0x3a0
	out->pin = 0;
 80059a2:	f44f 2540 	mov.w	r5, #786432	; 0xc0000
	out->gpio = gpio;
 80059a6:	4ece      	ldr	r6, [pc, #824]	; (8005ce0 <initializeOutputs+0x874>)
 80059a8:	f8c3 9378 	str.w	r9, [r3, #888]	; 0x378
	out->gpio = NULL;
 80059ac:	f44f 3940 	mov.w	r9, #196608	; 0x30000
	out->deviceAddress = deviceAddress;
 80059b0:	f883 438c 	strb.w	r4, [r3, #908]	; 0x38c
 80059b4:	f883 43a8 	strb.w	r4, [r3, #936]	; 0x3a8
	out->pin = 0;
 80059b8:	f8c3 53b0 	str.w	r5, [r3, #944]	; 0x3b0
	out->gpio = gpio;
 80059bc:	f8c3 a35c 	str.w	sl, [r3, #860]	; 0x35c
 80059c0:	4dc8      	ldr	r5, [pc, #800]	; (8005ce4 <initializeOutputs+0x878>)
	out->htim = htim;
 80059c2:	f8c3 e380 	str.w	lr, [r3, #896]	; 0x380
 80059c6:	f8c3 e39c 	str.w	lr, [r3, #924]	; 0x39c
	out->timChannel = timChannel;
 80059ca:	f04f 0e0c 	mov.w	lr, #12
	out->hi2c = hi2c;
 80059ce:	f8c3 c388 	str.w	ip, [r3, #904]	; 0x388
 80059d2:	f8c3 c3a4 	str.w	ip, [r3, #932]	; 0x3a4
	out->hi2c = hi2c;
 80059d6:	f8c3 c3c0 	str.w	ip, [r3, #960]	; 0x3c0
	out->outType = outType;
 80059da:	f883 1361 	strb.w	r1, [r3, #865]	; 0x361
	out->outputEnabled = 0;
 80059de:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
	out->isOutputSetByNoteOn = 0;
 80059e2:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
	out->htim = NULL;
 80059e6:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
	out->timChannel = 0;
 80059ea:	f8a3 2368 	strh.w	r2, [r3, #872]	; 0x368
	out->deviceAddress = deviceAddress;
 80059ee:	f883 0370 	strb.w	r0, [r3, #880]	; 0x370
	out->outType = outType;
 80059f2:	f883 137d 	strb.w	r1, [r3, #893]	; 0x37d
	out->outputEnabled = 0;
 80059f6:	f8a3 237e 	strh.w	r2, [r3, #894]	; 0x37e
	out->timChannel = timChannel;
 80059fa:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
	out->gpio = NULL;
 80059fe:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	out->outType = outType;
 8005a02:	f883 1399 	strb.w	r1, [r3, #921]	; 0x399
	out->outputEnabled = 0;
 8005a06:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
	out->gpio = NULL;
 8005a0a:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
	out->outType = outType;
 8005a0e:	f883 13b5 	strb.w	r1, [r3, #949]	; 0x3b5
	out->outputEnabled = 0;
 8005a12:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
	out->isOutputSetByNoteOn = 0;
 8005a16:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
	out->htim = NULL;
 8005a1a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	out->timChannel = 0;
 8005a1e:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	out->gpio = NULL;
 8005a22:	f8c3 9394 	str.w	r9, [r3, #916]	; 0x394
	out->gpio = gpio;
 8005a26:	f8c3 63c8 	str.w	r6, [r3, #968]	; 0x3c8
 8005a2a:	f8c3 63e4 	str.w	r6, [r3, #996]	; 0x3e4
 8005a2e:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
 8005a32:	f8c3 641c 	str.w	r6, [r3, #1052]	; 0x41c
 8005a36:	4eac      	ldr	r6, [pc, #688]	; (8005ce8 <initializeOutputs+0x87c>)
 8005a38:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 8005d24 <initializeOutputs+0x8b8>
 8005a3c:	4fab      	ldr	r7, [pc, #684]	; (8005cec <initializeOutputs+0x880>)
 8005a3e:	f8c3 5420 	str.w	r5, [r3, #1056]	; 0x420
 8005a42:	f8c3 63e8 	str.w	r6, [r3, #1000]	; 0x3e8
	out->timChannel = timChannel;
 8005a46:	f04f 0608 	mov.w	r6, #8
	out->htim = htim;
 8005a4a:	4da9      	ldr	r5, [pc, #676]	; (8005cf0 <initializeOutputs+0x884>)
	out->deviceAddress = deviceAddress;
 8005a4c:	f883 43c4 	strb.w	r4, [r3, #964]	; 0x3c4
	out->hi2c = hi2c;
 8005a50:	f8c3 c3dc 	str.w	ip, [r3, #988]	; 0x3dc
	out->deviceAddress = deviceAddress;
 8005a54:	f883 43e0 	strb.w	r4, [r3, #992]	; 0x3e0
	out->hi2c = hi2c;
 8005a58:	f8c3 c3f8 	str.w	ip, [r3, #1016]	; 0x3f8
	out->deviceAddress = deviceAddress;
 8005a5c:	f883 43fc 	strb.w	r4, [r3, #1020]	; 0x3fc
	out->hi2c = hi2c;
 8005a60:	f8c3 c414 	str.w	ip, [r3, #1044]	; 0x414
	out->deviceAddress = deviceAddress;
 8005a64:	f883 4418 	strb.w	r4, [r3, #1048]	; 0x418
	out->gpio = gpio;
 8005a68:	f8c3 73cc 	str.w	r7, [r3, #972]	; 0x3cc
	out->gpio = NULL;
 8005a6c:	f04f 5740 	mov.w	r7, #805306368	; 0x30000000
	out->gpio = gpio;
 8005a70:	f8c3 a404 	str.w	sl, [r3, #1028]	; 0x404
	out->outType = outType;
 8005a74:	f883 13d1 	strb.w	r1, [r3, #977]	; 0x3d1
	out->outputEnabled = 0;
 8005a78:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
	out->isOutputSetByNoteOn = 0;
 8005a7c:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
	out->htim = NULL;
 8005a80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
	out->timChannel = 0;
 8005a84:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
	out->outType = outType;
 8005a88:	f883 13ed 	strb.w	r1, [r3, #1005]	; 0x3ed
	out->outputEnabled = 0;
 8005a8c:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
	out->isOutputSetByNoteOn = 0;
 8005a90:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
	out->htim = NULL;
 8005a94:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	out->timChannel = 0;
 8005a98:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	out->outType = outType;
 8005a9c:	f883 1409 	strb.w	r1, [r3, #1033]	; 0x409
	out->outputEnabled = 0;
 8005aa0:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
	out->isOutputSetByNoteOn = 0;
 8005aa4:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
	out->htim = NULL;
 8005aa8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	out->timChannel = 0;
 8005aac:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	out->outType = outType;
 8005ab0:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
	out->outputEnabled = 0;
 8005ab4:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
	out->htim = htim;
 8005ab8:	f8c3 5428 	str.w	r5, [r3, #1064]	; 0x428
	out->timChannel = timChannel;
 8005abc:	f8a3 642c 	strh.w	r6, [r3, #1068]	; 0x42c
 8005ac0:	f04f 0608 	mov.w	r6, #8
	out->htim = htim;
 8005ac4:	f8c3 5444 	str.w	r5, [r3, #1092]	; 0x444
	out->gpio = NULL;
 8005ac8:	f04f 4540 	mov.w	r5, #3221225472	; 0xc0000000
	out->timChannel = timChannel;
 8005acc:	f8a3 e448 	strh.w	lr, [r3, #1096]	; 0x448
 8005ad0:	f04f 0e04 	mov.w	lr, #4
	out->htim = htim;
 8005ad4:	f8df 9250 	ldr.w	r9, [pc, #592]	; 8005d28 <initializeOutputs+0x8bc>
	out->gpio = NULL;
 8005ad8:	f8c3 5458 	str.w	r5, [r3, #1112]	; 0x458
 8005adc:	f44f 3540 	mov.w	r5, #196608	; 0x30000
	out->timChannel = timChannel;
 8005ae0:	f8a3 e480 	strh.w	lr, [r3, #1152]	; 0x480
	out->gpio = NULL;
 8005ae4:	f44f 2e40 	mov.w	lr, #786432	; 0xc0000
	out->timChannel = timChannel;
 8005ae8:	f8a3 649c 	strh.w	r6, [r3, #1180]	; 0x49c
	out->gpio = gpio;
 8005aec:	4e7e      	ldr	r6, [pc, #504]	; (8005ce8 <initializeOutputs+0x87c>)
	out->gpio = NULL;
 8005aee:	f8c3 743c 	str.w	r7, [r3, #1084]	; 0x43c
	out->hi2c = hi2c;
 8005af2:	f8c3 c430 	str.w	ip, [r3, #1072]	; 0x430
	out->deviceAddress = deviceAddress;
 8005af6:	f883 4434 	strb.w	r4, [r3, #1076]	; 0x434
	out->hi2c = hi2c;
 8005afa:	f8c3 c44c 	str.w	ip, [r3, #1100]	; 0x44c
	out->deviceAddress = deviceAddress;
 8005afe:	f883 4450 	strb.w	r4, [r3, #1104]	; 0x450
	out->hi2c = hi2c;
 8005b02:	f8c3 c468 	str.w	ip, [r3, #1128]	; 0x468
	out->gpio = NULL;
 8005b06:	f8c3 5474 	str.w	r5, [r3, #1140]	; 0x474
	out->hi2c = hi2c;
 8005b0a:	f8c3 c484 	str.w	ip, [r3, #1156]	; 0x484
	out->gpio = NULL;
 8005b0e:	f8c3 e490 	str.w	lr, [r3, #1168]	; 0x490
	out->gpio = gpio;
 8005b12:	448e      	add	lr, r1
	out->htim = htim;
 8005b14:	f8c3 9460 	str.w	r9, [r3, #1120]	; 0x460
 8005b18:	f8c3 947c 	str.w	r9, [r3, #1148]	; 0x47c
	out->gpio = NULL;
 8005b1c:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	out->outType = outType;
 8005b20:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
	out->outputEnabled = 0;
 8005b24:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
	out->gpio = NULL;
 8005b28:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
	out->outType = outType;
 8005b2c:	f883 145d 	strb.w	r1, [r3, #1117]	; 0x45d
	out->outputEnabled = 0;
 8005b30:	f8a3 245e 	strh.w	r2, [r3, #1118]	; 0x45e
	out->timChannel = timChannel;
 8005b34:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	out->deviceAddress = deviceAddress;
 8005b38:	f883 046c 	strb.w	r0, [r3, #1132]	; 0x46c
	out->gpio = NULL;
 8005b3c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
	out->outType = outType;
 8005b40:	f883 1479 	strb.w	r1, [r3, #1145]	; 0x479
	out->outputEnabled = 0;
 8005b44:	f8a3 247a 	strh.w	r2, [r3, #1146]	; 0x47a
	out->deviceAddress = deviceAddress;
 8005b48:	f883 0488 	strb.w	r0, [r3, #1160]	; 0x488
	out->gpio = NULL;
 8005b4c:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
	out->outType = outType;
 8005b50:	f883 1495 	strb.w	r1, [r3, #1173]	; 0x495
	out->outputEnabled = 0;
 8005b54:	f8a3 2496 	strh.w	r2, [r3, #1174]	; 0x496
	out->htim = htim;
 8005b58:	f8c3 9498 	str.w	r9, [r3, #1176]	; 0x498
	out->gpio = gpio;
 8005b5c:	f8c3 64c8 	str.w	r6, [r3, #1224]	; 0x4c8
	out->gpio = NULL;
 8005b60:	f44f 1640 	mov.w	r6, #3145728	; 0x300000
	out->gpio = gpio;
 8005b64:	4f63      	ldr	r7, [pc, #396]	; (8005cf4 <initializeOutputs+0x888>)
	out->gpio = NULL;
 8005b66:	f8c3 64ac 	str.w	r6, [r3, #1196]	; 0x4ac
	out->gpio = gpio;
 8005b6a:	4e5c      	ldr	r6, [pc, #368]	; (8005cdc <initializeOutputs+0x870>)
	out->hi2c = hi2c;
 8005b6c:	f8c3 c4a0 	str.w	ip, [r3, #1184]	; 0x4a0
	out->gpio = gpio;
 8005b70:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
 8005b74:	4e5a      	ldr	r6, [pc, #360]	; (8005ce0 <initializeOutputs+0x874>)
	out->hi2c = hi2c;
 8005b76:	f8c3 c4bc 	str.w	ip, [r3, #1212]	; 0x4bc
 8005b7a:	f8c3 c4d8 	str.w	ip, [r3, #1240]	; 0x4d8
	out->gpio = gpio;
 8005b7e:	f8c3 a4e4 	str.w	sl, [r3, #1252]	; 0x4e4
	out->hi2c = hi2c;
 8005b82:	f8c3 c4f4 	str.w	ip, [r3, #1268]	; 0x4f4
	out->deviceAddress = deviceAddress;
 8005b86:	f883 04a4 	strb.w	r0, [r3, #1188]	; 0x4a4
	out->gpio = NULL;
 8005b8a:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
	out->outType = outType;
 8005b8e:	f883 14b1 	strb.w	r1, [r3, #1201]	; 0x4b1
	out->outputEnabled = 0;
 8005b92:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
	out->isOutputSetByNoteOn = 0;
 8005b96:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
	out->htim = NULL;
 8005b9a:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	out->timChannel = 0;
 8005b9e:	f8a3 24b8 	strh.w	r2, [r3, #1208]	; 0x4b8
	out->deviceAddress = deviceAddress;
 8005ba2:	f883 04c0 	strb.w	r0, [r3, #1216]	; 0x4c0
	out->outType = outType;
 8005ba6:	f883 14cd 	strb.w	r1, [r3, #1229]	; 0x4cd
	out->outputEnabled = 0;
 8005baa:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
	out->isOutputSetByNoteOn = 0;
 8005bae:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
	out->htim = NULL;
 8005bb2:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
	out->timChannel = 0;
 8005bb6:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
	out->deviceAddress = deviceAddress;
 8005bba:	f883 04dc 	strb.w	r0, [r3, #1244]	; 0x4dc
	out->outType = outType;
 8005bbe:	f883 14e9 	strb.w	r1, [r3, #1257]	; 0x4e9
	out->outputEnabled = 0;
 8005bc2:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
	out->isOutputSetByNoteOn = 0;
 8005bc6:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
	out->htim = NULL;
 8005bca:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
	out->timChannel = 0;
 8005bce:	f8a3 24f0 	strh.w	r2, [r3, #1264]	; 0x4f0
	out->deviceAddress = deviceAddress;
 8005bd2:	f883 04f8 	strb.w	r0, [r3, #1272]	; 0x4f8
	out->outType = outType;
 8005bd6:	f883 1505 	strb.w	r1, [r3, #1285]	; 0x505
	out->outputEnabled = 0;
 8005bda:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
	out->gpio = gpio;
 8005bde:	f8c3 74c4 	str.w	r7, [r3, #1220]	; 0x4c4
 8005be2:	f8c3 74e0 	str.w	r7, [r3, #1248]	; 0x4e0
 8005be6:	f8c3 74fc 	str.w	r7, [r3, #1276]	; 0x4fc
 8005bea:	f8c3 656c 	str.w	r6, [r3, #1388]	; 0x56c
 8005bee:	4e42      	ldr	r6, [pc, #264]	; (8005cf8 <initializeOutputs+0x88c>)
	out->hi2c = hi2c;
 8005bf0:	4d42      	ldr	r5, [pc, #264]	; (8005cfc <initializeOutputs+0x890>)
	out->gpio = gpio;
 8005bf2:	f8c3 651c 	str.w	r6, [r3, #1308]	; 0x51c
 8005bf6:	4e42      	ldr	r6, [pc, #264]	; (8005d00 <initializeOutputs+0x894>)
	out->hi2c = hi2c;
 8005bf8:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
	out->gpio = gpio;
 8005bfc:	f8c3 6538 	str.w	r6, [r3, #1336]	; 0x538
 8005c00:	f44f 3644 	mov.w	r6, #200704	; 0x31000
 8005c04:	f8c3 8518 	str.w	r8, [r3, #1304]	; 0x518
 8005c08:	f8c3 6554 	str.w	r6, [r3, #1364]	; 0x554
 8005c0c:	4e34      	ldr	r6, [pc, #208]	; (8005ce0 <initializeOutputs+0x874>)
	out->hi2c = hi2c;
 8005c0e:	f8c3 c52c 	str.w	ip, [r3, #1324]	; 0x52c
	out->gpio = gpio;
 8005c12:	f8c3 8534 	str.w	r8, [r3, #1332]	; 0x534
	out->deviceAddress = deviceAddress;
 8005c16:	f883 454c 	strb.w	r4, [r3, #1356]	; 0x54c
	out->gpio = gpio;
 8005c1a:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
	out->deviceAddress = deviceAddress;
 8005c1e:	f883 4568 	strb.w	r4, [r3, #1384]	; 0x568
	out->isOutputSetByNoteOn = 0;
 8005c22:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
	out->htim = NULL;
 8005c26:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	out->timChannel = 0;
 8005c2a:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	out->deviceAddress = deviceAddress;
 8005c2e:	f883 0514 	strb.w	r0, [r3, #1300]	; 0x514
	out->outType = outType;
 8005c32:	f883 1521 	strb.w	r1, [r3, #1313]	; 0x521
	out->outputEnabled = 0;
 8005c36:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	out->isOutputSetByNoteOn = 0;
 8005c3a:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
	out->htim = NULL;
 8005c3e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	out->timChannel = 0;
 8005c42:	f8a3 2528 	strh.w	r2, [r3, #1320]	; 0x528
	out->deviceAddress = deviceAddress;
 8005c46:	f883 0530 	strb.w	r0, [r3, #1328]	; 0x530
	out->outType = outType;
 8005c4a:	f883 153d 	strb.w	r1, [r3, #1341]	; 0x53d
	out->outputEnabled = 0;
 8005c4e:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
	out->isOutputSetByNoteOn = 0;
 8005c52:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
	out->htim = NULL;
 8005c56:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	out->timChannel = 0;
 8005c5a:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	out->outType = outType;
 8005c5e:	f883 1559 	strb.w	r1, [r3, #1369]	; 0x559
	out->outputEnabled = 0;
 8005c62:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
	out->isOutputSetByNoteOn = 0;
 8005c66:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
	out->htim = NULL;
 8005c6a:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
	out->timChannel = 0;
 8005c6e:	f8a3 2560 	strh.w	r2, [r3, #1376]	; 0x560
	out->hi2c = hi2c;
 8005c72:	f8c3 5548 	str.w	r5, [r3, #1352]	; 0x548
 8005c76:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	out->gpio = gpio;
 8005c7a:	f8c3 6588 	str.w	r6, [r3, #1416]	; 0x588
 8005c7e:	f8c3 65a4 	str.w	r6, [r3, #1444]	; 0x5a4
 8005c82:	f8c3 65c0 	str.w	r6, [r3, #1472]	; 0x5c0
 8005c86:	4e1f      	ldr	r6, [pc, #124]	; (8005d04 <initializeOutputs+0x898>)
 8005c88:	f8c3 e570 	str.w	lr, [r3, #1392]	; 0x570
 8005c8c:	f8c3 658c 	str.w	r6, [r3, #1420]	; 0x58c
 8005c90:	4e1d      	ldr	r6, [pc, #116]	; (8005d08 <initializeOutputs+0x89c>)
	out->deviceAddress = deviceAddress;
 8005c92:	f883 4584 	strb.w	r4, [r3, #1412]	; 0x584
	out->gpio = gpio;
 8005c96:	f8c3 65a8 	str.w	r6, [r3, #1448]	; 0x5a8
 8005c9a:	4e1c      	ldr	r6, [pc, #112]	; (8005d0c <initializeOutputs+0x8a0>)
	out->deviceAddress = deviceAddress;
 8005c9c:	f883 45a0 	strb.w	r4, [r3, #1440]	; 0x5a0
 8005ca0:	f883 45bc 	strb.w	r4, [r3, #1468]	; 0x5bc
	out->outType = outType;
 8005ca4:	f883 1575 	strb.w	r1, [r3, #1397]	; 0x575
	out->outputEnabled = 0;
 8005ca8:	f8a3 2576 	strh.w	r2, [r3, #1398]	; 0x576
	out->htim = NULL;
 8005cac:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
	out->timChannel = 0;
 8005cb0:	f8a3 257c 	strh.w	r2, [r3, #1404]	; 0x57c
	out->hi2c = hi2c;
 8005cb4:	f8c3 5580 	str.w	r5, [r3, #1408]	; 0x580
	out->outType = outType;
 8005cb8:	f883 1591 	strb.w	r1, [r3, #1425]	; 0x591
	out->outputEnabled = 0;
 8005cbc:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
	out->isOutputSetByNoteOn = 0;
 8005cc0:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
	out->htim = NULL;
 8005cc4:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
	out->timChannel = 0;
 8005cc8:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
	out->hi2c = hi2c;
 8005ccc:	f8c3 559c 	str.w	r5, [r3, #1436]	; 0x59c
	out->outType = outType;
 8005cd0:	f883 15ad 	strb.w	r1, [r3, #1453]	; 0x5ad
	out->outputEnabled = 0;
 8005cd4:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 8005cd8:	e028      	b.n	8005d2c <initializeOutputs+0x8c0>
 8005cda:	bf00      	nop
 8005cdc:	0c008000 	.word	0x0c008000
 8005ce0:	40020c00 	.word	0x40020c00
 8005ce4:	0c000800 	.word	0x0c000800
 8005ce8:	00c00200 	.word	0x00c00200
 8005cec:	00300100 	.word	0x00300100
 8005cf0:	20000f84 	.word	0x20000f84
 8005cf4:	40020000 	.word	0x40020000
 8005cf8:	30000400 	.word	0x30000400
 8005cfc:	2000072c 	.word	0x2000072c
 8005d00:	c0000800 	.word	0xc0000800
 8005d04:	00300002 	.word	0x00300002
 8005d08:	00c00004 	.word	0x00c00004
 8005d0c:	03000008 	.word	0x03000008
 8005d10:	00301000 	.word	0x00301000
 8005d14:	c0002000 	.word	0xc0002000
 8005d18:	200006e0 	.word	0x200006e0
 8005d1c:	20001244 	.word	0x20001244
 8005d20:	30001000 	.word	0x30001000
 8005d24:	03000400 	.word	0x03000400
 8005d28:	20000f44 	.word	0x20000f44
	out->isOutputSetByNoteOn = 0;
 8005d2c:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
	out->htim = NULL;
 8005d30:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
	out->timChannel = 0;
 8005d34:	f8a3 25b4 	strh.w	r2, [r3, #1460]	; 0x5b4
	out->hi2c = hi2c;
 8005d38:	f8c3 55b8 	str.w	r5, [r3, #1464]	; 0x5b8
	out->outType = outType;
 8005d3c:	f883 15c9 	strb.w	r1, [r3, #1481]	; 0x5c9
	out->outputEnabled = 0;
 8005d40:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
	out->isOutputSetByNoteOn = 0;
 8005d44:	f883 25cb 	strb.w	r2, [r3, #1483]	; 0x5cb
	out->htim = NULL;
 8005d48:	f8c3 25cc 	str.w	r2, [r3, #1484]	; 0x5cc
	out->timChannel = 0;
 8005d4c:	f8a3 25d0 	strh.w	r2, [r3, #1488]	; 0x5d0
	out->hi2c = hi2c;
 8005d50:	f8c3 55d4 	str.w	r5, [r3, #1492]	; 0x5d4
	out->gpio = gpio;
 8005d54:	f8c3 65c4 	str.w	r6, [r3, #1476]	; 0x5c4
 8005d58:	4e68      	ldr	r6, [pc, #416]	; (8005efc <initializeOutputs+0xa90>)
	out->htim = htim;
 8005d5a:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8005f10 <initializeOutputs+0xaa4>
	out->gpio = gpio;
 8005d5e:	f8c3 65dc 	str.w	r6, [r3, #1500]	; 0x5dc
 8005d62:	f8c3 65f8 	str.w	r6, [r3, #1528]	; 0x5f8
 8005d66:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
 8005d6a:	f8c3 6630 	str.w	r6, [r3, #1584]	; 0x630
 8005d6e:	4e64      	ldr	r6, [pc, #400]	; (8005f00 <initializeOutputs+0xa94>)
 8005d70:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005f14 <initializeOutputs+0xaa8>
	out->deviceAddress = deviceAddress;
 8005d74:	f883 45d8 	strb.w	r4, [r3, #1496]	; 0x5d8
 8005d78:	f883 45f4 	strb.w	r4, [r3, #1524]	; 0x5f4
 8005d7c:	f883 4610 	strb.w	r4, [r3, #1552]	; 0x610
	out->gpio = gpio;
 8005d80:	f8c3 65e0 	str.w	r6, [r3, #1504]	; 0x5e0
	out->htim = htim;
 8005d84:	4c5f      	ldr	r4, [pc, #380]	; (8005f04 <initializeOutputs+0xa98>)
	out->gpio = gpio;
 8005d86:	4e60      	ldr	r6, [pc, #384]	; (8005f08 <initializeOutputs+0xa9c>)
 8005d88:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8005f18 <initializeOutputs+0xaac>
 8005d8c:	f8c3 6618 	str.w	r6, [r3, #1560]	; 0x618
	out->gpio = NULL;
 8005d90:	f44f 2640 	mov.w	r6, #786432	; 0xc0000
	out->htim = htim;
 8005d94:	f8c3 963c 	str.w	r9, [r3, #1596]	; 0x63c
	out->timChannel = timChannel;
 8005d98:	f04f 0904 	mov.w	r9, #4
	out->outType = outType;
 8005d9c:	f883 15e5 	strb.w	r1, [r3, #1509]	; 0x5e5
	out->outputEnabled = 0;
 8005da0:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
	out->isOutputSetByNoteOn = 0;
 8005da4:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
	out->htim = NULL;
 8005da8:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
	out->timChannel = 0;
 8005dac:	f8a3 25ec 	strh.w	r2, [r3, #1516]	; 0x5ec
	out->hi2c = hi2c;
 8005db0:	f8c3 55f0 	str.w	r5, [r3, #1520]	; 0x5f0
	out->outType = outType;
 8005db4:	f883 1601 	strb.w	r1, [r3, #1537]	; 0x601
	out->outputEnabled = 0;
 8005db8:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
	out->isOutputSetByNoteOn = 0;
 8005dbc:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
	out->htim = NULL;
 8005dc0:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
	out->timChannel = 0;
 8005dc4:	f8a3 2608 	strh.w	r2, [r3, #1544]	; 0x608
	out->hi2c = hi2c;
 8005dc8:	f8c3 560c 	str.w	r5, [r3, #1548]	; 0x60c
	out->outType = outType;
 8005dcc:	f883 161d 	strb.w	r1, [r3, #1565]	; 0x61d
	out->outputEnabled = 0;
 8005dd0:	f883 261e 	strb.w	r2, [r3, #1566]	; 0x61e
	out->isOutputSetByNoteOn = 0;
 8005dd4:	f883 261f 	strb.w	r2, [r3, #1567]	; 0x61f
	out->htim = NULL;
 8005dd8:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
	out->timChannel = 0;
 8005ddc:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
	out->hi2c = hi2c;
 8005de0:	f8c3 5628 	str.w	r5, [r3, #1576]	; 0x628
	out->deviceAddress = deviceAddress;
 8005de4:	f883 062c 	strb.w	r0, [r3, #1580]	; 0x62c
	out->outType = outType;
 8005de8:	f883 1639 	strb.w	r1, [r3, #1593]	; 0x639
	out->outputEnabled = 0;
 8005dec:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
	out->gpio = gpio;
 8005df0:	f8c3 a634 	str.w	sl, [r3, #1588]	; 0x634
 8005df4:	f8c3 c5fc 	str.w	ip, [r3, #1532]	; 0x5fc
	out->htim = htim;
 8005df8:	f8c3 4658 	str.w	r4, [r3, #1624]	; 0x658
 8005dfc:	f8c3 4674 	str.w	r4, [r3, #1652]	; 0x674
	out->gpio = NULL;
 8005e00:	f44f 0440 	mov.w	r4, #12582912	; 0xc00000
 8005e04:	f8c3 6650 	str.w	r6, [r3, #1616]	; 0x650
 8005e08:	f44f 1640 	mov.w	r6, #3145728	; 0x300000
 8005e0c:	f8c3 4688 	str.w	r4, [r3, #1672]	; 0x688
 8005e10:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
	out->htim = htim;
 8005e14:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005f1c <initializeOutputs+0xab0>
	out->gpio = NULL;
 8005e18:	f8c3 46a4 	str.w	r4, [r3, #1700]	; 0x6a4
	out->htim = htim;
 8005e1c:	4c3b      	ldr	r4, [pc, #236]	; (8005f0c <initializeOutputs+0xaa0>)
	out->gpio = gpio;
 8005e1e:	f8df e100 	ldr.w	lr, [pc, #256]	; 8005f20 <initializeOutputs+0xab4>
	out->htim = htim;
 8005e22:	f8c3 4690 	str.w	r4, [r3, #1680]	; 0x690
	out->gpio = NULL;
 8005e26:	f04f 6440 	mov.w	r4, #201326592	; 0xc000000
	out->timChannel = timChannel;
 8005e2a:	f8a3 9640 	strh.w	r9, [r3, #1600]	; 0x640
	out->hi2c = hi2c;
 8005e2e:	f8c3 5644 	str.w	r5, [r3, #1604]	; 0x644
	out->deviceAddress = deviceAddress;
 8005e32:	f883 0648 	strb.w	r0, [r3, #1608]	; 0x648
	out->gpio = NULL;
 8005e36:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
	out->outType = outType;
 8005e3a:	f883 1655 	strb.w	r1, [r3, #1621]	; 0x655
	out->outputEnabled = 0;
 8005e3e:	f8a3 2656 	strh.w	r2, [r3, #1622]	; 0x656
	out->timChannel = timChannel;
 8005e42:	f8a3 265c 	strh.w	r2, [r3, #1628]	; 0x65c
	out->hi2c = hi2c;
 8005e46:	f8c3 5660 	str.w	r5, [r3, #1632]	; 0x660
	out->deviceAddress = deviceAddress;
 8005e4a:	f883 0664 	strb.w	r0, [r3, #1636]	; 0x664
	out->gpio = NULL;
 8005e4e:	f8c3 2668 	str.w	r2, [r3, #1640]	; 0x668
 8005e52:	f8c3 666c 	str.w	r6, [r3, #1644]	; 0x66c
	out->outType = outType;
 8005e56:	f883 1671 	strb.w	r1, [r3, #1649]	; 0x671
	out->outputEnabled = 0;
 8005e5a:	f8a3 2672 	strh.w	r2, [r3, #1650]	; 0x672
	out->timChannel = timChannel;
 8005e5e:	f8a3 9678 	strh.w	r9, [r3, #1656]	; 0x678
	out->hi2c = hi2c;
 8005e62:	f8c3 567c 	str.w	r5, [r3, #1660]	; 0x67c
	out->deviceAddress = deviceAddress;
 8005e66:	f883 0680 	strb.w	r0, [r3, #1664]	; 0x680
	out->gpio = NULL;
 8005e6a:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
	out->outType = outType;
 8005e6e:	f883 168d 	strb.w	r1, [r3, #1677]	; 0x68d
	out->outputEnabled = 0;
 8005e72:	f8a3 268e 	strh.w	r2, [r3, #1678]	; 0x68e
	out->timChannel = timChannel;
 8005e76:	f8a3 2694 	strh.w	r2, [r3, #1684]	; 0x694
	out->hi2c = hi2c;
 8005e7a:	f8c3 5698 	str.w	r5, [r3, #1688]	; 0x698
	out->deviceAddress = deviceAddress;
 8005e7e:	f883 069c 	strb.w	r0, [r3, #1692]	; 0x69c
	out->gpio = NULL;
 8005e82:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0
	out->outType = outType;
 8005e86:	f883 16a9 	strb.w	r1, [r3, #1705]	; 0x6a9
	out->outputEnabled = 0;
 8005e8a:	f8a3 26aa 	strh.w	r2, [r3, #1706]	; 0x6aa
	out->timChannel = timChannel;
 8005e8e:	f8a3 26b0 	strh.w	r2, [r3, #1712]	; 0x6b0
	out->htim = htim;
 8005e92:	f8c3 86ac 	str.w	r8, [r3, #1708]	; 0x6ac
	out->hi2c = hi2c;
 8005e96:	f8c3 56b4 	str.w	r5, [r3, #1716]	; 0x6b4
	out->deviceAddress = deviceAddress;
 8005e9a:	f883 06b8 	strb.w	r0, [r3, #1720]	; 0x6b8
	out->gpio = NULL;
 8005e9e:	f8c3 26bc 	str.w	r2, [r3, #1724]	; 0x6bc
 8005ea2:	f8c3 46c0 	str.w	r4, [r3, #1728]	; 0x6c0
	out->outType = outType;
 8005ea6:	f883 16c5 	strb.w	r1, [r3, #1733]	; 0x6c5
	out->outputEnabled = 0;
 8005eaa:	f883 26c6 	strb.w	r2, [r3, #1734]	; 0x6c6
	out->isOutputSetByNoteOn = 0;
 8005eae:	f883 26c7 	strb.w	r2, [r3, #1735]	; 0x6c7
	out->htim = NULL;
 8005eb2:	f8c3 26c8 	str.w	r2, [r3, #1736]	; 0x6c8
	out->timChannel = 0;
 8005eb6:	f8a3 26cc 	strh.w	r2, [r3, #1740]	; 0x6cc
	out->hi2c = hi2c;
 8005eba:	f8c3 56d0 	str.w	r5, [r3, #1744]	; 0x6d0
	out->deviceAddress = deviceAddress;
 8005ebe:	f883 06d4 	strb.w	r0, [r3, #1748]	; 0x6d4
	out->gpio = gpio;
 8005ec2:	f8c3 76d8 	str.w	r7, [r3, #1752]	; 0x6d8
 8005ec6:	f8c3 c6dc 	str.w	ip, [r3, #1756]	; 0x6dc
	out->outType = outType;
 8005eca:	f883 16e1 	strb.w	r1, [r3, #1761]	; 0x6e1
	out->outputEnabled = 0;
 8005ece:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
	out->isOutputSetByNoteOn = 0;
 8005ed2:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
	out->htim = NULL;
 8005ed6:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4
	out->timChannel = 0;
 8005eda:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
	out->hi2c = hi2c;
 8005ede:	f8c3 56ec 	str.w	r5, [r3, #1772]	; 0x6ec
	out->deviceAddress = deviceAddress;
 8005ee2:	f883 06f0 	strb.w	r0, [r3, #1776]	; 0x6f0
	out->gpio = gpio;
 8005ee6:	f8c3 b6f4 	str.w	fp, [r3, #1780]	; 0x6f4
	out->outType = outType;
 8005eea:	f883 16fd 	strb.w	r1, [r3, #1789]	; 0x6fd
	out->outputEnabled = 0;
 8005eee:	f8a3 26fe 	strh.w	r2, [r3, #1790]	; 0x6fe
	out->gpio = gpio;
 8005ef2:	f8c3 e6f8 	str.w	lr, [r3, #1784]	; 0x6f8
}
 8005ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efa:	bf00      	nop
 8005efc:	40020c00 	.word	0x40020c00
 8005f00:	0c000010 	.word	0x0c000010
 8005f04:	20001044 	.word	0x20001044
 8005f08:	c0000040 	.word	0xc0000040
 8005f0c:	20000fc4 	.word	0x20000fc4
 8005f10:	200011c4 	.word	0x200011c4
 8005f14:	30000020 	.word	0x30000020
 8005f18:	00030080 	.word	0x00030080
 8005f1c:	200010c4 	.word	0x200010c4
 8005f20:	c0000002 	.word	0xc0000002

08005f24 <setHardPWM>:
	switch(timChannel)
 8005f24:	2914      	cmp	r1, #20
 8005f26:	d80e      	bhi.n	8005f46 <setHardPWM+0x22>
 8005f28:	e8df f001 	tbb	[pc, r1]
 8005f2c:	0d0d0d0e 	.word	0x0d0d0d0e
 8005f30:	0d0d0d11 	.word	0x0d0d0d11
 8005f34:	0d0d0d14 	.word	0x0d0d0d14
 8005f38:	0d0d0d17 	.word	0x0d0d0d17
 8005f3c:	0d0d0d1a 	.word	0x0d0d0d1a
 8005f40:	0b          	.byte	0x0b
 8005f41:	00          	.byte	0x00
		htim->Instance->CCR6 = pwmValue;
 8005f42:	6803      	ldr	r3, [r0, #0]
 8005f44:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005f46:	4770      	bx	lr
		htim->Instance->CCR1 = pwmValue;
 8005f48:	6803      	ldr	r3, [r0, #0]
 8005f4a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8005f4c:	4770      	bx	lr
		htim->Instance->CCR2 = pwmValue;
 8005f4e:	6803      	ldr	r3, [r0, #0]
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8005f52:	4770      	bx	lr
		htim->Instance->CCR3 = pwmValue;
 8005f54:	6803      	ldr	r3, [r0, #0]
 8005f56:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8005f58:	4770      	bx	lr
		htim->Instance->CCR4 = pwmValue;
 8005f5a:	6803      	ldr	r3, [r0, #0]
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8005f5e:	4770      	bx	lr
		htim->Instance->CCR5 = pwmValue;
 8005f60:	6803      	ldr	r3, [r0, #0]
 8005f62:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <setBidirectionalPWM>:
{
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	b084      	sub	sp, #16
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, 0, 0 };
 8005f70:	2402      	movs	r4, #2
 8005f72:	2000      	movs	r0, #0
 8005f74:	8aeb      	ldrh	r3, [r5, #22]
	if(pwmValue >= 64)
 8005f76:	293f      	cmp	r1, #63	; 0x3f
 8005f78:	ea4f 02d2 	mov.w	r2, r2, lsr #3
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, 0, 0 };
 8005f7c:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005f80:	fa4f fc83 	sxtb.w	ip, r3
 8005f84:	f88d 000e 	strb.w	r0, [sp, #14]
 8005f88:	f343 2307 	sbfx	r3, r3, #8, #8
	if(pwmValue >= 64)
 8005f8c:	d939      	bls.n	8006002 <setBidirectionalPWM+0x9a>
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8005f8e:	4831      	ldr	r0, [pc, #196]	; (8006054 <setBidirectionalPWM+0xec>)
		pwmValue -= 64;
 8005f90:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8005f94:	eb00 0e42 	add.w	lr, r0, r2, lsl #1
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8005f98:	f810 7012 	ldrb.w	r7, [r0, r2, lsl #1]
		pwmValue -= 64;
 8005f9c:	b2e4      	uxtb	r4, r4
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8005f9e:	f89e 6001 	ldrb.w	r6, [lr, #1]
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8005fa2:	b27f      	sxtb	r7, r7
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8005fa4:	b276      	sxtb	r6, r6
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8005fa6:	f087 01aa 	eor.w	r1, r7, #170	; 0xaa
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8005faa:	f086 08aa 	eor.w	r8, r6, #170	; 0xaa
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8005fae:	ea0c 0c01 	and.w	ip, ip, r1
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8005fb2:	ea03 0308 	and.w	r3, r3, r8
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8005fb6:	ea87 0c0c 	eor.w	ip, r7, ip
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8005fba:	4073      	eors	r3, r6
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8005fbc:	fa5f fc8c 	uxtb.w	ip, ip
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8005fc0:	b2db      	uxtb	r3, r3
		i2cOutputsConfig[channel/8][0] = txBuff[1];
 8005fc2:	f800 c012 	strb.w	ip, [r0, r2, lsl #1]
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8005fc6:	f88d c00d 	strb.w	ip, [sp, #13]
		i2cOutputsConfig[channel/8][1] = txBuff[2];
 8005fca:	f88e 3001 	strb.w	r3, [lr, #1]
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8005fce:	f88d 300e 	strb.w	r3, [sp, #14]
	HAL_I2C_Master_Transmit(out->hi2c,out->deviceAddress,txBuff,ARRAY_SIZE(txBuff),100);
 8005fd2:	2264      	movs	r2, #100	; 0x64
 8005fd4:	7b29      	ldrb	r1, [r5, #12]
 8005fd6:	68a8      	ldr	r0, [r5, #8]
 8005fd8:	2303      	movs	r3, #3
 8005fda:	9200      	str	r2, [sp, #0]
 8005fdc:	aa03      	add	r2, sp, #12
 8005fde:	f7fa fffb 	bl	8000fd8 <HAL_I2C_Master_Transmit>
	if(out->htim != NULL)
 8005fe2:	6828      	ldr	r0, [r5, #0]
 8005fe4:	bb68      	cbnz	r0, 8006042 <setBidirectionalPWM+0xda>
		out->pwmFill = MAX_SOFT_PWM_VAL * pwmValue/63 ;
 8005fe6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <setBidirectionalPWM+0xf0>)
 8005fec:	00a4      	lsls	r4, r4, #2
 8005fee:	fb83 2304 	smull	r2, r3, r3, r4
 8005ff2:	17e2      	asrs	r2, r4, #31
 8005ff4:	441c      	add	r4, r3
 8005ff6:	ebc2 1464 	rsb	r4, r2, r4, asr #5
 8005ffa:	762c      	strb	r4, [r5, #24]
}
 8005ffc:	b004      	add	sp, #16
 8005ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8006002:	4e14      	ldr	r6, [pc, #80]	; (8006054 <setBidirectionalPWM+0xec>)
		pwmValue = 64 - pwmValue;
 8006004:	f1c1 0440 	rsb	r4, r1, #64	; 0x40
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8006008:	eb06 0742 	add.w	r7, r6, r2, lsl #1
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 800600c:	f816 0012 	ldrb.w	r0, [r6, r2, lsl #1]
		pwmValue = 64 - pwmValue;
 8006010:	b2e4      	uxtb	r4, r4
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8006012:	7879      	ldrb	r1, [r7, #1]
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8006014:	b240      	sxtb	r0, r0
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8006016:	b249      	sxtb	r1, r1
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8006018:	f080 0855 	eor.w	r8, r0, #85	; 0x55
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 800601c:	f081 0e55 	eor.w	lr, r1, #85	; 0x55
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8006020:	ea0c 0c08 	and.w	ip, ip, r8
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8006024:	ea03 030e 	and.w	r3, r3, lr
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8006028:	ea80 000c 	eor.w	r0, r0, ip
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 800602c:	404b      	eors	r3, r1
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 800602e:	b2c1      	uxtb	r1, r0
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 8006030:	b2db      	uxtb	r3, r3
		i2cOutputsConfig[channel/8][0] = txBuff[1];
 8006032:	f806 1012 	strb.w	r1, [r6, r2, lsl #1]
		txBuff[1] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8006036:	f88d 100d 	strb.w	r1, [sp, #13]
		i2cOutputsConfig[channel/8][1] = txBuff[2];
 800603a:	707b      	strb	r3, [r7, #1]
		txBuff[2] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_2) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 800603c:	f88d 300e 	strb.w	r3, [sp, #14]
 8006040:	e7c7      	b.n	8005fd2 <setBidirectionalPWM+0x6a>
		setHardPWM(out->htim, out->timChannel, pwmValue*2);
 8006042:	0062      	lsls	r2, r4, #1
 8006044:	88a9      	ldrh	r1, [r5, #4]
 8006046:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800604a:	f7ff ff6b 	bl	8005f24 <setHardPWM>
}
 800604e:	b004      	add	sp, #16
 8006050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006054:	20000810 	.word	0x20000810
 8006058:	82082083 	.word	0x82082083

0800605c <setOneDirectionPWM>:
{
 800605c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask),
 8006060:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
 8006064:	f8b0 e016 	ldrh.w	lr, [r0, #22]
 8006068:	4a29      	ldr	r2, [pc, #164]	; (8006110 <setOneDirectionPWM+0xb4>)
{
 800606a:	4605      	mov	r5, r0
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask),
 800606c:	fa4f f08e 	sxtb.w	r0, lr
{
 8006070:	460c      	mov	r4, r1
												((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8)) };
 8006072:	eb02 074c 	add.w	r7, r2, ip, lsl #1
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask),
 8006076:	f812 901c 	ldrb.w	r9, [r2, ip, lsl #1]
 800607a:	43c1      	mvns	r1, r0
 800607c:	f020 0055 	bic.w	r0, r0, #85	; 0x55
												((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8)) };
 8006080:	f897 8001 	ldrb.w	r8, [r7, #1]
{
 8006084:	b085      	sub	sp, #20
	i2cOutputsConfig[channel/8][0] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8006086:	f812 301c 	ldrb.w	r3, [r2, ip, lsl #1]
												((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8)) };
 800608a:	f34e 2e07 	sbfx	lr, lr, #8, #8
	HAL_I2C_Master_Transmit(out->hi2c,out->deviceAddress,txBuff,ARRAY_SIZE(txBuff),100);
 800608e:	2664      	movs	r6, #100	; 0x64
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask),
 8006090:	ea01 0909 	and.w	r9, r1, r9
	i2cOutputsConfig[channel/8][0] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 8006094:	400b      	ands	r3, r1
												((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8)) };
 8006096:	f02e 0155 	bic.w	r1, lr, #85	; 0x55
	HAL_I2C_Master_Transmit(out->hi2c,out->deviceAddress,txBuff,ARRAY_SIZE(txBuff),100);
 800609a:	9600      	str	r6, [sp, #0]
												((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8)) };
 800609c:	ea6f 060e 	mvn.w	r6, lr
	i2cOutputsConfig[channel/8][0] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 80060a0:	4303      	orrs	r3, r0
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask),
 80060a2:	ea40 0009 	orr.w	r0, r0, r9
												((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8)) };
 80060a6:	b276      	sxtb	r6, r6
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask),
 80060a8:	f04f 0e02 	mov.w	lr, #2
	i2cOutputsConfig[channel/8][0] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 80060ac:	b2db      	uxtb	r3, r3
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask),
 80060ae:	f88d 000d 	strb.w	r0, [sp, #13]
												((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8)) };
 80060b2:	b249      	sxtb	r1, r1
 80060b4:	ea06 0008 	and.w	r0, r6, r8
	i2cOutputsConfig[channel/8][0] = ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask);
 80060b8:	f802 301c 	strb.w	r3, [r2, ip, lsl #1]
	HAL_I2C_Master_Transmit(out->hi2c,out->deviceAddress,txBuff,ARRAY_SIZE(txBuff),100);
 80060bc:	2303      	movs	r3, #3
	i2cOutputsConfig[channel/8][1] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 80060be:	f897 c001 	ldrb.w	ip, [r7, #1]
												((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8)) };
 80060c2:	4308      	orrs	r0, r1
	HAL_I2C_Master_Transmit(out->hi2c,out->deviceAddress,txBuff,ARRAY_SIZE(txBuff),100);
 80060c4:	aa03      	add	r2, sp, #12
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask),
 80060c6:	f88d e00c 	strb.w	lr, [sp, #12]
	i2cOutputsConfig[channel/8][1] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 80060ca:	ea06 060c 	and.w	r6, r6, ip
	uint8_t txBuff[3] = { PCAL6416A_OUTPUT_REG, ((uint8_t)out->dirMask & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][0] & ~(uint8_t)out->dirMask),
 80060ce:	f88d 000e 	strb.w	r0, [sp, #14]
	i2cOutputsConfig[channel/8][1] = ((uint8_t)(out->dirMask >> 8) & CURRENT_DIRECTION_1) | (i2cOutputsConfig[channel/8][1] & ~(uint8_t)(out->dirMask >> 8));
 80060d2:	4331      	orrs	r1, r6
 80060d4:	b2c9      	uxtb	r1, r1
 80060d6:	7079      	strb	r1, [r7, #1]
	HAL_I2C_Master_Transmit(out->hi2c,out->deviceAddress,txBuff,ARRAY_SIZE(txBuff),100);
 80060d8:	7b29      	ldrb	r1, [r5, #12]
 80060da:	68a8      	ldr	r0, [r5, #8]
 80060dc:	f7fa ff7c 	bl	8000fd8 <HAL_I2C_Master_Transmit>
	if(out->htim != NULL)
 80060e0:	6828      	ldr	r0, [r5, #0]
 80060e2:	b968      	cbnz	r0, 8006100 <setOneDirectionPWM+0xa4>
		out->pwmFill = MAX_SOFT_PWM_VAL * pwmValue/127;
 80060e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <setOneDirectionPWM+0xb8>)
 80060ea:	00a4      	lsls	r4, r4, #2
 80060ec:	fba3 2304 	umull	r2, r3, r3, r4
 80060f0:	1ae4      	subs	r4, r4, r3
 80060f2:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 80060f6:	09a4      	lsrs	r4, r4, #6
 80060f8:	762c      	strb	r4, [r5, #24]
}
 80060fa:	b005      	add	sp, #20
 80060fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		setHardPWM(out->htim, out->timChannel, pwmValue);
 8006100:	4622      	mov	r2, r4
 8006102:	88a9      	ldrh	r1, [r5, #4]
 8006104:	f7ff ff0e 	bl	8005f24 <setHardPWM>
}
 8006108:	b005      	add	sp, #20
 800610a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800610e:	bf00      	nop
 8006110:	20000810 	.word	0x20000810
 8006114:	02040811 	.word	0x02040811

08006118 <setOutputPWMValue.part.0>:
		outputParams *out = &outputs[channel-1];
 8006118:	1e42      	subs	r2, r0, #1
 800611a:	4b08      	ldr	r3, [pc, #32]	; (800613c <setOutputPWMValue.part.0+0x24>)
 800611c:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
 8006120:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		switch(out->outType)
 8006124:	7e43      	ldrb	r3, [r0, #25]
 8006126:	b12b      	cbz	r3, 8006134 <setOutputPWMValue.part.0+0x1c>
 8006128:	2b01      	cmp	r3, #1
 800612a:	d102      	bne.n	8006132 <setOutputPWMValue.part.0+0x1a>
			setOneDirectionPWM(out, pwm, channel-1);
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	f7ff bf95 	b.w	800605c <setOneDirectionPWM>
 8006132:	4770      	bx	lr
			setBidirectionalPWM(out, pwm, channel-1);
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	f7ff bf17 	b.w	8005f68 <setBidirectionalPWM>
 800613a:	bf00      	nop
 800613c:	20000838 	.word	0x20000838

08006140 <panicOff>:

void panicOff()
{
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4c0a      	ldr	r4, [pc, #40]	; (800616c <panicOff+0x2c>)
 8006144:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
 8006148:	e005      	b.n	8006156 <panicOff+0x16>
	for(int i = 0; i < 64; ++i)
	{
		if(outputs[i].htim != NULL)
		{
			setHardPWM(outputs[i].htim,outputs[i].timChannel,0);
 800614a:	88a1      	ldrh	r1, [r4, #4]
 800614c:	341c      	adds	r4, #28
 800614e:	f7ff fee9 	bl	8005f24 <setHardPWM>
	for(int i = 0; i < 64; ++i)
 8006152:	42ac      	cmp	r4, r5
 8006154:	d008      	beq.n	8006168 <panicOff+0x28>
		if(outputs[i].htim != NULL)
 8006156:	6823      	ldr	r3, [r4, #0]
			setHardPWM(outputs[i].htim,outputs[i].timChannel,0);
 8006158:	2200      	movs	r2, #0
 800615a:	4618      	mov	r0, r3
		if(outputs[i].htim != NULL)
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f4      	bne.n	800614a <panicOff+0xa>
		}
		else
		{
			outputs[i].pwmFill = 0;
 8006160:	7623      	strb	r3, [r4, #24]
 8006162:	341c      	adds	r4, #28
	for(int i = 0; i < 64; ++i)
 8006164:	42ac      	cmp	r4, r5
 8006166:	d1f6      	bne.n	8006156 <panicOff+0x16>
		}
	}
}
 8006168:	bd38      	pop	{r3, r4, r5, pc}
 800616a:	bf00      	nop
 800616c:	20000838 	.word	0x20000838

08006170 <allOff>:

void allOff()
{
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	4c0c      	ldr	r4, [pc, #48]	; (80061a4 <allOff+0x34>)
		if(outputs[i].isOutputSetByNoteOn)
		{
			if(outputs[i].htim != NULL)
			{
				HAL_TIM_PWM_Stop(outputs[i].htim,outputs[i].timChannel);
				outputs[i].outputEnabled = 0;
 8006174:	2600      	movs	r6, #0
 8006176:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
 800617a:	e006      	b.n	800618a <allOff+0x1a>
				HAL_TIM_PWM_Stop(outputs[i].htim,outputs[i].timChannel);
 800617c:	88a1      	ldrh	r1, [r4, #4]
 800617e:	f7fc fccb 	bl	8002b18 <HAL_TIM_PWM_Stop>
				outputs[i].outputEnabled = 0;
 8006182:	76a6      	strb	r6, [r4, #26]
 8006184:	341c      	adds	r4, #28
	for(int i = 0; i < 64; ++i)
 8006186:	42ac      	cmp	r4, r5
 8006188:	d00a      	beq.n	80061a0 <allOff+0x30>
		if(outputs[i].isOutputSetByNoteOn)
 800618a:	7ee3      	ldrb	r3, [r4, #27]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f9      	beq.n	8006184 <allOff+0x14>
			if(outputs[i].htim != NULL)
 8006190:	6823      	ldr	r3, [r4, #0]
				HAL_TIM_PWM_Stop(outputs[i].htim,outputs[i].timChannel);
 8006192:	4618      	mov	r0, r3
			if(outputs[i].htim != NULL)
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f1      	bne.n	800617c <allOff+0xc>
			}
			else
			{
			outputs[i].outputEnabled = 0;
 8006198:	76a3      	strb	r3, [r4, #26]
 800619a:	341c      	adds	r4, #28
	for(int i = 0; i < 64; ++i)
 800619c:	42ac      	cmp	r4, r5
 800619e:	d1f4      	bne.n	800618a <allOff+0x1a>
			}
		}
	}
}
 80061a0:	bd70      	pop	{r4, r5, r6, pc}
 80061a2:	bf00      	nop
 80061a4:	20000838 	.word	0x20000838

080061a8 <allOn>:

void allOn()
{
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	4c0c      	ldr	r4, [pc, #48]	; (80061dc <allOn+0x34>)
				HAL_TIM_PWM_Start(outputs[i].htim,outputs[i].timChannel);
				outputs[i].outputEnabled = 1;
			}
			else
			{
				outputs[i].outputEnabled = 1;
 80061ac:	2601      	movs	r6, #1
 80061ae:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
 80061b2:	e006      	b.n	80061c2 <allOn+0x1a>
				HAL_TIM_PWM_Start(outputs[i].htim,outputs[i].timChannel);
 80061b4:	88a1      	ldrh	r1, [r4, #4]
 80061b6:	f7fc fcad 	bl	8002b14 <HAL_TIM_PWM_Start>
				outputs[i].outputEnabled = 1;
 80061ba:	76a6      	strb	r6, [r4, #26]
 80061bc:	341c      	adds	r4, #28
	for(int i = 0; i < 64; ++i)
 80061be:	42ac      	cmp	r4, r5
 80061c0:	d00a      	beq.n	80061d8 <allOn+0x30>
		if(outputs[i].isOutputSetByNoteOn)
 80061c2:	7ee3      	ldrb	r3, [r4, #27]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0f9      	beq.n	80061bc <allOn+0x14>
			if(outputs[i].htim != NULL)
 80061c8:	6823      	ldr	r3, [r4, #0]
				HAL_TIM_PWM_Start(outputs[i].htim,outputs[i].timChannel);
 80061ca:	4618      	mov	r0, r3
			if(outputs[i].htim != NULL)
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f1      	bne.n	80061b4 <allOn+0xc>
				outputs[i].outputEnabled = 1;
 80061d0:	76a6      	strb	r6, [r4, #26]
 80061d2:	341c      	adds	r4, #28
	for(int i = 0; i < 64; ++i)
 80061d4:	42ac      	cmp	r4, r5
 80061d6:	d1f4      	bne.n	80061c2 <allOn+0x1a>
			}
		}
	}
}
 80061d8:	bd70      	pop	{r4, r5, r6, pc}
 80061da:	bf00      	nop
 80061dc:	20000838 	.word	0x20000838

080061e0 <startAllTimers>:

void startAllTimers()
{
 80061e0:	b510      	push	{r4, lr}
//	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
//	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
//	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 80061e2:	4c0b      	ldr	r4, [pc, #44]	; (8006210 <startAllTimers+0x30>)
 80061e4:	2100      	movs	r1, #0
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7fc fc94 	bl	8002b14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_2);
 80061ec:	4620      	mov	r0, r4
 80061ee:	2104      	movs	r1, #4
 80061f0:	f7fc fc90 	bl	8002b14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_3);
 80061f4:	4620      	mov	r0, r4
 80061f6:	2108      	movs	r1, #8
 80061f8:	f7fc fc8c 	bl	8002b14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);
 80061fc:	4620      	mov	r0, r4
 80061fe:	210c      	movs	r1, #12
 8006200:	f7fc fc88 	bl	8002b14 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8006204:	4803      	ldr	r0, [pc, #12]	; (8006214 <startAllTimers+0x34>)
//	HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_2);
//	HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);
}
 8006206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Start_IT(&htim6);
 800620a:	f7fc bc3d 	b.w	8002a88 <HAL_TIM_Base_Start_IT>
 800620e:	bf00      	nop
 8006210:	20001004 	.word	0x20001004
 8006214:	20001104 	.word	0x20001104

08006218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006218:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800621a:	2400      	movs	r4, #0
{
 800621c:	b0b4      	sub	sp, #208	; 0xd0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800621e:	2284      	movs	r2, #132	; 0x84
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006220:	2502      	movs	r5, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006222:	4621      	mov	r1, r4
 8006224:	a813      	add	r0, sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006226:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006228:	2601      	movs	r6, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800622a:	9402      	str	r4, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800622c:	940c      	str	r4, [sp, #48]	; 0x30
 800622e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006232:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006236:	e9cd 4405 	strd	r4, r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800623a:	f001 fc43 	bl	8007ac4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800623e:	4b22      	ldr	r3, [pc, #136]	; (80062c8 <SystemClock_Config+0xb0>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006240:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006244:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __HAL_RCC_PWR_CLK_ENABLE();
 8006248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800624a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800624e:	641a      	str	r2, [r3, #64]	; 0x40
 8006250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006252:	f5a3 33e4 	sub.w	r3, r3, #116736	; 0x1c800
  __HAL_RCC_PWR_CLK_ENABLE();
 8006256:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800625a:	9200      	str	r2, [sp, #0]
 800625c:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006264:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 8006266:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800626a:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800626c:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800626e:	2119      	movs	r1, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006274:	900e      	str	r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006276:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006278:	9607      	str	r6, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800627a:	9301      	str	r3, [sp, #4]
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800627c:	260f      	movs	r6, #15
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800627e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006280:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006282:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006284:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006286:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 432;
 8006288:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800628c:	f7fb fdb6 	bl	8001dfc <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006290:	f7fb fd78 	bl	8001d84 <HAL_PWREx_EnableOverDrive>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006294:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006298:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800629c:	2107      	movs	r1, #7
 800629e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062a0:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062a2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062a4:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80062a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80062aa:	f7fb ffa7 	bl	80021fc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80062ae:	4b07      	ldr	r3, [pc, #28]	; (80062cc <SystemClock_Config+0xb4>)
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062b0:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 80062b2:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80062b4:	9432      	str	r4, [sp, #200]	; 0xc8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80062b6:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80062b8:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80062bc:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062c0:	f7fc f860 	bl	8002384 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80062c4:	b034      	add	sp, #208	; 0xd0
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
 80062c8:	40023800 	.word	0x40023800
 80062cc:	0023e000 	.word	0x0023e000

080062d0 <main>:
{
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rxCount = 0;
 80062d4:	4ac0      	ldr	r2, [pc, #768]	; (80065d8 <main+0x308>)
 80062d6:	2400      	movs	r4, #0
	uint8_t pcal6416aConfig[3] = { 0x06, 0x00, 0x00 };
 80062d8:	2306      	movs	r3, #6
	initFifo(&fifo);
 80062da:	48c0      	ldr	r0, [pc, #768]	; (80065dc <main+0x30c>)
	rxBuff = 0;
 80062dc:	4dc0      	ldr	r5, [pc, #768]	; (80065e0 <main+0x310>)
{
 80062de:	ed2d 8b06 	vpush	{d8-d10}
 80062e2:	b08d      	sub	sp, #52	; 0x34
	rxCount = 0;
 80062e4:	7014      	strb	r4, [r2, #0]
	uint8_t pcal6416aConfig[3] = { 0x06, 0x00, 0x00 };
 80062e6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80062ea:	f88d 401a 	strb.w	r4, [sp, #26]
	initFifo(&fifo);
 80062ee:	f7fe fdf3 	bl	8004ed8 <initFifo>
	uint8_t txMidiMessage[4][4] = {{ MIDI_STATUS_CC, MIDI_STATUS_CC << 4, 1, 0 },
 80062f2:	4bbc      	ldr	r3, [pc, #752]	; (80065e4 <main+0x314>)
	rxBuff = 0;
 80062f4:	702c      	strb	r4, [r5, #0]
	uint8_t txMidiMessage[4][4] = {{ MIDI_STATUS_CC, MIDI_STATUS_CC << 4, 1, 0 },
 80062f6:	ad08      	add	r5, sp, #32
 80062f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80062fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006302:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006306:	4ab8      	ldr	r2, [pc, #736]	; (80065e8 <main+0x318>)
 8006308:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800630c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006310:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006314:	6953      	ldr	r3, [r2, #20]
 8006316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800631c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006320:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8006324:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006328:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800632c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006330:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006334:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006338:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800633c:	07b7      	lsls	r7, r6, #30
 800633e:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006340:	ea04 050c 	and.w	r5, r4, ip
 8006344:	4638      	mov	r0, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006346:	4631      	mov	r1, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006348:	ea45 0300 	orr.w	r3, r5, r0
      } while (ways-- != 0U);
 800634c:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800634e:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 8006352:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8006356:	1c4b      	adds	r3, r1, #1
 8006358:	d1f6      	bne.n	8006348 <main+0x78>
 800635a:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 800635c:	f114 0f20 	cmn.w	r4, #32
 8006360:	d1ee      	bne.n	8006340 <main+0x70>
 8006362:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006366:	6953      	ldr	r3, [r2, #20]
 8006368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800636c:	6153      	str	r3, [r2, #20]
 800636e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006372:	f3bf 8f6f 	isb	sy
  HAL_I2C_Master_Transmit(&hi2c1, PCAL6416A_ADDR_GND_W ,pcal6416aConfig, ARRAY_SIZE(pcal6416aConfig), 100);
 8006376:	2564      	movs	r5, #100	; 0x64
	uint32_t lastSystickVal = 0;
 8006378:	f04f 0800 	mov.w	r8, #0
  HAL_Init();
 800637c:	f7fa f8e4 	bl	8000548 <HAL_Init>
	lpfData lpfAdc2 = {0, 0.1};
 8006380:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 80065ec <main+0x31c>
  SystemClock_Config();
 8006384:	f7ff ff48 	bl	8006218 <SystemClock_Config>
	uint8_t adcConvNum = 0;
 8006388:	4644      	mov	r4, r8
  MX_GPIO_Init();
 800638a:	f7fe fdf7 	bl	8004f7c <MX_GPIO_Init>
	lpfData lpfAdc1 = {0, 0.1};
 800638e:	eeb0 9a48 	vmov.f32	s18, s16
  MX_I2C1_Init();
 8006392:	f7fe febf 	bl	8005114 <MX_I2C1_Init>
	lpfData lpfAdc0 = {0, 0.1};
 8006396:	eef0 8a48 	vmov.f32	s17, s16
  MX_I2C2_Init();
 800639a:	f7fe fee9 	bl	8005170 <MX_I2C2_Init>
	uint8_t pressedDownFlag = 0;
 800639e:	46c3      	mov	fp, r8
  MX_I2C3_Init();
 80063a0:	f7fe ff14 	bl	80051cc <MX_I2C3_Init>
	 filterData->lastData = filterData->lastData - (filterData->LPF_Beta * (filterData->lastData - inputValue));
 80063a4:	ed9f aa92 	vldr	s20, [pc, #584]	; 80065f0 <main+0x320>
  MX_I2C4_Init();
 80063a8:	f7fe ff3e 	bl	8005228 <MX_I2C4_Init>
	 if(filterData->lastData > 255)
 80063ac:	eddf 9a91 	vldr	s19, [pc, #580]	; 80065f4 <main+0x324>
  MX_TIM1_Init();
 80063b0:	f000 fd2a 	bl	8006e08 <MX_TIM1_Init>
	uint8_t lastAdcConvNum = 123;
 80063b4:	277b      	movs	r7, #123	; 0x7b
  MX_TIM2_Init();
 80063b6:	f000 fd89 	bl	8006ecc <MX_TIM2_Init>
 80063ba:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8006618 <main+0x348>
  MX_TIM3_Init();
 80063be:	f000 fdcd 	bl	8006f5c <MX_TIM3_Init>
	uint8_t pressedCount = 0;
 80063c2:	f8cd 800c 	str.w	r8, [sp, #12]
  MX_TIM4_Init();
 80063c6:	f000 fe25 	bl	8007014 <MX_TIM4_Init>
 80063ca:	4e8b      	ldr	r6, [pc, #556]	; (80065f8 <main+0x328>)
  MX_TIM5_Init();
 80063cc:	f000 fe6c 	bl	80070a8 <MX_TIM5_Init>
 80063d0:	f8df a248 	ldr.w	sl, [pc, #584]	; 800661c <main+0x34c>
  MX_TIM8_Init();
 80063d4:	f000 fec4 	bl	8007160 <MX_TIM8_Init>
  MX_TIM9_Init();
 80063d8:	f000 ff38 	bl	800724c <MX_TIM9_Init>
	uint8_t momentarySwithWasPressed = 0;
 80063dc:	f8cd 8010 	str.w	r8, [sp, #16]
  MX_TIM10_Init();
 80063e0:	f000 ff70 	bl	80072c4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80063e4:	f000 ffa8 	bl	8007338 <MX_TIM11_Init>
  MX_TIM12_Init();
 80063e8:	f000 ffe0 	bl	80073ac <MX_TIM12_Init>
  MX_TIM6_Init();
 80063ec:	f000 faee 	bl	80069cc <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80063f0:	f001 f874 	bl	80074dc <MX_USB_DEVICE_Init>
  MX_GFXSIMULATOR_Init();
 80063f4:	f7fe fdc0 	bl	8004f78 <MX_GFXSIMULATOR_Init>
  MX_ADC1_Init();
 80063f8:	f7fe fce8 	bl	8004dcc <MX_ADC1_Init>
  MX_UART8_Init();
 80063fc:	f001 f812 	bl	8007424 <MX_UART8_Init>
  HAL_I2C_Master_Transmit(&hi2c1, PCAL6416A_ADDR_GND_W ,pcal6416aConfig, ARRAY_SIZE(pcal6416aConfig), 100);
 8006400:	aa06      	add	r2, sp, #24
 8006402:	9500      	str	r5, [sp, #0]
 8006404:	2303      	movs	r3, #3
 8006406:	2140      	movs	r1, #64	; 0x40
 8006408:	487c      	ldr	r0, [pc, #496]	; (80065fc <main+0x32c>)
 800640a:	f7fa fde5 	bl	8000fd8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, PCAL6416A_ADDR_VCC_W ,pcal6416aConfig, ARRAY_SIZE(pcal6416aConfig), 100);
 800640e:	9500      	str	r5, [sp, #0]
 8006410:	aa06      	add	r2, sp, #24
 8006412:	2303      	movs	r3, #3
 8006414:	2142      	movs	r1, #66	; 0x42
 8006416:	4879      	ldr	r0, [pc, #484]	; (80065fc <main+0x32c>)
 8006418:	f7fa fdde 	bl	8000fd8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c2, PCAL6416A_ADDR_GND_W ,pcal6416aConfig, ARRAY_SIZE(pcal6416aConfig), 100);
 800641c:	9500      	str	r5, [sp, #0]
 800641e:	aa06      	add	r2, sp, #24
 8006420:	2303      	movs	r3, #3
 8006422:	2140      	movs	r1, #64	; 0x40
 8006424:	4876      	ldr	r0, [pc, #472]	; (8006600 <main+0x330>)
 8006426:	f7fa fdd7 	bl	8000fd8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c2, PCAL6416A_ADDR_VCC_W ,pcal6416aConfig, ARRAY_SIZE(pcal6416aConfig), 100);
 800642a:	9500      	str	r5, [sp, #0]
 800642c:	aa06      	add	r2, sp, #24
 800642e:	2303      	movs	r3, #3
 8006430:	2142      	movs	r1, #66	; 0x42
 8006432:	4873      	ldr	r0, [pc, #460]	; (8006600 <main+0x330>)
 8006434:	f7fa fdd0 	bl	8000fd8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c3, PCAL6416A_ADDR_GND_W ,pcal6416aConfig, ARRAY_SIZE(pcal6416aConfig), 100);
 8006438:	9500      	str	r5, [sp, #0]
 800643a:	aa06      	add	r2, sp, #24
 800643c:	2303      	movs	r3, #3
 800643e:	2140      	movs	r1, #64	; 0x40
 8006440:	4870      	ldr	r0, [pc, #448]	; (8006604 <main+0x334>)
 8006442:	f7fa fdc9 	bl	8000fd8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c3, PCAL6416A_ADDR_VCC_W ,pcal6416aConfig, ARRAY_SIZE(pcal6416aConfig), 100);
 8006446:	9500      	str	r5, [sp, #0]
 8006448:	aa06      	add	r2, sp, #24
 800644a:	2303      	movs	r3, #3
 800644c:	2142      	movs	r1, #66	; 0x42
 800644e:	486d      	ldr	r0, [pc, #436]	; (8006604 <main+0x334>)
 8006450:	f7fa fdc2 	bl	8000fd8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c4, PCAL6416A_ADDR_GND_W ,pcal6416aConfig, ARRAY_SIZE(pcal6416aConfig), 100);
 8006454:	9500      	str	r5, [sp, #0]
 8006456:	aa06      	add	r2, sp, #24
 8006458:	2303      	movs	r3, #3
 800645a:	2140      	movs	r1, #64	; 0x40
 800645c:	486a      	ldr	r0, [pc, #424]	; (8006608 <main+0x338>)
 800645e:	f7fa fdbb 	bl	8000fd8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c4, PCAL6416A_ADDR_VCC_W ,pcal6416aConfig, ARRAY_SIZE(pcal6416aConfig), 100);
 8006462:	aa06      	add	r2, sp, #24
 8006464:	2303      	movs	r3, #3
 8006466:	2142      	movs	r1, #66	; 0x42
 8006468:	9500      	str	r5, [sp, #0]
 800646a:	4867      	ldr	r0, [pc, #412]	; (8006608 <main+0x338>)
 800646c:	4d67      	ldr	r5, [pc, #412]	; (800660c <main+0x33c>)
 800646e:	f7fa fdb3 	bl	8000fd8 <HAL_I2C_Master_Transmit>
  initializeOutputs();
 8006472:	f7fe fffb 	bl	800546c <initializeOutputs>
  startAllTimers();
 8006476:	f7ff feb3 	bl	80061e0 <startAllTimers>
  HAL_UART_Receive_IT(&huart8,&rxBuff,1);
 800647a:	2201      	movs	r2, #1
 800647c:	4958      	ldr	r1, [pc, #352]	; (80065e0 <main+0x310>)
 800647e:	4864      	ldr	r0, [pc, #400]	; (8006610 <main+0x340>)
 8006480:	f7fc fe36 	bl	80030f0 <HAL_UART_Receive_IT>
	  rxMidiMessage = pop(&fifo);
 8006484:	4855      	ldr	r0, [pc, #340]	; (80065dc <main+0x30c>)
 8006486:	f7fe fd4f 	bl	8004f28 <pop>
	  if(rxMidiMessage.status != 0)
 800648a:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
	  rxMidiMessage = pop(&fifo);
 800648e:	9007      	str	r0, [sp, #28]
	  if(rxMidiMessage.status != 0)
 8006490:	d00e      	beq.n	80064b0 <main+0x1e0>
		  switch(rxMidiMessage.status)
 8006492:	2b09      	cmp	r3, #9
	  rxMidiMessage = pop(&fifo);
 8006494:	f89d 201e 	ldrb.w	r2, [sp, #30]
		  lastMidiMessage = rxMidiMessage;
 8006498:	f8c9 0000 	str.w	r0, [r9]
	  rxMidiMessage = pop(&fifo);
 800649c:	f89d 101f 	ldrb.w	r1, [sp, #31]
		  switch(rxMidiMessage.status)
 80064a0:	f000 816c 	beq.w	800677c <main+0x4ac>
 80064a4:	2b0b      	cmp	r3, #11
 80064a6:	f000 8162 	beq.w	800676e <main+0x49e>
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	f000 8157 	beq.w	800675e <main+0x48e>
	  if(adcConvNum == 0 && adcConvNum != lastAdcConvNum)
 80064b0:	1be3      	subs	r3, r4, r7
 80064b2:	bf18      	it	ne
 80064b4:	2301      	movne	r3, #1
 80064b6:	2c00      	cmp	r4, #0
 80064b8:	f040 80b2 	bne.w	8006620 <main+0x350>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80af 	beq.w	8006620 <main+0x350>
		  HAL_ADC_Start(&hadc1);
 80064c2:	4854      	ldr	r0, [pc, #336]	; (8006614 <main+0x344>)
 80064c4:	f7fa f92c 	bl	8000720 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,100);
 80064c8:	2164      	movs	r1, #100	; 0x64
 80064ca:	4852      	ldr	r0, [pc, #328]	; (8006614 <main+0x344>)
 80064cc:	f7fa f9b2 	bl	8000834 <HAL_ADC_PollForConversion>
		  midiOutData[0]= 127 * lpfFilter(HAL_ADC_GetValue(&hadc1), &lpfAdc0)/62;
 80064d0:	4850      	ldr	r0, [pc, #320]	; (8006614 <main+0x344>)
 80064d2:	f7fa f9ff 	bl	80008d4 <HAL_ADC_GetValue>
	 filterData->lastData = filterData->lastData - (filterData->LPF_Beta * (filterData->lastData - inputValue));
 80064d6:	b2c0      	uxtb	r0, r0
 80064d8:	ee07 0a90 	vmov	s15, r0
 80064dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064e0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80064e4:	eee7 8aca 	vfms.f32	s17, s15, s20
	 if(filterData->lastData > 255)
 80064e8:	eef4 8ae9 	vcmpe.f32	s17, s19
 80064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f0:	f300 812a 	bgt.w	8006748 <main+0x478>
 80064f4:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80064f8:	edcd 7a05 	vstr	s15, [sp, #20]
 80064fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006500:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8006504:	085b      	lsrs	r3, r3, #1
 8006506:	fbaa 2303 	umull	r2, r3, sl, r3
 800650a:	f3c3 1307 	ubfx	r3, r3, #4, #8
		  midiOutData[0]= 127 * lpfFilter(HAL_ADC_GetValue(&hadc1), &lpfAdc0)/62;
 800650e:	702b      	strb	r3, [r5, #0]
		  if(midiOutData[0] < 64)
 8006510:	782b      	ldrb	r3, [r5, #0]
 8006512:	2b3f      	cmp	r3, #63	; 0x3f
 8006514:	f240 8120 	bls.w	8006758 <main+0x488>
		  if((midiOutData[0] > midiOutLastData[0]) || (midiOutData[0] < midiOutLastData[0]))
 8006518:	782a      	ldrb	r2, [r5, #0]
 800651a:	7833      	ldrb	r3, [r6, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d803      	bhi.n	8006528 <main+0x258>
 8006520:	782a      	ldrb	r2, [r5, #0]
 8006522:	7833      	ldrb	r3, [r6, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d209      	bcs.n	800653c <main+0x26c>
		      txMidiMessage[0][3] = midiOutData[0];
 8006528:	782a      	ldrb	r2, [r5, #0]
		      MIDI_Transmit_FS(txMidiMessage[0],4);
 800652a:	2104      	movs	r1, #4
		      midiOutLastData[0] = midiOutData[0];
 800652c:	782b      	ldrb	r3, [r5, #0]
		      MIDI_Transmit_FS(txMidiMessage[0],4);
 800652e:	a808      	add	r0, sp, #32
		      txMidiMessage[0][3] = midiOutData[0];
 8006530:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
		      midiOutLastData[0] = midiOutData[0];
 8006534:	b2db      	uxtb	r3, r3
 8006536:	7033      	strb	r3, [r6, #0]
		      MIDI_Transmit_FS(txMidiMessage[0],4);
 8006538:	f001 fa4a 	bl	80079d0 <MIDI_Transmit_FS>
				  pressedDownFlag = 1;
 800653c:	2300      	movs	r3, #0
 800653e:	461f      	mov	r7, r3
	  if(adcConvNum == 3 && adcConvNum != lastAdcConvNum)
 8006540:	2c03      	cmp	r4, #3
 8006542:	d13b      	bne.n	80065bc <main+0x2ec>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d039      	beq.n	80065bc <main+0x2ec>
		  HAL_ADC_Start(&hadc1);
 8006548:	4832      	ldr	r0, [pc, #200]	; (8006614 <main+0x344>)
 800654a:	f7fa f8e9 	bl	8000720 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,100);
 800654e:	2164      	movs	r1, #100	; 0x64
 8006550:	4830      	ldr	r0, [pc, #192]	; (8006614 <main+0x344>)
 8006552:	f7fa f96f 	bl	8000834 <HAL_ADC_PollForConversion>
		  midiOutData[3]= 127 * lpfFilter(HAL_ADC_GetValue(&hadc1), &lpfAdc2)/62;
 8006556:	482f      	ldr	r0, [pc, #188]	; (8006614 <main+0x344>)
 8006558:	f7fa f9bc 	bl	80008d4 <HAL_ADC_GetValue>
	 filterData->lastData = filterData->lastData - (filterData->LPF_Beta * (filterData->lastData - inputValue));
 800655c:	b2c0      	uxtb	r0, r0
 800655e:	ee07 0a90 	vmov	s15, r0
 8006562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006566:	ee78 7a67 	vsub.f32	s15, s16, s15
 800656a:	eea7 8aca 	vfms.f32	s16, s15, s20
	 if(filterData->lastData > 255)
 800656e:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8006572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006576:	f300 80d1 	bgt.w	800671c <main+0x44c>
 800657a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800657e:	edcd 7a05 	vstr	s15, [sp, #20]
 8006582:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006586:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 800658a:	085b      	lsrs	r3, r3, #1
 800658c:	fbaa 2303 	umull	r2, r3, sl, r3
 8006590:	f3c3 1307 	ubfx	r3, r3, #4, #8
		  midiOutData[3]= 127 * lpfFilter(HAL_ADC_GetValue(&hadc1), &lpfAdc2)/62;
 8006594:	70eb      	strb	r3, [r5, #3]
		  if(midiOutData[3] < 63)
 8006596:	78eb      	ldrb	r3, [r5, #3]
 8006598:	2b3e      	cmp	r3, #62	; 0x3e
 800659a:	f240 80c7 	bls.w	800672c <main+0x45c>
			  if(momentarySwithWasPressed == 1)
 800659e:	9b04      	ldr	r3, [sp, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f040 80f9 	bne.w	8006798 <main+0x4c8>
		  if((midiOutData[3] > midiOutLastData[3]) || (midiOutData[3] < midiOutLastData[3]))
 80065a6:	78ea      	ldrb	r2, [r5, #3]
 80065a8:	78f3      	ldrb	r3, [r6, #3]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	f200 809e 	bhi.w	80066ec <main+0x41c>
 80065b0:	78ea      	ldrb	r2, [r5, #3]
 80065b2:	78f3      	ldrb	r3, [r6, #3]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	f0c0 8099 	bcc.w	80066ec <main+0x41c>
 80065ba:	2703      	movs	r7, #3
	  if(lastSystickVal != HAL_GetTick())
 80065bc:	f7f9 ffe2 	bl	8000584 <HAL_GetTick>
 80065c0:	4540      	cmp	r0, r8
 80065c2:	f43f af5f 	beq.w	8006484 <main+0x1b4>
 80065c6:	3401      	adds	r4, #1
 80065c8:	b2e4      	uxtb	r4, r4
			  adcConvNum = 0;
 80065ca:	2c04      	cmp	r4, #4
 80065cc:	bf28      	it	cs
 80065ce:	2400      	movcs	r4, #0
		  lastSystickVal = HAL_GetTick();
 80065d0:	f7f9 ffd8 	bl	8000584 <HAL_GetTick>
 80065d4:	4680      	mov	r8, r0
 80065d6:	e755      	b.n	8006484 <main+0x1b4>
 80065d8:	20000828 	.word	0x20000828
 80065dc:	2000082c 	.word	0x2000082c
 80065e0:	20000f3c 	.word	0x20000f3c
 80065e4:	08007c74 	.word	0x08007c74
 80065e8:	e000ed00 	.word	0xe000ed00
 80065ec:	00000000 	.word	0x00000000
 80065f0:	3dcccccd 	.word	0x3dcccccd
 80065f4:	437f0000 	.word	0x437f0000
 80065f8:	20000f40 	.word	0x20000f40
 80065fc:	20000778 	.word	0x20000778
 8006600:	200007c4 	.word	0x200007c4
 8006604:	200006e0 	.word	0x200006e0
 8006608:	2000072c 	.word	0x2000072c
 800660c:	20000824 	.word	0x20000824
 8006610:	20001284 	.word	0x20001284
 8006614:	2000029c 	.word	0x2000029c
 8006618:	20000820 	.word	0x20000820
 800661c:	84210843 	.word	0x84210843
	  if(adcConvNum == 1 && adcConvNum != lastAdcConvNum)
 8006620:	2c01      	cmp	r4, #1
 8006622:	d11e      	bne.n	8006662 <main+0x392>
 8006624:	b1eb      	cbz	r3, 8006662 <main+0x392>
		  midiOutData[1] = (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_13) ? 127 : 0);
 8006626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800662a:	485e      	ldr	r0, [pc, #376]	; (80067a4 <main+0x4d4>)
 800662c:	f7fa fbac 	bl	8000d88 <HAL_GPIO_ReadPin>
 8006630:	2800      	cmp	r0, #0
 8006632:	bf0c      	ite	eq
 8006634:	2300      	moveq	r3, #0
 8006636:	237f      	movne	r3, #127	; 0x7f
 8006638:	706b      	strb	r3, [r5, #1]
		  if((midiOutData[1] > midiOutLastData[1]) || (midiOutData[1] < midiOutLastData[1]))
 800663a:	786a      	ldrb	r2, [r5, #1]
 800663c:	7873      	ldrb	r3, [r6, #1]
 800663e:	429a      	cmp	r2, r3
 8006640:	d803      	bhi.n	800664a <main+0x37a>
 8006642:	786a      	ldrb	r2, [r5, #1]
 8006644:	7873      	ldrb	r3, [r6, #1]
 8006646:	429a      	cmp	r2, r3
 8006648:	d209      	bcs.n	800665e <main+0x38e>
			  txMidiMessage[1][3] = midiOutData[1];
 800664a:	786a      	ldrb	r2, [r5, #1]
			  MIDI_Transmit_FS(txMidiMessage[1],4);
 800664c:	2104      	movs	r1, #4
			  midiOutLastData[1] = midiOutData[1];
 800664e:	786b      	ldrb	r3, [r5, #1]
			  MIDI_Transmit_FS(txMidiMessage[1],4);
 8006650:	a809      	add	r0, sp, #36	; 0x24
			  txMidiMessage[1][3] = midiOutData[1];
 8006652:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
			  midiOutLastData[1] = midiOutData[1];
 8006656:	b2db      	uxtb	r3, r3
 8006658:	7073      	strb	r3, [r6, #1]
			  MIDI_Transmit_FS(txMidiMessage[1],4);
 800665a:	f001 f9b9 	bl	80079d0 <MIDI_Transmit_FS>
			  MIDI_Transmit_FS(txMidiMessage[2],4);
 800665e:	2701      	movs	r7, #1
 8006660:	e7ac      	b.n	80065bc <main+0x2ec>
	  if(adcConvNum == 2 && adcConvNum != lastAdcConvNum)
 8006662:	2c02      	cmp	r4, #2
 8006664:	f47f af6c 	bne.w	8006540 <main+0x270>
 8006668:	2b00      	cmp	r3, #0
 800666a:	f43f af69 	beq.w	8006540 <main+0x270>
		  HAL_ADC_Start(&hadc1);
 800666e:	484e      	ldr	r0, [pc, #312]	; (80067a8 <main+0x4d8>)
 8006670:	f7fa f856 	bl	8000720 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,100);
 8006674:	2164      	movs	r1, #100	; 0x64
 8006676:	484c      	ldr	r0, [pc, #304]	; (80067a8 <main+0x4d8>)
 8006678:	f7fa f8dc 	bl	8000834 <HAL_ADC_PollForConversion>
		  midiOutData[2]= 127 * lpfFilter(HAL_ADC_GetValue(&hadc1), &lpfAdc1)/62;
 800667c:	484a      	ldr	r0, [pc, #296]	; (80067a8 <main+0x4d8>)
 800667e:	f7fa f929 	bl	80008d4 <HAL_ADC_GetValue>
	 filterData->lastData = filterData->lastData - (filterData->LPF_Beta * (filterData->lastData - inputValue));
 8006682:	b2c0      	uxtb	r0, r0
 8006684:	ee07 0a90 	vmov	s15, r0
 8006688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800668c:	ee79 7a67 	vsub.f32	s15, s18, s15
 8006690:	eea7 9aca 	vfms.f32	s18, s15, s20
	 if(filterData->lastData > 255)
 8006694:	eeb4 9ae9 	vcmpe.f32	s18, s19
 8006698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669c:	dc50      	bgt.n	8006740 <main+0x470>
 800669e:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 80066a2:	edcd 7a05 	vstr	s15, [sp, #20]
 80066a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80066aa:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	fbaa 2303 	umull	r2, r3, sl, r3
 80066b4:	f3c3 1307 	ubfx	r3, r3, #4, #8
		  midiOutData[2]= 127 * lpfFilter(HAL_ADC_GetValue(&hadc1), &lpfAdc1)/62;
 80066b8:	70ab      	strb	r3, [r5, #2]
		  if(midiOutData[2] < 63)
 80066ba:	78ab      	ldrb	r3, [r5, #2]
 80066bc:	2b3e      	cmp	r3, #62	; 0x3e
 80066be:	d83c      	bhi.n	800673a <main+0x46a>
			  if(pressedDownFlag != 1)
 80066c0:	f1bb 0f01 	cmp.w	fp, #1
 80066c4:	d008      	beq.n	80066d8 <main+0x408>
				  if(pressedCount == 0)
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d15e      	bne.n	800678a <main+0x4ba>
					  pressedCount = 1;
 80066cc:	2301      	movs	r3, #1
 80066ce:	461f      	mov	r7, r3
 80066d0:	9303      	str	r3, [sp, #12]
					  allOff();
 80066d2:	f7ff fd4d 	bl	8006170 <allOff>
				  pressedDownFlag = 1;
 80066d6:	46bb      	mov	fp, r7
		  if((midiOutData[2] > midiOutLastData[2]) || (midiOutData[2] < midiOutLastData[2]))
 80066d8:	78aa      	ldrb	r2, [r5, #2]
 80066da:	78b3      	ldrb	r3, [r6, #2]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d811      	bhi.n	8006704 <main+0x434>
 80066e0:	78aa      	ldrb	r2, [r5, #2]
 80066e2:	78b3      	ldrb	r3, [r6, #2]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d30d      	bcc.n	8006704 <main+0x434>
 80066e8:	2702      	movs	r7, #2
 80066ea:	e767      	b.n	80065bc <main+0x2ec>
			  txMidiMessage[3][3] = midiOutData[3];
 80066ec:	78ea      	ldrb	r2, [r5, #3]
			  MIDI_Transmit_FS(txMidiMessage[3],4);
 80066ee:	2104      	movs	r1, #4
			  midiOutLastData[3] = midiOutData[3];
 80066f0:	78eb      	ldrb	r3, [r5, #3]
			  MIDI_Transmit_FS(txMidiMessage[3],4);
 80066f2:	a80b      	add	r0, sp, #44	; 0x2c
			  txMidiMessage[3][3] = midiOutData[3];
 80066f4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			  MIDI_Transmit_FS(txMidiMessage[3],4);
 80066f8:	2703      	movs	r7, #3
			  midiOutLastData[3] = midiOutData[3];
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	70f3      	strb	r3, [r6, #3]
			  MIDI_Transmit_FS(txMidiMessage[3],4);
 80066fe:	f001 f967 	bl	80079d0 <MIDI_Transmit_FS>
 8006702:	e75b      	b.n	80065bc <main+0x2ec>
			  txMidiMessage[2][3] = midiOutData[2];
 8006704:	78aa      	ldrb	r2, [r5, #2]
			  MIDI_Transmit_FS(txMidiMessage[2],4);
 8006706:	2104      	movs	r1, #4
			  midiOutLastData[2] = midiOutData[2];
 8006708:	78ab      	ldrb	r3, [r5, #2]
			  MIDI_Transmit_FS(txMidiMessage[2],4);
 800670a:	a80a      	add	r0, sp, #40	; 0x28
			  txMidiMessage[2][3] = midiOutData[2];
 800670c:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
			  MIDI_Transmit_FS(txMidiMessage[2],4);
 8006710:	2702      	movs	r7, #2
			  midiOutLastData[2] = midiOutData[2];
 8006712:	b2db      	uxtb	r3, r3
 8006714:	70b3      	strb	r3, [r6, #2]
			  MIDI_Transmit_FS(txMidiMessage[2],4);
 8006716:	f001 f95b 	bl	80079d0 <MIDI_Transmit_FS>
 800671a:	e74f      	b.n	80065bc <main+0x2ec>
	 if(filterData->lastData > 255)
 800671c:	230a      	movs	r3, #10
		 filterData->lastData = 255;
 800671e:	ed9f 8a23 	vldr	s16, [pc, #140]	; 80067ac <main+0x4dc>
		  midiOutData[3]= 127 * lpfFilter(HAL_ADC_GetValue(&hadc1), &lpfAdc2)/62;
 8006722:	70eb      	strb	r3, [r5, #3]
		  if(midiOutData[3] < 63)
 8006724:	78eb      	ldrb	r3, [r5, #3]
 8006726:	2b3e      	cmp	r3, #62	; 0x3e
 8006728:	f63f af39 	bhi.w	800659e <main+0x2ce>
			  allOff();
 800672c:	f7ff fd20 	bl	8006170 <allOff>
			  momentarySwithWasPressed = 1;
 8006730:	2200      	movs	r2, #0
 8006732:	2301      	movs	r3, #1
 8006734:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8006738:	e735      	b.n	80065a6 <main+0x2d6>
			  pressedDownFlag = 0;
 800673a:	f04f 0b00 	mov.w	fp, #0
 800673e:	e7cb      	b.n	80066d8 <main+0x408>
	 if(filterData->lastData > 255)
 8006740:	230a      	movs	r3, #10
		 filterData->lastData = 255;
 8006742:	ed9f 9a1a 	vldr	s18, [pc, #104]	; 80067ac <main+0x4dc>
 8006746:	e7b7      	b.n	80066b8 <main+0x3e8>
	 if(filterData->lastData > 255)
 8006748:	230a      	movs	r3, #10
		 filterData->lastData = 255;
 800674a:	eddf 8a18 	vldr	s17, [pc, #96]	; 80067ac <main+0x4dc>
		  midiOutData[0]= 127 * lpfFilter(HAL_ADC_GetValue(&hadc1), &lpfAdc0)/62;
 800674e:	702b      	strb	r3, [r5, #0]
		  if(midiOutData[0] < 64)
 8006750:	782b      	ldrb	r3, [r5, #0]
 8006752:	2b3f      	cmp	r3, #63	; 0x3f
 8006754:	f63f aee0 	bhi.w	8006518 <main+0x248>
			  panicOff();
 8006758:	f7ff fcf2 	bl	8006140 <panicOff>
 800675c:	e6dc      	b.n	8006518 <main+0x248>
	if(channel < 65)
 800675e:	2a40      	cmp	r2, #64	; 0x40
 8006760:	f63f aea6 	bhi.w	80064b0 <main+0x1e0>
 8006764:	4610      	mov	r0, r2
 8006766:	2100      	movs	r1, #0
 8006768:	f7fe fe5c 	bl	8005424 <setOutputNoteValue.part.1>
 800676c:	e6a0      	b.n	80064b0 <main+0x1e0>
	if(channel < 65)
 800676e:	2a40      	cmp	r2, #64	; 0x40
 8006770:	f63f ae9e 	bhi.w	80064b0 <main+0x1e0>
 8006774:	4610      	mov	r0, r2
 8006776:	f7ff fccf 	bl	8006118 <setOutputPWMValue.part.0>
 800677a:	e699      	b.n	80064b0 <main+0x1e0>
	if(channel < 65)
 800677c:	2a40      	cmp	r2, #64	; 0x40
 800677e:	f63f ae97 	bhi.w	80064b0 <main+0x1e0>
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe fe4e 	bl	8005424 <setOutputNoteValue.part.1>
 8006788:	e692      	b.n	80064b0 <main+0x1e0>
					  allOn();
 800678a:	f7ff fd0d 	bl	80061a8 <allOn>
 800678e:	465b      	mov	r3, fp
				  pressedDownFlag = 1;
 8006790:	f8dd b00c 	ldr.w	fp, [sp, #12]
					  pressedCount = 0;
 8006794:	9303      	str	r3, [sp, #12]
 8006796:	e79f      	b.n	80066d8 <main+0x408>
				  momentarySwithWasPressed = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	9304      	str	r3, [sp, #16]
				  allOn();
 800679c:	f7ff fd04 	bl	80061a8 <allOn>
 80067a0:	e701      	b.n	80065a6 <main+0x2d6>
 80067a2:	bf00      	nop
 80067a4:	40020000 	.word	0x40020000
 80067a8:	2000029c 	.word	0x2000029c
 80067ac:	437f0000 	.word	0x437f0000

080067b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067b0:	b4f0      	push	{r4, r5, r6, r7}
 80067b2:	4b13      	ldr	r3, [pc, #76]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x50>)
	static int i;
    static uint8_t count = 0;

	for(i = 0; i < 64; ++i)
 80067b4:	4e13      	ldr	r6, [pc, #76]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80067b6:	f503 65e0 	add.w	r5, r3, #1792	; 0x700
	{
		if(outputs[i].gpio != NULL)
		{
			if(outputs[i].pwmFill > count && outputs[i].outputEnabled)
 80067ba:	7931      	ldrb	r1, [r6, #4]
 80067bc:	e005      	b.n	80067ca <HAL_TIM_PeriodElapsedCallback+0x1a>
 80067be:	7e9f      	ldrb	r7, [r3, #26]
 80067c0:	b167      	cbz	r7, 80067dc <HAL_TIM_PeriodElapsedCallback+0x2c>
			{
				outputs[i].gpio->BSRR = outputs[i].pin;
 80067c2:	6190      	str	r0, [r2, #24]
 80067c4:	331c      	adds	r3, #28
	for(i = 0; i < 64; ++i)
 80067c6:	429d      	cmp	r5, r3
 80067c8:	d00c      	beq.n	80067e4 <HAL_TIM_PeriodElapsedCallback+0x34>
		if(outputs[i].gpio != NULL)
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	2a00      	cmp	r2, #0
 80067ce:	d0f9      	beq.n	80067c4 <HAL_TIM_PeriodElapsedCallback+0x14>
			if(outputs[i].pwmFill > count && outputs[i].outputEnabled)
 80067d0:	7e1c      	ldrb	r4, [r3, #24]
 80067d2:	8a98      	ldrh	r0, [r3, #20]
 80067d4:	428c      	cmp	r4, r1
			}
			else
			{
				outputs[i].gpio->BSRR = (uint32_t)outputs[i].pin << 16;
 80067d6:	ea4f 4400 	mov.w	r4, r0, lsl #16
			if(outputs[i].pwmFill > count && outputs[i].outputEnabled)
 80067da:	d8f0      	bhi.n	80067be <HAL_TIM_PeriodElapsedCallback+0xe>
 80067dc:	331c      	adds	r3, #28
				outputs[i].gpio->BSRR = (uint32_t)outputs[i].pin << 16;
 80067de:	6194      	str	r4, [r2, #24]
	for(i = 0; i < 64; ++i)
 80067e0:	429d      	cmp	r5, r3
 80067e2:	d1f2      	bne.n	80067ca <HAL_TIM_PeriodElapsedCallback+0x1a>
			}
		}
	}

	++count;
 80067e4:	3101      	adds	r1, #1
 80067e6:	2340      	movs	r3, #64	; 0x40
 80067e8:	b2c9      	uxtb	r1, r1
 80067ea:	6033      	str	r3, [r6, #0]
	if(count > MAX_SOFT_PWM_VAL)
 80067ec:	290c      	cmp	r1, #12
 80067ee:	d903      	bls.n	80067f8 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		count = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	7133      	strb	r3, [r6, #4]
	}
}
 80067f4:	bcf0      	pop	{r4, r5, r6, r7}
 80067f6:	4770      	bx	lr
	++count;
 80067f8:	7131      	strb	r1, [r6, #4]
}
 80067fa:	bcf0      	pop	{r4, r5, r6, r7}
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	20000838 	.word	0x20000838
 8006804:	2000027c 	.word	0x2000027c

08006808 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	static midiData_t midiFrame;
	static uint8_t frameFlag = 0;
	++rxCount;
 8006808:	4928      	ldr	r1, [pc, #160]	; (80068ac <HAL_UART_RxCpltCallback+0xa4>)
	rxLastMsg[rxCount%3] = rxBuff;
 800680a:	4a29      	ldr	r2, [pc, #164]	; (80068b0 <HAL_UART_RxCpltCallback+0xa8>)
{
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	++rxCount;
 800680e:	780b      	ldrb	r3, [r1, #0]
{
 8006810:	4605      	mov	r5, r0
	if(frameFlag == 3)
 8006812:	4e28      	ldr	r6, [pc, #160]	; (80068b4 <HAL_UART_RxCpltCallback+0xac>)
	++rxCount;
 8006814:	3301      	adds	r3, #1
	rxLastMsg[rxCount%3] = rxBuff;
 8006816:	4c28      	ldr	r4, [pc, #160]	; (80068b8 <HAL_UART_RxCpltCallback+0xb0>)
	++rxCount;
 8006818:	b2db      	uxtb	r3, r3
	rxLastMsg[rxCount%3] = rxBuff;
 800681a:	7827      	ldrb	r7, [r4, #0]
 800681c:	fba2 0203 	umull	r0, r2, r2, r3
	++rxCount;
 8006820:	700b      	strb	r3, [r1, #0]
	rxLastMsg[rxCount%3] = rxBuff;
 8006822:	0852      	lsrs	r2, r2, #1
 8006824:	4925      	ldr	r1, [pc, #148]	; (80068bc <HAL_UART_RxCpltCallback+0xb4>)
 8006826:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800682a:	1a9b      	subs	r3, r3, r2
	if(frameFlag == 3)
 800682c:	7972      	ldrb	r2, [r6, #5]
	rxLastMsg[rxCount%3] = rxBuff;
 800682e:	b2db      	uxtb	r3, r3
	if(frameFlag == 3)
 8006830:	2a03      	cmp	r2, #3
	rxLastMsg[rxCount%3] = rxBuff;
 8006832:	54cf      	strb	r7, [r1, r3]
	if(frameFlag == 3)
 8006834:	d01d      	beq.n	8006872 <HAL_UART_RxCpltCallback+0x6a>
	{
		midiFrame.data2 = rxBuff;
		push(&fifo,&midiFrame);
		frameFlag = 0;
	}
	if(frameFlag == 2)
 8006836:	2a02      	cmp	r2, #2
 8006838:	d011      	beq.n	800685e <HAL_UART_RxCpltCallback+0x56>
	{
		midiFrame.data1 = rxBuff;
		frameFlag = 3;
	}
	if(frameFlag == 0)
 800683a:	bb7a      	cbnz	r2, 800689c <HAL_UART_RxCpltCallback+0x94>
	{
		if(rxBuff == MIDI_STATUS_CC || rxBuff == MIDI_STATUS_NOTE_ON || rxBuff == MIDI_STATUS_NOTE_OFF)
 800683c:	7827      	ldrb	r7, [r4, #0]
 800683e:	f1a7 0308 	sub.w	r3, r7, #8
 8006842:	2b01      	cmp	r3, #1
 8006844:	d901      	bls.n	800684a <HAL_UART_RxCpltCallback+0x42>
 8006846:	2f0b      	cmp	r7, #11
 8006848:	d11c      	bne.n	8006884 <HAL_UART_RxCpltCallback+0x7c>
		{
			midiFrame.status = rxBuff;
			midiFrame.channel = rxBuff<<4;
 800684a:	013b      	lsls	r3, r7, #4
			midiFrame.status = rxBuff;
 800684c:	7237      	strb	r7, [r6, #8]
			midiFrame.channel = rxBuff<<4;
 800684e:	b2da      	uxtb	r2, r3
 8006850:	7272      	strb	r2, [r6, #9]
			frameFlag = 2;
		}
	}
	if(frameFlag == 1)
	{
		if(midiFrame.channel == (rxBuff << 4))
 8006852:	429a      	cmp	r2, r3
 8006854:	d027      	beq.n	80068a6 <HAL_UART_RxCpltCallback+0x9e>
		{
			frameFlag = 2;
		}
		else
		{
			midiFrame.status = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	8133      	strh	r3, [r6, #8]
			midiFrame.channel = 0;
			frameFlag = 0;
 800685a:	7173      	strb	r3, [r6, #5]
 800685c:	e002      	b.n	8006864 <HAL_UART_RxCpltCallback+0x5c>
		frameFlag = 3;
 800685e:	2303      	movs	r3, #3
		midiFrame.data1 = rxBuff;
 8006860:	72b7      	strb	r7, [r6, #10]
		frameFlag = 3;
 8006862:	7173      	strb	r3, [r6, #5]
		}
	}
	HAL_UART_Receive_IT(huart,&rxBuff,1);
 8006864:	4628      	mov	r0, r5
 8006866:	2201      	movs	r2, #1
 8006868:	4913      	ldr	r1, [pc, #76]	; (80068b8 <HAL_UART_RxCpltCallback+0xb0>)
}
 800686a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_UART_Receive_IT(huart,&rxBuff,1);
 800686e:	f7fc bc3f 	b.w	80030f0 <HAL_UART_Receive_IT>
		push(&fifo,&midiFrame);
 8006872:	f106 0108 	add.w	r1, r6, #8
 8006876:	4812      	ldr	r0, [pc, #72]	; (80068c0 <HAL_UART_RxCpltCallback+0xb8>)
		midiFrame.data2 = rxBuff;
 8006878:	72f7      	strb	r7, [r6, #11]
		push(&fifo,&midiFrame);
 800687a:	f7fe fb37 	bl	8004eec <push>
		frameFlag = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	7173      	strb	r3, [r6, #5]
 8006882:	e7db      	b.n	800683c <HAL_UART_RxCpltCallback+0x34>
		else if(rxBuff >> 4 == MIDI_STATUS_CC || rxBuff >> 4 == MIDI_STATUS_NOTE_ON || rxBuff >> 4 == MIDI_STATUS_NOTE_OFF)
 8006884:	093b      	lsrs	r3, r7, #4
 8006886:	f1a3 0208 	sub.w	r2, r3, #8
 800688a:	2a01      	cmp	r2, #1
 800688c:	d901      	bls.n	8006892 <HAL_UART_RxCpltCallback+0x8a>
 800688e:	2b0b      	cmp	r3, #11
 8006890:	d1e8      	bne.n	8006864 <HAL_UART_RxCpltCallback+0x5c>
			frameFlag = 2;
 8006892:	2202      	movs	r2, #2
			midiFrame.status = rxBuff >> 4;
 8006894:	7233      	strb	r3, [r6, #8]
			midiFrame.channel = rxBuff;
 8006896:	7277      	strb	r7, [r6, #9]
			frameFlag = 2;
 8006898:	7172      	strb	r2, [r6, #5]
 800689a:	e7e3      	b.n	8006864 <HAL_UART_RxCpltCallback+0x5c>
	if(frameFlag == 1)
 800689c:	2a01      	cmp	r2, #1
 800689e:	d1e1      	bne.n	8006864 <HAL_UART_RxCpltCallback+0x5c>
 80068a0:	013b      	lsls	r3, r7, #4
 80068a2:	7a72      	ldrb	r2, [r6, #9]
 80068a4:	e7d5      	b.n	8006852 <HAL_UART_RxCpltCallback+0x4a>
			frameFlag = 2;
 80068a6:	2302      	movs	r3, #2
 80068a8:	7173      	strb	r3, [r6, #5]
 80068aa:	e7db      	b.n	8006864 <HAL_UART_RxCpltCallback+0x5c>
 80068ac:	20000828 	.word	0x20000828
 80068b0:	aaaaaaab 	.word	0xaaaaaaab
 80068b4:	2000027c 	.word	0x2000027c
 80068b8:	20000f3c 	.word	0x20000f3c
 80068bc:	20000f38 	.word	0x20000f38
 80068c0:	2000082c 	.word	0x2000082c

080068c4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop

080068c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <HAL_MspInit+0x2c>)
{
 80068ca:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80068cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40
 80068d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80068da:	9200      	str	r2, [sp, #0]
 80068dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44
 80068e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068f0:	b002      	add	sp, #8
 80068f2:	4770      	bx	lr
 80068f4:	40023800 	.word	0x40023800

080068f8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop

080068fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068fc:	e7fe      	b.n	80068fc <HardFault_Handler>
 80068fe:	bf00      	nop

08006900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006900:	e7fe      	b.n	8006900 <MemManage_Handler>
 8006902:	bf00      	nop

08006904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006904:	e7fe      	b.n	8006904 <BusFault_Handler>
 8006906:	bf00      	nop

08006908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006908:	e7fe      	b.n	8006908 <UsageFault_Handler>
 800690a:	bf00      	nop

0800690c <SVC_Handler>:
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop

08006910 <DebugMon_Handler>:
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop

08006914 <PendSV_Handler>:
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop

08006918 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006918:	f7f9 be28 	b.w	800056c <HAL_IncTick>

0800691c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800691c:	4801      	ldr	r0, [pc, #4]	; (8006924 <TIM6_DAC_IRQHandler+0x8>)
 800691e:	f7fc b93f 	b.w	8002ba0 <HAL_TIM_IRQHandler>
 8006922:	bf00      	nop
 8006924:	20001104 	.word	0x20001104

08006928 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <OTG_FS_IRQHandler+0x8>)
 800692a:	f7fa bd0b 	b.w	8001344 <HAL_PCD_IRQHandler>
 800692e:	bf00      	nop
 8006930:	200015a0 	.word	0x200015a0

08006934 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006934:	4801      	ldr	r0, [pc, #4]	; (800693c <UART8_IRQHandler+0x8>)
 8006936:	f7fc bca7 	b.w	8003288 <HAL_UART_IRQHandler>
 800693a:	bf00      	nop
 800693c:	20001284 	.word	0x20001284

08006940 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006940:	4a0c      	ldr	r2, [pc, #48]	; (8006974 <_sbrk+0x34>)
{
 8006942:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8006944:	6813      	ldr	r3, [r2, #0]
 8006946:	b133      	cbz	r3, 8006956 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8006948:	4418      	add	r0, r3
 800694a:	4669      	mov	r1, sp
 800694c:	4288      	cmp	r0, r1
 800694e:	d809      	bhi.n	8006964 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8006950:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8006952:	4618      	mov	r0, r3
 8006954:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8006956:	4908      	ldr	r1, [pc, #32]	; (8006978 <_sbrk+0x38>)
 8006958:	460b      	mov	r3, r1
 800695a:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800695c:	4669      	mov	r1, sp
 800695e:	4418      	add	r0, r3
 8006960:	4288      	cmp	r0, r1
 8006962:	d9f5      	bls.n	8006950 <_sbrk+0x10>
		errno = ENOMEM;
 8006964:	f001 f874 	bl	8007a50 <__errno>
 8006968:	220c      	movs	r2, #12
		return (caddr_t) -1;
 800696a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		errno = ENOMEM;
 800696e:	6002      	str	r2, [r0, #0]
}
 8006970:	4618      	mov	r0, r3
 8006972:	bd08      	pop	{r3, pc}
 8006974:	20000288 	.word	0x20000288
 8006978:	20002ba8 	.word	0x20002ba8

0800697c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800697c:	4a0f      	ldr	r2, [pc, #60]	; (80069bc <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800697e:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006980:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006984:	490f      	ldr	r1, [pc, #60]	; (80069c4 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006986:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 800698a:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800698c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8006990:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8006992:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006994:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8006998:	4e0b      	ldr	r6, [pc, #44]	; (80069c8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800699a:	f040 0001 	orr.w	r0, r0, #1
 800699e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 80069a0:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	4001      	ands	r1, r0
 80069a6:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 80069a8:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80069aa:	6819      	ldr	r1, [r3, #0]
 80069ac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80069b0:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 80069b2:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069b4:	6095      	str	r5, [r2, #8]
#endif
}
 80069b6:	bc70      	pop	{r4, r5, r6}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	e000ed00 	.word	0xe000ed00
 80069c0:	40023800 	.word	0x40023800
 80069c4:	fef6ffff 	.word	0xfef6ffff
 80069c8:	24003010 	.word	0x24003010

080069cc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 80069cc:	4a10      	ldr	r2, [pc, #64]	; (8006a10 <MX_TIM6_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069ce:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 499;
 80069d0:	f240 11f3 	movw	r1, #499	; 0x1f3
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80069d4:	4610      	mov	r0, r2
{
 80069d6:	b510      	push	{r4, lr}
  htim6.Instance = TIM6;
 80069d8:	4c0e      	ldr	r4, [pc, #56]	; (8006a14 <MX_TIM6_Init+0x48>)
{
 80069da:	b084      	sub	sp, #16
  htim6.Init.Period = 499;
 80069dc:	60d1      	str	r1, [r2, #12]
  htim6.Instance = TIM6;
 80069de:	6014      	str	r4, [r2, #0]
  htim6.Init.Prescaler = 0;
 80069e0:	6053      	str	r3, [r2, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069e2:	9301      	str	r3, [sp, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069e4:	6093      	str	r3, [r2, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069e6:	6193      	str	r3, [r2, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80069ec:	f7fc fa00 	bl	8002df0 <HAL_TIM_Base_Init>
 80069f0:	b958      	cbnz	r0, 8006a0a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069f2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80069f4:	a901      	add	r1, sp, #4
 80069f6:	4806      	ldr	r0, [pc, #24]	; (8006a10 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069f8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069fa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80069fc:	f7fc fafa 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8006a00:	b108      	cbz	r0, 8006a06 <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
 8006a02:	f7ff ff5f 	bl	80068c4 <Error_Handler>
  }

}
 8006a06:	b004      	add	sp, #16
 8006a08:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006a0a:	f7ff ff5b 	bl	80068c4 <Error_Handler>
 8006a0e:	e7f0      	b.n	80069f2 <MX_TIM6_Init+0x26>
 8006a10:	20001104 	.word	0x20001104
 8006a14:	40001000 	.word	0x40001000

08006a18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{


  if(tim_pwmHandle->Instance==TIM1)
 8006a18:	6803      	ldr	r3, [r0, #0]
{
 8006a1a:	b088      	sub	sp, #32
  if(tim_pwmHandle->Instance==TIM1)
 8006a1c:	4a3a      	ldr	r2, [pc, #232]	; (8006b08 <HAL_TIM_PWM_MspInit+0xf0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d02c      	beq.n	8006a7c <HAL_TIM_PWM_MspInit+0x64>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  if(tim_pwmHandle->Instance==TIM2)
 8006a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a26:	d01c      	beq.n	8006a62 <HAL_TIM_PWM_MspInit+0x4a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM3)
 8006a28:	4a38      	ldr	r2, [pc, #224]	; (8006b0c <HAL_TIM_PWM_MspInit+0xf4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d03e      	beq.n	8006aac <HAL_TIM_PWM_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM4)
 8006a2e:	4a38      	ldr	r2, [pc, #224]	; (8006b10 <HAL_TIM_PWM_MspInit+0xf8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d02f      	beq.n	8006a94 <HAL_TIM_PWM_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM5)
 8006a34:	4a37      	ldr	r2, [pc, #220]	; (8006b14 <HAL_TIM_PWM_MspInit+0xfc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d044      	beq.n	8006ac4 <HAL_TIM_PWM_MspInit+0xac>

   /* USER CODE BEGIN TIM5_MspInit 1 */

   /* USER CODE END TIM5_MspInit 1 */
   }
  else if(tim_pwmHandle->Instance==TIM8)
 8006a3a:	4a37      	ldr	r2, [pc, #220]	; (8006b18 <HAL_TIM_PWM_MspInit+0x100>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d04d      	beq.n	8006adc <HAL_TIM_PWM_MspInit+0xc4>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM9)
 8006a40:	4a36      	ldr	r2, [pc, #216]	; (8006b1c <HAL_TIM_PWM_MspInit+0x104>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d055      	beq.n	8006af2 <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM12)
 8006a46:	4a36      	ldr	r2, [pc, #216]	; (8006b20 <HAL_TIM_PWM_MspInit+0x108>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d115      	bne.n	8006a78 <HAL_TIM_PWM_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8006a4c:	4b35      	ldr	r3, [pc, #212]	; (8006b24 <HAL_TIM_PWM_MspInit+0x10c>)
 8006a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a54:	641a      	str	r2, [r3, #64]	; 0x40
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5c:	9307      	str	r3, [sp, #28]
 8006a5e:	9b07      	ldr	r3, [sp, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8006a60:	e00a      	b.n	8006a78 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006a62:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a68:	f042 0201 	orr.w	r2, r2, #1
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	9b01      	ldr	r3, [sp, #4]
}
 8006a78:	b008      	add	sp, #32
 8006a7a:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a7c:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <HAL_TIM_PWM_MspInit+0x10c>)
 8006a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	645a      	str	r2, [r3, #68]	; 0x44
 8006a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	9b00      	ldr	r3, [sp, #0]
}
 8006a90:	b008      	add	sp, #32
 8006a92:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006a94:	4b23      	ldr	r3, [pc, #140]	; (8006b24 <HAL_TIM_PWM_MspInit+0x10c>)
 8006a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a98:	f042 0204 	orr.w	r2, r2, #4
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	9303      	str	r3, [sp, #12]
 8006aa6:	9b03      	ldr	r3, [sp, #12]
}
 8006aa8:	b008      	add	sp, #32
 8006aaa:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006aac:	4b1d      	ldr	r3, [pc, #116]	; (8006b24 <HAL_TIM_PWM_MspInit+0x10c>)
 8006aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab0:	f042 0202 	orr.w	r2, r2, #2
 8006ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	9302      	str	r3, [sp, #8]
 8006abe:	9b02      	ldr	r3, [sp, #8]
}
 8006ac0:	b008      	add	sp, #32
 8006ac2:	4770      	bx	lr
     __HAL_RCC_TIM5_CLK_ENABLE();
 8006ac4:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <HAL_TIM_PWM_MspInit+0x10c>)
 8006ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ac8:	f042 0208 	orr.w	r2, r2, #8
 8006acc:	641a      	str	r2, [r3, #64]	; 0x40
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	9304      	str	r3, [sp, #16]
 8006ad6:	9b04      	ldr	r3, [sp, #16]
}
 8006ad8:	b008      	add	sp, #32
 8006ada:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006adc:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <HAL_TIM_PWM_MspInit+0x10c>)
 8006ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae0:	f042 0202 	orr.w	r2, r2, #2
 8006ae4:	645a      	str	r2, [r3, #68]	; 0x44
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	9305      	str	r3, [sp, #20]
 8006aee:	9b05      	ldr	r3, [sp, #20]
 8006af0:	e7c2      	b.n	8006a78 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006af2:	4b0c      	ldr	r3, [pc, #48]	; (8006b24 <HAL_TIM_PWM_MspInit+0x10c>)
 8006af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006afa:	645a      	str	r2, [r3, #68]	; 0x44
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b02:	9306      	str	r3, [sp, #24]
 8006b04:	9b06      	ldr	r3, [sp, #24]
 8006b06:	e7b7      	b.n	8006a78 <HAL_TIM_PWM_MspInit+0x60>
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40000400 	.word	0x40000400
 8006b10:	40000800 	.word	0x40000800
 8006b14:	40000c00 	.word	0x40000c00
 8006b18:	40010400 	.word	0x40010400
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40001800 	.word	0x40001800
 8006b24:	40023800 	.word	0x40023800

08006b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
  if(tim_baseHandle->Instance==TIM6)
 8006b28:	6803      	ldr	r3, [r0, #0]
 8006b2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ba0 <HAL_TIM_Base_MspInit+0x78>)
 8006b2c:	4293      	cmp	r3, r2
{
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM6)
 8006b32:	d01f      	beq.n	8006b74 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM10)
 8006b34:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <HAL_TIM_Base_MspInit+0x7c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d010      	beq.n	8006b5c <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM11)
 8006b3a:	4a1b      	ldr	r2, [pc, #108]	; (8006ba8 <HAL_TIM_Base_MspInit+0x80>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d001      	beq.n	8006b44 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006b40:	b004      	add	sp, #16
 8006b42:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006b44:	4b19      	ldr	r3, [pc, #100]	; (8006bac <HAL_TIM_Base_MspInit+0x84>)
 8006b46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b4c:	645a      	str	r2, [r3, #68]	; 0x44
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b54:	9303      	str	r3, [sp, #12]
 8006b56:	9b03      	ldr	r3, [sp, #12]
}
 8006b58:	b004      	add	sp, #16
 8006b5a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006b5c:	4b13      	ldr	r3, [pc, #76]	; (8006bac <HAL_TIM_Base_MspInit+0x84>)
 8006b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006b64:	645a      	str	r2, [r3, #68]	; 0x44
 8006b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6c:	9302      	str	r3, [sp, #8]
 8006b6e:	9b02      	ldr	r3, [sp, #8]
}
 8006b70:	b004      	add	sp, #16
 8006b72:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006b74:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <HAL_TIM_Base_MspInit+0x84>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006b76:	2200      	movs	r2, #0
 8006b78:	2101      	movs	r1, #1
 8006b7a:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006b7c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006b7e:	f044 0410 	orr.w	r4, r4, #16
 8006b82:	641c      	str	r4, [r3, #64]	; 0x40
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006b8e:	f7f9 ff6d 	bl	8000a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006b92:	2036      	movs	r0, #54	; 0x36
}
 8006b94:	b004      	add	sp, #16
 8006b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006b9a:	f7f9 bf9d 	b.w	8000ad8 <HAL_NVIC_EnableIRQ>
 8006b9e:	bf00      	nop
 8006ba0:	40001000 	.word	0x40001000
 8006ba4:	40014400 	.word	0x40014400
 8006ba8:	40014800 	.word	0x40014800
 8006bac:	40023800 	.word	0x40023800

08006bb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8006bb0:	6803      	ldr	r3, [r0, #0]
 8006bb2:	4a86      	ldr	r2, [pc, #536]	; (8006dcc <HAL_TIM_MspPostInit+0x21c>)
{
 8006bb4:	b570      	push	{r4, r5, r6, lr}
  if(timHandle->Instance==TIM1)
 8006bb6:	4293      	cmp	r3, r2
{
 8006bb8:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bba:	f04f 0400 	mov.w	r4, #0
 8006bbe:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006bc2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8006bc6:	940f      	str	r4, [sp, #60]	; 0x3c
  if(timHandle->Instance==TIM1)
 8006bc8:	d035      	beq.n	8006c36 <HAL_TIM_MspPostInit+0x86>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 8006bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bce:	d049      	beq.n	8006c64 <HAL_TIM_MspPostInit+0xb4>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8006bd0:	4a7f      	ldr	r2, [pc, #508]	; (8006dd0 <HAL_TIM_MspPostInit+0x220>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d06b      	beq.n	8006cae <HAL_TIM_MspPostInit+0xfe>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 8006bd6:	4a7f      	ldr	r2, [pc, #508]	; (8006dd4 <HAL_TIM_MspPostInit+0x224>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d07b      	beq.n	8006cd4 <HAL_TIM_MspPostInit+0x124>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM5)
 8006bdc:	4a7e      	ldr	r2, [pc, #504]	; (8006dd8 <HAL_TIM_MspPostInit+0x228>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d015      	beq.n	8006c0e <HAL_TIM_MspPostInit+0x5e>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8006be2:	4a7e      	ldr	r2, [pc, #504]	; (8006ddc <HAL_TIM_MspPostInit+0x22c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	f000 808a 	beq.w	8006cfe <HAL_TIM_MspPostInit+0x14e>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM9)
 8006bea:	4a7d      	ldr	r2, [pc, #500]	; (8006de0 <HAL_TIM_MspPostInit+0x230>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	f000 809c 	beq.w	8006d2a <HAL_TIM_MspPostInit+0x17a>

  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM10)
 8006bf2:	4a7c      	ldr	r2, [pc, #496]	; (8006de4 <HAL_TIM_MspPostInit+0x234>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	f000 80c1 	beq.w	8006d7c <HAL_TIM_MspPostInit+0x1cc>

  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM11)
 8006bfa:	4a7b      	ldr	r2, [pc, #492]	; (8006de8 <HAL_TIM_MspPostInit+0x238>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	f000 80d1 	beq.w	8006da4 <HAL_TIM_MspPostInit+0x1f4>

  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM12)
 8006c02:	4a7a      	ldr	r2, [pc, #488]	; (8006dec <HAL_TIM_MspPostInit+0x23c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	f000 80a5 	beq.w	8006d54 <HAL_TIM_MspPostInit+0x1a4>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8006c0a:	b010      	add	sp, #64	; 0x40
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c0e:	4b78      	ldr	r3, [pc, #480]	; (8006df0 <HAL_TIM_MspPostInit+0x240>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c10:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = PWM13_Pin|PWM14_Pin|PWM15_Pin|PWM16_Pin;
 8006c12:	250f      	movs	r5, #15
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c14:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c18:	4876      	ldr	r0, [pc, #472]	; (8006df4 <HAL_TIM_MspPostInit+0x244>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM13_Pin|PWM14_Pin|PWM15_Pin|PWM16_Pin;
 8006c22:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c24:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c28:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006c2a:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c2c:	9305      	str	r3, [sp, #20]
 8006c2e:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c30:	f7f9 ff8c 	bl	8000b4c <HAL_GPIO_Init>
 8006c34:	e7e9      	b.n	8006c0a <HAL_TIM_MspPostInit+0x5a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c36:	4b6e      	ldr	r3, [pc, #440]	; (8006df0 <HAL_TIM_MspPostInit+0x240>)
    GPIO_InitStruct.Pin = PWM24_Pin|PWM26_Pin|PWM28_Pin|PWM29_Pin;
 8006c38:	f44f 46d4 	mov.w	r6, #27136	; 0x6a00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c3c:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c3e:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c42:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c44:	486c      	ldr	r0, [pc, #432]	; (8006df8 <HAL_TIM_MspPostInit+0x248>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c46:	f042 0210 	orr.w	r2, r2, #16
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM24_Pin|PWM26_Pin|PWM28_Pin|PWM29_Pin;
 8006c4e:	960b      	str	r6, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c50:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c54:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c56:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c5c:	f7f9 ff76 	bl	8000b4c <HAL_GPIO_Init>
}
 8006c60:	b010      	add	sp, #64	; 0x40
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c64:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006c68:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin = PWM14_Pin;
 8006c6a:	2502      	movs	r5, #2
    HAL_GPIO_Init(PWM14_GPIO_Port, &GPIO_InitStruct);
 8006c6c:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(PWM14_GPIO_Port, &GPIO_InitStruct);
 8006c70:	4860      	ldr	r0, [pc, #384]	; (8006df4 <HAL_TIM_MspPostInit+0x244>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c72:	4332      	orrs	r2, r6
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
 8006c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c78:	4032      	ands	r2, r6
 8006c7a:	9201      	str	r2, [sp, #4]
 8006c7c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c80:	432a      	orrs	r2, r5
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM14_Pin;
 8006c86:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c88:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c8a:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006c8c:	960f      	str	r6, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c8e:	9302      	str	r3, [sp, #8]
 8006c90:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(PWM14_GPIO_Port, &GPIO_InitStruct);
 8006c92:	f7f9 ff5b 	bl	8000b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM58_Pin;
 8006c96:	2308      	movs	r3, #8
    HAL_GPIO_Init(PWM58_GPIO_Port, &GPIO_InitStruct);
 8006c98:	a90b      	add	r1, sp, #44	; 0x2c
 8006c9a:	4858      	ldr	r0, [pc, #352]	; (8006dfc <HAL_TIM_MspPostInit+0x24c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c9c:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006c9e:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = PWM58_Pin;
 8006ca0:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(PWM58_GPIO_Port, &GPIO_InitStruct);
 8006ca6:	f7f9 ff51 	bl	8000b4c <HAL_GPIO_Init>
}
 8006caa:	b010      	add	sp, #64	; 0x40
 8006cac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cae:	4b50      	ldr	r3, [pc, #320]	; (8006df0 <HAL_TIM_MspPostInit+0x240>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cb0:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = PWM19_Pin|PWM20_Pin|PWM59_Pin|PWM60_Pin;
 8006cb2:	2533      	movs	r5, #51	; 0x33
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cb4:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cb8:	4850      	ldr	r0, [pc, #320]	; (8006dfc <HAL_TIM_MspPostInit+0x24c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cba:	4322      	orrs	r2, r4
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM19_Pin|PWM20_Pin|PWM59_Pin|PWM60_Pin;
 8006cc0:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cc2:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc4:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006cc6:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cc8:	9303      	str	r3, [sp, #12]
 8006cca:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ccc:	f7f9 ff3e 	bl	8000b4c <HAL_GPIO_Init>
}
 8006cd0:	b010      	add	sp, #64	; 0x40
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006cd4:	4b46      	ldr	r3, [pc, #280]	; (8006df0 <HAL_TIM_MspPostInit+0x240>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = PWM39_Pin|PWM40_Pin;
 8006cd8:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cdc:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ce0:	4847      	ldr	r0, [pc, #284]	; (8006e00 <HAL_TIM_MspPostInit+0x250>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ce2:	f042 0208 	orr.w	r2, r2, #8
 8006ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM39_Pin|PWM40_Pin;
 8006cea:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006cec:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf0:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006cf2:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006cf4:	9304      	str	r3, [sp, #16]
 8006cf6:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cf8:	f7f9 ff28 	bl	8000b4c <HAL_GPIO_Init>
 8006cfc:	e785      	b.n	8006c0a <HAL_TIM_MspPostInit+0x5a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cfe:	4b3c      	ldr	r3, [pc, #240]	; (8006df0 <HAL_TIM_MspPostInit+0x240>)
    GPIO_InitStruct.Pin = PWM41_Pin|PWM42_Pin|PWM43_Pin;
 8006d00:	f44f 76e0 	mov.w	r6, #448	; 0x1c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d04:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006d06:	2403      	movs	r4, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d0a:	a90b      	add	r1, sp, #44	; 0x2c
 8006d0c:	483d      	ldr	r0, [pc, #244]	; (8006e04 <HAL_TIM_MspPostInit+0x254>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d0e:	f042 0204 	orr.w	r2, r2, #4
 8006d12:	631a      	str	r2, [r3, #48]	; 0x30
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM41_Pin|PWM42_Pin|PWM43_Pin;
 8006d16:	960b      	str	r6, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d18:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d1c:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006d1e:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d20:	9306      	str	r3, [sp, #24]
 8006d22:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d24:	f7f9 ff12 	bl	8000b4c <HAL_GPIO_Init>
 8006d28:	e76f      	b.n	8006c0a <HAL_TIM_MspPostInit+0x5a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d2a:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <HAL_TIM_MspPostInit+0x240>)
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin;
 8006d2c:	2660      	movs	r6, #96	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d2e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8006d30:	2403      	movs	r4, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d34:	a90b      	add	r1, sp, #44	; 0x2c
 8006d36:	4830      	ldr	r0, [pc, #192]	; (8006df8 <HAL_TIM_MspPostInit+0x248>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d38:	f042 0210 	orr.w	r2, r2, #16
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin;
 8006d40:	960b      	str	r6, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d42:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d46:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8006d48:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d4a:	9307      	str	r3, [sp, #28]
 8006d4c:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d4e:	f7f9 fefd 	bl	8000b4c <HAL_GPIO_Init>
 8006d52:	e75a      	b.n	8006c0a <HAL_TIM_MspPostInit+0x5a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d54:	4b26      	ldr	r3, [pc, #152]	; (8006df0 <HAL_TIM_MspPostInit+0x240>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d56:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = PWM33_Pin|PWM34_Pin;
 8006d58:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006d5c:	2409      	movs	r4, #9
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d60:	a90b      	add	r1, sp, #44	; 0x2c
 8006d62:	4826      	ldr	r0, [pc, #152]	; (8006dfc <HAL_TIM_MspPostInit+0x24c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d64:	432a      	orrs	r2, r5
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM33_Pin|PWM34_Pin;
 8006d6a:	960b      	str	r6, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d6c:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d6e:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006d70:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d72:	930a      	str	r3, [sp, #40]	; 0x28
 8006d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d76:	f7f9 fee9 	bl	8000b4c <HAL_GPIO_Init>
}
 8006d7a:	e746      	b.n	8006c0a <HAL_TIM_MspPostInit+0x5a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d7c:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <HAL_TIM_MspPostInit+0x240>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d7e:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = PWM61_Pin;
 8006d80:	f44f 7680 	mov.w	r6, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006d84:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(PWM61_GPIO_Port, &GPIO_InitStruct);
 8006d88:	a90b      	add	r1, sp, #44	; 0x2c
 8006d8a:	481c      	ldr	r0, [pc, #112]	; (8006dfc <HAL_TIM_MspPostInit+0x24c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d8c:	432a      	orrs	r2, r5
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM61_Pin;
 8006d92:	960b      	str	r6, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d94:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d96:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006d98:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d9a:	9308      	str	r3, [sp, #32]
 8006d9c:	9b08      	ldr	r3, [sp, #32]
    HAL_GPIO_Init(PWM61_GPIO_Port, &GPIO_InitStruct);
 8006d9e:	f7f9 fed5 	bl	8000b4c <HAL_GPIO_Init>
 8006da2:	e732      	b.n	8006c0a <HAL_TIM_MspPostInit+0x5a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da4:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <HAL_TIM_MspPostInit+0x240>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006da6:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = PWM62_Pin;
 8006da8:	f44f 7600 	mov.w	r6, #512	; 0x200
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006dac:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(PWM62_GPIO_Port, &GPIO_InitStruct);
 8006db0:	a90b      	add	r1, sp, #44	; 0x2c
 8006db2:	4812      	ldr	r0, [pc, #72]	; (8006dfc <HAL_TIM_MspPostInit+0x24c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db4:	432a      	orrs	r2, r5
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = PWM62_Pin;
 8006dba:	960b      	str	r6, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dbc:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dbe:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006dc0:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM62_GPIO_Port, &GPIO_InitStruct);
 8006dc6:	f7f9 fec1 	bl	8000b4c <HAL_GPIO_Init>
 8006dca:	e71e      	b.n	8006c0a <HAL_TIM_MspPostInit+0x5a>
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40000800 	.word	0x40000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	40010400 	.word	0x40010400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800
 8006dec:	40001800 	.word	0x40001800
 8006df0:	40023800 	.word	0x40023800
 8006df4:	40020000 	.word	0x40020000
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40020400 	.word	0x40020400
 8006e00:	40020c00 	.word	0x40020c00
 8006e04:	40020800 	.word	0x40020800

08006e08 <MX_TIM1_Init>:
{
 8006e08:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 8006e0a:	4a2e      	ldr	r2, [pc, #184]	; (8006ec4 <MX_TIM1_Init+0xbc>)
  htim1.Init.Prescaler = 112;
 8006e0c:	2070      	movs	r0, #112	; 0x70
  htim1.Instance = TIM1;
 8006e0e:	4c2e      	ldr	r4, [pc, #184]	; (8006ec8 <MX_TIM1_Init+0xc0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e10:	2300      	movs	r3, #0
{
 8006e12:	b08a      	sub	sp, #40	; 0x28
  htim1.Init.Period = 127;
 8006e14:	217f      	movs	r1, #127	; 0x7f
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e16:	6193      	str	r3, [r2, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e18:	9300      	str	r3, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006e1a:	9303      	str	r3, [sp, #12]
  htim1.Init.Prescaler = 112;
 8006e1c:	e9c2 4000 	strd	r4, r0, [r2]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006e20:	4610      	mov	r0, r2
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e22:	e9c2 3102 	strd	r3, r1, [r2, #8]
  htim1.Init.RepetitionCounter = 0;
 8006e26:	e9c2 3304 	strd	r3, r3, [r2, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e2a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006e2e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006e32:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8006e36:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006e3a:	f7fb fff5 	bl	8002e28 <HAL_TIM_PWM_Init>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d13c      	bne.n	8006ebc <MX_TIM1_Init+0xb4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e42:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006e44:	4669      	mov	r1, sp
 8006e46:	481f      	ldr	r0, [pc, #124]	; (8006ec4 <MX_TIM1_Init+0xbc>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e48:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006e4a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006e4e:	f7fc f8d1 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8006e52:	bb80      	cbnz	r0, 8006eb6 <MX_TIM1_Init+0xae>
  sConfigOC.Pulse = 0;
 8006e54:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006e56:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006e58:	a903      	add	r1, sp, #12
 8006e5a:	481a      	ldr	r0, [pc, #104]	; (8006ec4 <MX_TIM1_Init+0xbc>)
 8006e5c:	461a      	mov	r2, r3
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006e5e:	9403      	str	r4, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006e60:	e9cd 3304 	strd	r3, r3, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006e64:	e9cd 3306 	strd	r3, r3, [sp, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006e68:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006e6c:	f7fc f82c 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006e70:	b9f0      	cbnz	r0, 8006eb0 <MX_TIM1_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006e72:	2204      	movs	r2, #4
 8006e74:	a903      	add	r1, sp, #12
 8006e76:	4813      	ldr	r0, [pc, #76]	; (8006ec4 <MX_TIM1_Init+0xbc>)
 8006e78:	f7fc f826 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006e7c:	b9a8      	cbnz	r0, 8006eaa <MX_TIM1_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006e7e:	2208      	movs	r2, #8
 8006e80:	a903      	add	r1, sp, #12
 8006e82:	4810      	ldr	r0, [pc, #64]	; (8006ec4 <MX_TIM1_Init+0xbc>)
 8006e84:	f7fc f820 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006e88:	b960      	cbnz	r0, 8006ea4 <MX_TIM1_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006e8a:	a903      	add	r1, sp, #12
 8006e8c:	220c      	movs	r2, #12
 8006e8e:	480d      	ldr	r0, [pc, #52]	; (8006ec4 <MX_TIM1_Init+0xbc>)
 8006e90:	f7fc f81a 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006e94:	b108      	cbz	r0, 8006e9a <MX_TIM1_Init+0x92>
    Error_Handler();
 8006e96:	f7ff fd15 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8006e9a:	480a      	ldr	r0, [pc, #40]	; (8006ec4 <MX_TIM1_Init+0xbc>)
 8006e9c:	f7ff fe88 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 8006ea0:	b00a      	add	sp, #40	; 0x28
 8006ea2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006ea4:	f7ff fd0e 	bl	80068c4 <Error_Handler>
 8006ea8:	e7ef      	b.n	8006e8a <MX_TIM1_Init+0x82>
    Error_Handler();
 8006eaa:	f7ff fd0b 	bl	80068c4 <Error_Handler>
 8006eae:	e7e6      	b.n	8006e7e <MX_TIM1_Init+0x76>
    Error_Handler();
 8006eb0:	f7ff fd08 	bl	80068c4 <Error_Handler>
 8006eb4:	e7dd      	b.n	8006e72 <MX_TIM1_Init+0x6a>
    Error_Handler();
 8006eb6:	f7ff fd05 	bl	80068c4 <Error_Handler>
 8006eba:	e7cb      	b.n	8006e54 <MX_TIM1_Init+0x4c>
    Error_Handler();
 8006ebc:	f7ff fd02 	bl	80068c4 <Error_Handler>
 8006ec0:	e7bf      	b.n	8006e42 <MX_TIM1_Init+0x3a>
 8006ec2:	bf00      	nop
 8006ec4:	20001144 	.word	0x20001144
 8006ec8:	40010000 	.word	0x40010000

08006ecc <MX_TIM2_Init>:
{
 8006ecc:	b510      	push	{r4, lr}
  htim2.Instance = TIM2;
 8006ece:	4a22      	ldr	r2, [pc, #136]	; (8006f58 <MX_TIM2_Init+0x8c>)
  htim2.Init.Prescaler = 56;
 8006ed0:	2038      	movs	r0, #56	; 0x38
  htim2.Instance = TIM2;
 8006ed2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ed6:	2300      	movs	r3, #0
{
 8006ed8:	b08a      	sub	sp, #40	; 0x28
  htim2.Init.Period = 127;
 8006eda:	217f      	movs	r1, #127	; 0x7f
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006edc:	6113      	str	r3, [r2, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ede:	9300      	str	r3, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ee0:	9303      	str	r3, [sp, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ee2:	6193      	str	r3, [r2, #24]
  htim2.Init.Prescaler = 56;
 8006ee4:	e9c2 4000 	strd	r4, r0, [r2]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006ee8:	4610      	mov	r0, r2
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006eea:	e9c2 3102 	strd	r3, r1, [r2, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006eee:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ef2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006ef6:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8006efa:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006efe:	f7fb ff93 	bl	8002e28 <HAL_TIM_PWM_Init>
 8006f02:	bb30      	cbnz	r0, 8006f52 <MX_TIM2_Init+0x86>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f04:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006f06:	4669      	mov	r1, sp
 8006f08:	4813      	ldr	r0, [pc, #76]	; (8006f58 <MX_TIM2_Init+0x8c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f0a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f0c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006f0e:	f7fc f871 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8006f12:	b9d8      	cbnz	r0, 8006f4c <MX_TIM2_Init+0x80>
  sConfigOC.Pulse = 0;
 8006f14:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006f16:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f18:	a903      	add	r1, sp, #12
 8006f1a:	480f      	ldr	r0, [pc, #60]	; (8006f58 <MX_TIM2_Init+0x8c>)
 8006f1c:	461a      	mov	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f1e:	9307      	str	r3, [sp, #28]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006f20:	9403      	str	r4, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f22:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f26:	f7fb ffcf 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006f2a:	b960      	cbnz	r0, 8006f46 <MX_TIM2_Init+0x7a>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006f2c:	a903      	add	r1, sp, #12
 8006f2e:	2204      	movs	r2, #4
 8006f30:	4809      	ldr	r0, [pc, #36]	; (8006f58 <MX_TIM2_Init+0x8c>)
 8006f32:	f7fb ffc9 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006f36:	b108      	cbz	r0, 8006f3c <MX_TIM2_Init+0x70>
    Error_Handler();
 8006f38:	f7ff fcc4 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8006f3c:	4806      	ldr	r0, [pc, #24]	; (8006f58 <MX_TIM2_Init+0x8c>)
 8006f3e:	f7ff fe37 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 8006f42:	b00a      	add	sp, #40	; 0x28
 8006f44:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006f46:	f7ff fcbd 	bl	80068c4 <Error_Handler>
 8006f4a:	e7ef      	b.n	8006f2c <MX_TIM2_Init+0x60>
    Error_Handler();
 8006f4c:	f7ff fcba 	bl	80068c4 <Error_Handler>
 8006f50:	e7e0      	b.n	8006f14 <MX_TIM2_Init+0x48>
    Error_Handler();
 8006f52:	f7ff fcb7 	bl	80068c4 <Error_Handler>
 8006f56:	e7d5      	b.n	8006f04 <MX_TIM2_Init+0x38>
 8006f58:	200011c4 	.word	0x200011c4

08006f5c <MX_TIM3_Init>:
{
 8006f5c:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 8006f5e:	4a2b      	ldr	r2, [pc, #172]	; (800700c <MX_TIM3_Init+0xb0>)
  htim3.Init.Prescaler = 56;
 8006f60:	2038      	movs	r0, #56	; 0x38
  htim3.Instance = TIM3;
 8006f62:	4c2b      	ldr	r4, [pc, #172]	; (8007010 <MX_TIM3_Init+0xb4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f64:	2300      	movs	r3, #0
{
 8006f66:	b08a      	sub	sp, #40	; 0x28
  htim3.Init.Period = 127;
 8006f68:	217f      	movs	r1, #127	; 0x7f
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f6a:	6113      	str	r3, [r2, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f6c:	9300      	str	r3, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006f6e:	9303      	str	r3, [sp, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f70:	6193      	str	r3, [r2, #24]
  htim3.Init.Prescaler = 56;
 8006f72:	e9c2 4000 	strd	r4, r0, [r2]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006f76:	4610      	mov	r0, r2
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f78:	e9c2 3102 	strd	r3, r1, [r2, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f7c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006f80:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006f84:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8006f88:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006f8c:	f7fb ff4c 	bl	8002e28 <HAL_TIM_PWM_Init>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d138      	bne.n	8007006 <MX_TIM3_Init+0xaa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f94:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006f96:	4669      	mov	r1, sp
 8006f98:	481c      	ldr	r0, [pc, #112]	; (800700c <MX_TIM3_Init+0xb0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f9a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f9c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006f9e:	f7fc f829 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8006fa2:	bb68      	cbnz	r0, 8007000 <MX_TIM3_Init+0xa4>
  sConfigOC.Pulse = 0;
 8006fa4:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006fa6:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006fa8:	a903      	add	r1, sp, #12
 8006faa:	4818      	ldr	r0, [pc, #96]	; (800700c <MX_TIM3_Init+0xb0>)
 8006fac:	461a      	mov	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006fae:	9307      	str	r3, [sp, #28]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006fb0:	9403      	str	r4, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006fb2:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006fb6:	f7fb ff87 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006fba:	b9f0      	cbnz	r0, 8006ffa <MX_TIM3_Init+0x9e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	a903      	add	r1, sp, #12
 8006fc0:	4812      	ldr	r0, [pc, #72]	; (800700c <MX_TIM3_Init+0xb0>)
 8006fc2:	f7fb ff81 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006fc6:	b9a8      	cbnz	r0, 8006ff4 <MX_TIM3_Init+0x98>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006fc8:	2208      	movs	r2, #8
 8006fca:	a903      	add	r1, sp, #12
 8006fcc:	480f      	ldr	r0, [pc, #60]	; (800700c <MX_TIM3_Init+0xb0>)
 8006fce:	f7fb ff7b 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006fd2:	b960      	cbnz	r0, 8006fee <MX_TIM3_Init+0x92>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006fd4:	a903      	add	r1, sp, #12
 8006fd6:	220c      	movs	r2, #12
 8006fd8:	480c      	ldr	r0, [pc, #48]	; (800700c <MX_TIM3_Init+0xb0>)
 8006fda:	f7fb ff75 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8006fde:	b108      	cbz	r0, 8006fe4 <MX_TIM3_Init+0x88>
    Error_Handler();
 8006fe0:	f7ff fc70 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8006fe4:	4809      	ldr	r0, [pc, #36]	; (800700c <MX_TIM3_Init+0xb0>)
 8006fe6:	f7ff fde3 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 8006fea:	b00a      	add	sp, #40	; 0x28
 8006fec:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006fee:	f7ff fc69 	bl	80068c4 <Error_Handler>
 8006ff2:	e7ef      	b.n	8006fd4 <MX_TIM3_Init+0x78>
    Error_Handler();
 8006ff4:	f7ff fc66 	bl	80068c4 <Error_Handler>
 8006ff8:	e7e6      	b.n	8006fc8 <MX_TIM3_Init+0x6c>
    Error_Handler();
 8006ffa:	f7ff fc63 	bl	80068c4 <Error_Handler>
 8006ffe:	e7dd      	b.n	8006fbc <MX_TIM3_Init+0x60>
    Error_Handler();
 8007000:	f7ff fc60 	bl	80068c4 <Error_Handler>
 8007004:	e7ce      	b.n	8006fa4 <MX_TIM3_Init+0x48>
    Error_Handler();
 8007006:	f7ff fc5d 	bl	80068c4 <Error_Handler>
 800700a:	e7c3      	b.n	8006f94 <MX_TIM3_Init+0x38>
 800700c:	20001044 	.word	0x20001044
 8007010:	40000400 	.word	0x40000400

08007014 <MX_TIM4_Init>:
{
 8007014:	b510      	push	{r4, lr}
  htim4.Instance = TIM4;
 8007016:	4a22      	ldr	r2, [pc, #136]	; (80070a0 <MX_TIM4_Init+0x8c>)
  htim4.Init.Prescaler = 56;
 8007018:	2038      	movs	r0, #56	; 0x38
  htim4.Instance = TIM4;
 800701a:	4c22      	ldr	r4, [pc, #136]	; (80070a4 <MX_TIM4_Init+0x90>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800701c:	2300      	movs	r3, #0
{
 800701e:	b08a      	sub	sp, #40	; 0x28
  htim4.Init.Period = 127;
 8007020:	217f      	movs	r1, #127	; 0x7f
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007022:	6113      	str	r3, [r2, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007024:	9300      	str	r3, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007026:	9303      	str	r3, [sp, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007028:	6193      	str	r3, [r2, #24]
  htim4.Init.Prescaler = 56;
 800702a:	e9c2 4000 	strd	r4, r0, [r2]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800702e:	4610      	mov	r0, r2
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007030:	e9c2 3102 	strd	r3, r1, [r2, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007034:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007038:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800703c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8007040:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007044:	f7fb fef0 	bl	8002e28 <HAL_TIM_PWM_Init>
 8007048:	bb30      	cbnz	r0, 8007098 <MX_TIM4_Init+0x84>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800704a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800704c:	4669      	mov	r1, sp
 800704e:	4814      	ldr	r0, [pc, #80]	; (80070a0 <MX_TIM4_Init+0x8c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007050:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007052:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007054:	f7fb ffce 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8007058:	b9d8      	cbnz	r0, 8007092 <MX_TIM4_Init+0x7e>
  sConfigOC.Pulse = 0;
 800705a:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800705c:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800705e:	2208      	movs	r2, #8
 8007060:	a903      	add	r1, sp, #12
 8007062:	480f      	ldr	r0, [pc, #60]	; (80070a0 <MX_TIM4_Init+0x8c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007064:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007066:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8007068:	e9cd 4303 	strd	r4, r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800706c:	f7fb ff2c 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8007070:	b960      	cbnz	r0, 800708c <MX_TIM4_Init+0x78>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007072:	a903      	add	r1, sp, #12
 8007074:	220c      	movs	r2, #12
 8007076:	480a      	ldr	r0, [pc, #40]	; (80070a0 <MX_TIM4_Init+0x8c>)
 8007078:	f7fb ff26 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 800707c:	b108      	cbz	r0, 8007082 <MX_TIM4_Init+0x6e>
    Error_Handler();
 800707e:	f7ff fc21 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8007082:	4807      	ldr	r0, [pc, #28]	; (80070a0 <MX_TIM4_Init+0x8c>)
 8007084:	f7ff fd94 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 8007088:	b00a      	add	sp, #40	; 0x28
 800708a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800708c:	f7ff fc1a 	bl	80068c4 <Error_Handler>
 8007090:	e7ef      	b.n	8007072 <MX_TIM4_Init+0x5e>
    Error_Handler();
 8007092:	f7ff fc17 	bl	80068c4 <Error_Handler>
 8007096:	e7e0      	b.n	800705a <MX_TIM4_Init+0x46>
    Error_Handler();
 8007098:	f7ff fc14 	bl	80068c4 <Error_Handler>
 800709c:	e7d5      	b.n	800704a <MX_TIM4_Init+0x36>
 800709e:	bf00      	nop
 80070a0:	20000f84 	.word	0x20000f84
 80070a4:	40000800 	.word	0x40000800

080070a8 <MX_TIM5_Init>:
{
 80070a8:	b510      	push	{r4, lr}
  htim5.Instance = TIM5;
 80070aa:	4a2b      	ldr	r2, [pc, #172]	; (8007158 <MX_TIM5_Init+0xb0>)
  htim5.Init.Prescaler = 56;
 80070ac:	2038      	movs	r0, #56	; 0x38
  htim5.Instance = TIM5;
 80070ae:	4c2b      	ldr	r4, [pc, #172]	; (800715c <MX_TIM5_Init+0xb4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070b0:	2300      	movs	r3, #0
{
 80070b2:	b08a      	sub	sp, #40	; 0x28
  htim5.Init.Period = 127;
 80070b4:	217f      	movs	r1, #127	; 0x7f
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070b6:	6113      	str	r3, [r2, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070b8:	9300      	str	r3, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80070ba:	9303      	str	r3, [sp, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070bc:	6193      	str	r3, [r2, #24]
  htim5.Init.Prescaler = 56;
 80070be:	e9c2 4000 	strd	r4, r0, [r2]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80070c2:	4610      	mov	r0, r2
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070c4:	e9c2 3102 	strd	r3, r1, [r2, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80070cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80070d0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80070d4:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80070d8:	f7fb fea6 	bl	8002e28 <HAL_TIM_PWM_Init>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d138      	bne.n	8007152 <MX_TIM5_Init+0xaa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070e0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80070e2:	4669      	mov	r1, sp
 80070e4:	481c      	ldr	r0, [pc, #112]	; (8007158 <MX_TIM5_Init+0xb0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070e6:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070e8:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80070ea:	f7fb ff83 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80070ee:	bb68      	cbnz	r0, 800714c <MX_TIM5_Init+0xa4>
  sConfigOC.Pulse = 0;
 80070f0:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80070f2:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80070f4:	a903      	add	r1, sp, #12
 80070f6:	4818      	ldr	r0, [pc, #96]	; (8007158 <MX_TIM5_Init+0xb0>)
 80070f8:	461a      	mov	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80070fa:	9307      	str	r3, [sp, #28]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80070fc:	9403      	str	r4, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80070fe:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007102:	f7fb fee1 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8007106:	b9f0      	cbnz	r0, 8007146 <MX_TIM5_Init+0x9e>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007108:	2204      	movs	r2, #4
 800710a:	a903      	add	r1, sp, #12
 800710c:	4812      	ldr	r0, [pc, #72]	; (8007158 <MX_TIM5_Init+0xb0>)
 800710e:	f7fb fedb 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8007112:	b9a8      	cbnz	r0, 8007140 <MX_TIM5_Init+0x98>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007114:	2208      	movs	r2, #8
 8007116:	a903      	add	r1, sp, #12
 8007118:	480f      	ldr	r0, [pc, #60]	; (8007158 <MX_TIM5_Init+0xb0>)
 800711a:	f7fb fed5 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 800711e:	b960      	cbnz	r0, 800713a <MX_TIM5_Init+0x92>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007120:	a903      	add	r1, sp, #12
 8007122:	220c      	movs	r2, #12
 8007124:	480c      	ldr	r0, [pc, #48]	; (8007158 <MX_TIM5_Init+0xb0>)
 8007126:	f7fb fecf 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 800712a:	b108      	cbz	r0, 8007130 <MX_TIM5_Init+0x88>
    Error_Handler();
 800712c:	f7ff fbca 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 8007130:	4809      	ldr	r0, [pc, #36]	; (8007158 <MX_TIM5_Init+0xb0>)
 8007132:	f7ff fd3d 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 8007136:	b00a      	add	sp, #40	; 0x28
 8007138:	bd10      	pop	{r4, pc}
    Error_Handler();
 800713a:	f7ff fbc3 	bl	80068c4 <Error_Handler>
 800713e:	e7ef      	b.n	8007120 <MX_TIM5_Init+0x78>
    Error_Handler();
 8007140:	f7ff fbc0 	bl	80068c4 <Error_Handler>
 8007144:	e7e6      	b.n	8007114 <MX_TIM5_Init+0x6c>
    Error_Handler();
 8007146:	f7ff fbbd 	bl	80068c4 <Error_Handler>
 800714a:	e7dd      	b.n	8007108 <MX_TIM5_Init+0x60>
    Error_Handler();
 800714c:	f7ff fbba 	bl	80068c4 <Error_Handler>
 8007150:	e7ce      	b.n	80070f0 <MX_TIM5_Init+0x48>
    Error_Handler();
 8007152:	f7ff fbb7 	bl	80068c4 <Error_Handler>
 8007156:	e7c3      	b.n	80070e0 <MX_TIM5_Init+0x38>
 8007158:	20001004 	.word	0x20001004
 800715c:	40000c00 	.word	0x40000c00

08007160 <MX_TIM8_Init>:
{
 8007160:	b530      	push	{r4, r5, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007162:	2400      	movs	r4, #0
{
 8007164:	b097      	sub	sp, #92	; 0x5c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007166:	222c      	movs	r2, #44	; 0x2c
  htim8.Instance = TIM8;
 8007168:	4d36      	ldr	r5, [pc, #216]	; (8007244 <MX_TIM8_Init+0xe4>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800716a:	4621      	mov	r1, r4
 800716c:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800716e:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007170:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007172:	e9cd 4402 	strd	r4, r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007176:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800717a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800717e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007182:	f000 fc9f 	bl	8007ac4 <memset>
  htim8.Instance = TIM8;
 8007186:	4b30      	ldr	r3, [pc, #192]	; (8007248 <MX_TIM8_Init+0xe8>)
  htim8.Init.Prescaler = 112;
 8007188:	2170      	movs	r1, #112	; 0x70
  htim8.Init.Period = 127;
 800718a:	227f      	movs	r2, #127	; 0x7f
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800718c:	4618      	mov	r0, r3
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800718e:	609c      	str	r4, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007190:	619c      	str	r4, [r3, #24]
  htim8.Init.Period = 127;
 8007192:	60da      	str	r2, [r3, #12]
  htim8.Init.RepetitionCounter = 0;
 8007194:	e9c3 4404 	strd	r4, r4, [r3, #16]
  htim8.Init.Prescaler = 112;
 8007198:	e9c3 5100 	strd	r5, r1, [r3]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800719c:	f7fb fe44 	bl	8002e28 <HAL_TIM_PWM_Init>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d14c      	bne.n	800723e <MX_TIM8_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80071a4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80071a6:	a901      	add	r1, sp, #4
 80071a8:	4827      	ldr	r0, [pc, #156]	; (8007248 <MX_TIM8_Init+0xe8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071aa:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80071ac:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80071b0:	f7fb ff20 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d13f      	bne.n	8007238 <MX_TIM8_Init+0xd8>
  sConfigOC.Pulse = 0;
 80071b8:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80071ba:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80071bc:	a904      	add	r1, sp, #16
 80071be:	4822      	ldr	r0, [pc, #136]	; (8007248 <MX_TIM8_Init+0xe8>)
 80071c0:	461a      	mov	r2, r3
  sConfigOC.Pulse = 0;
 80071c2:	9305      	str	r3, [sp, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80071c4:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80071c6:	9404      	str	r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80071c8:	e9cd 3306 	strd	r3, r3, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80071cc:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80071d0:	f7fb fe7a 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 80071d4:	bb68      	cbnz	r0, 8007232 <MX_TIM8_Init+0xd2>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80071d6:	2204      	movs	r2, #4
 80071d8:	a904      	add	r1, sp, #16
 80071da:	481b      	ldr	r0, [pc, #108]	; (8007248 <MX_TIM8_Init+0xe8>)
 80071dc:	f7fb fe74 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 80071e0:	bb20      	cbnz	r0, 800722c <MX_TIM8_Init+0xcc>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80071e2:	a904      	add	r1, sp, #16
 80071e4:	2208      	movs	r2, #8
 80071e6:	4818      	ldr	r0, [pc, #96]	; (8007248 <MX_TIM8_Init+0xe8>)
 80071e8:	f7fb fe6e 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 80071ec:	b9d8      	cbnz	r0, 8007226 <MX_TIM8_Init+0xc6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80071ee:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80071f0:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80071f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80071f8:	a90b      	add	r1, sp, #44	; 0x2c
 80071fa:	4813      	ldr	r0, [pc, #76]	; (8007248 <MX_TIM8_Init+0xe8>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80071fc:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80071fe:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007200:	9213      	str	r2, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007202:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8007206:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800720a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800720e:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007212:	f7fb ff1f 	bl	8003054 <HAL_TIMEx_ConfigBreakDeadTime>
 8007216:	b108      	cbz	r0, 800721c <MX_TIM8_Init+0xbc>
    Error_Handler();
 8007218:	f7ff fb54 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 800721c:	480a      	ldr	r0, [pc, #40]	; (8007248 <MX_TIM8_Init+0xe8>)
 800721e:	f7ff fcc7 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 8007222:	b017      	add	sp, #92	; 0x5c
 8007224:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8007226:	f7ff fb4d 	bl	80068c4 <Error_Handler>
 800722a:	e7e0      	b.n	80071ee <MX_TIM8_Init+0x8e>
    Error_Handler();
 800722c:	f7ff fb4a 	bl	80068c4 <Error_Handler>
 8007230:	e7d7      	b.n	80071e2 <MX_TIM8_Init+0x82>
    Error_Handler();
 8007232:	f7ff fb47 	bl	80068c4 <Error_Handler>
 8007236:	e7ce      	b.n	80071d6 <MX_TIM8_Init+0x76>
    Error_Handler();
 8007238:	f7ff fb44 	bl	80068c4 <Error_Handler>
 800723c:	e7bc      	b.n	80071b8 <MX_TIM8_Init+0x58>
    Error_Handler();
 800723e:	f7ff fb41 	bl	80068c4 <Error_Handler>
 8007242:	e7af      	b.n	80071a4 <MX_TIM8_Init+0x44>
 8007244:	40010400 	.word	0x40010400
 8007248:	20000f44 	.word	0x20000f44

0800724c <MX_TIM9_Init>:
  htim9.Instance = TIM9;
 800724c:	4a1b      	ldr	r2, [pc, #108]	; (80072bc <MX_TIM9_Init+0x70>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800724e:	2300      	movs	r3, #0
  htim9.Instance = TIM9;
 8007250:	481b      	ldr	r0, [pc, #108]	; (80072c0 <MX_TIM9_Init+0x74>)
  htim9.Init.Period = 127;
 8007252:	217f      	movs	r1, #127	; 0x7f
{
 8007254:	b510      	push	{r4, lr}
  htim9.Init.Prescaler = 112;
 8007256:	2470      	movs	r4, #112	; 0x70
{
 8007258:	b088      	sub	sp, #32
  htim9.Instance = TIM9;
 800725a:	6010      	str	r0, [r2, #0]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800725c:	4610      	mov	r0, r2
  htim9.Init.Prescaler = 112;
 800725e:	6054      	str	r4, [r2, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007260:	9301      	str	r3, [sp, #4]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007262:	6113      	str	r3, [r2, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007264:	6193      	str	r3, [r2, #24]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007266:	e9c2 3102 	strd	r3, r1, [r2, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800726a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800726e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007272:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8007276:	f7fb fdd7 	bl	8002e28 <HAL_TIM_PWM_Init>
 800727a:	b9d8      	cbnz	r0, 80072b4 <MX_TIM9_Init+0x68>
  sConfigOC.Pulse = 0;
 800727c:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800727e:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007280:	a901      	add	r1, sp, #4
 8007282:	480e      	ldr	r0, [pc, #56]	; (80072bc <MX_TIM9_Init+0x70>)
 8007284:	461a      	mov	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007286:	9305      	str	r3, [sp, #20]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007288:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800728a:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800728e:	f7fb fe1b 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8007292:	b960      	cbnz	r0, 80072ae <MX_TIM9_Init+0x62>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007294:	a901      	add	r1, sp, #4
 8007296:	2204      	movs	r2, #4
 8007298:	4808      	ldr	r0, [pc, #32]	; (80072bc <MX_TIM9_Init+0x70>)
 800729a:	f7fb fe15 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 800729e:	b108      	cbz	r0, 80072a4 <MX_TIM9_Init+0x58>
    Error_Handler();
 80072a0:	f7ff fb10 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 80072a4:	4805      	ldr	r0, [pc, #20]	; (80072bc <MX_TIM9_Init+0x70>)
 80072a6:	f7ff fc83 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 80072aa:	b008      	add	sp, #32
 80072ac:	bd10      	pop	{r4, pc}
    Error_Handler();
 80072ae:	f7ff fb09 	bl	80068c4 <Error_Handler>
 80072b2:	e7ef      	b.n	8007294 <MX_TIM9_Init+0x48>
    Error_Handler();
 80072b4:	f7ff fb06 	bl	80068c4 <Error_Handler>
 80072b8:	e7e0      	b.n	800727c <MX_TIM9_Init+0x30>
 80072ba:	bf00      	nop
 80072bc:	20001184 	.word	0x20001184
 80072c0:	40014000 	.word	0x40014000

080072c4 <MX_TIM10_Init>:
  htim10.Instance = TIM10;
 80072c4:	4a1a      	ldr	r2, [pc, #104]	; (8007330 <MX_TIM10_Init+0x6c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072c6:	2300      	movs	r3, #0
  htim10.Instance = TIM10;
 80072c8:	481a      	ldr	r0, [pc, #104]	; (8007334 <MX_TIM10_Init+0x70>)
  htim10.Init.Period = 127;
 80072ca:	217f      	movs	r1, #127	; 0x7f
{
 80072cc:	b510      	push	{r4, lr}
  htim10.Init.Prescaler = 112;
 80072ce:	2470      	movs	r4, #112	; 0x70
{
 80072d0:	b088      	sub	sp, #32
  htim10.Instance = TIM10;
 80072d2:	6010      	str	r0, [r2, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80072d4:	4610      	mov	r0, r2
  htim10.Init.Prescaler = 112;
 80072d6:	6054      	str	r4, [r2, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072d8:	9301      	str	r3, [sp, #4]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072da:	6113      	str	r3, [r2, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072dc:	6193      	str	r3, [r2, #24]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072de:	e9c2 3102 	strd	r3, r1, [r2, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072e6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80072ea:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80072ee:	f7fb fd7f 	bl	8002df0 <HAL_TIM_Base_Init>
 80072f2:	b9c8      	cbnz	r0, 8007328 <MX_TIM10_Init+0x64>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80072f4:	480e      	ldr	r0, [pc, #56]	; (8007330 <MX_TIM10_Init+0x6c>)
 80072f6:	f7fb fd97 	bl	8002e28 <HAL_TIM_PWM_Init>
 80072fa:	b990      	cbnz	r0, 8007322 <MX_TIM10_Init+0x5e>
  sConfigOC.Pulse = 0;
 80072fc:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072fe:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007300:	a901      	add	r1, sp, #4
 8007302:	480b      	ldr	r0, [pc, #44]	; (8007330 <MX_TIM10_Init+0x6c>)
 8007304:	461a      	mov	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007306:	9305      	str	r3, [sp, #20]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007308:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800730a:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800730e:	f7fb fddb 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8007312:	b108      	cbz	r0, 8007318 <MX_TIM10_Init+0x54>
    Error_Handler();
 8007314:	f7ff fad6 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim10);
 8007318:	4805      	ldr	r0, [pc, #20]	; (8007330 <MX_TIM10_Init+0x6c>)
 800731a:	f7ff fc49 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 800731e:	b008      	add	sp, #32
 8007320:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007322:	f7ff facf 	bl	80068c4 <Error_Handler>
 8007326:	e7e9      	b.n	80072fc <MX_TIM10_Init+0x38>
    Error_Handler();
 8007328:	f7ff facc 	bl	80068c4 <Error_Handler>
 800732c:	e7e2      	b.n	80072f4 <MX_TIM10_Init+0x30>
 800732e:	bf00      	nop
 8007330:	20000fc4 	.word	0x20000fc4
 8007334:	40014400 	.word	0x40014400

08007338 <MX_TIM11_Init>:
  htim11.Instance = TIM11;
 8007338:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <MX_TIM11_Init+0x6c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800733a:	2300      	movs	r3, #0
  htim11.Instance = TIM11;
 800733c:	481a      	ldr	r0, [pc, #104]	; (80073a8 <MX_TIM11_Init+0x70>)
  htim11.Init.Period = 127;
 800733e:	217f      	movs	r1, #127	; 0x7f
{
 8007340:	b510      	push	{r4, lr}
  htim11.Init.Prescaler = 112;
 8007342:	2470      	movs	r4, #112	; 0x70
{
 8007344:	b088      	sub	sp, #32
  htim11.Instance = TIM11;
 8007346:	6010      	str	r0, [r2, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007348:	4610      	mov	r0, r2
  htim11.Init.Prescaler = 112;
 800734a:	6054      	str	r4, [r2, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800734c:	9301      	str	r3, [sp, #4]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800734e:	6113      	str	r3, [r2, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007350:	6193      	str	r3, [r2, #24]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007352:	e9c2 3102 	strd	r3, r1, [r2, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007356:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800735a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800735e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007362:	f7fb fd45 	bl	8002df0 <HAL_TIM_Base_Init>
 8007366:	b9c8      	cbnz	r0, 800739c <MX_TIM11_Init+0x64>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8007368:	480e      	ldr	r0, [pc, #56]	; (80073a4 <MX_TIM11_Init+0x6c>)
 800736a:	f7fb fd5d 	bl	8002e28 <HAL_TIM_PWM_Init>
 800736e:	b990      	cbnz	r0, 8007396 <MX_TIM11_Init+0x5e>
  sConfigOC.Pulse = 0;
 8007370:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007372:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007374:	a901      	add	r1, sp, #4
 8007376:	480b      	ldr	r0, [pc, #44]	; (80073a4 <MX_TIM11_Init+0x6c>)
 8007378:	461a      	mov	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800737a:	9305      	str	r3, [sp, #20]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800737c:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800737e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007382:	f7fb fda1 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8007386:	b108      	cbz	r0, 800738c <MX_TIM11_Init+0x54>
    Error_Handler();
 8007388:	f7ff fa9c 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim11);
 800738c:	4805      	ldr	r0, [pc, #20]	; (80073a4 <MX_TIM11_Init+0x6c>)
 800738e:	f7ff fc0f 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 8007392:	b008      	add	sp, #32
 8007394:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007396:	f7ff fa95 	bl	80068c4 <Error_Handler>
 800739a:	e7e9      	b.n	8007370 <MX_TIM11_Init+0x38>
    Error_Handler();
 800739c:	f7ff fa92 	bl	80068c4 <Error_Handler>
 80073a0:	e7e2      	b.n	8007368 <MX_TIM11_Init+0x30>
 80073a2:	bf00      	nop
 80073a4:	200010c4 	.word	0x200010c4
 80073a8:	40014800 	.word	0x40014800

080073ac <MX_TIM12_Init>:
  htim12.Instance = TIM12;
 80073ac:	4a1b      	ldr	r2, [pc, #108]	; (800741c <MX_TIM12_Init+0x70>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 80073ae:	2300      	movs	r3, #0
  htim12.Instance = TIM12;
 80073b0:	481b      	ldr	r0, [pc, #108]	; (8007420 <MX_TIM12_Init+0x74>)
  htim12.Init.Period = 127;
 80073b2:	217f      	movs	r1, #127	; 0x7f
{
 80073b4:	b510      	push	{r4, lr}
  htim12.Init.Prescaler = 56;
 80073b6:	2438      	movs	r4, #56	; 0x38
{
 80073b8:	b088      	sub	sp, #32
  htim12.Instance = TIM12;
 80073ba:	6010      	str	r0, [r2, #0]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80073bc:	4610      	mov	r0, r2
  htim12.Init.Prescaler = 56;
 80073be:	6054      	str	r4, [r2, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80073c0:	9301      	str	r3, [sp, #4]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073c2:	6113      	str	r3, [r2, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073c4:	6193      	str	r3, [r2, #24]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073c6:	e9c2 3102 	strd	r3, r1, [r2, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80073ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073ce:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80073d2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80073d6:	f7fb fd27 	bl	8002e28 <HAL_TIM_PWM_Init>
 80073da:	b9d8      	cbnz	r0, 8007414 <MX_TIM12_Init+0x68>
  sConfigOC.Pulse = 0;
 80073dc:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80073de:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80073e0:	a901      	add	r1, sp, #4
 80073e2:	480e      	ldr	r0, [pc, #56]	; (800741c <MX_TIM12_Init+0x70>)
 80073e4:	461a      	mov	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80073e6:	9305      	str	r3, [sp, #20]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80073e8:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80073ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80073ee:	f7fb fd6b 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 80073f2:	b960      	cbnz	r0, 800740e <MX_TIM12_Init+0x62>
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80073f4:	a901      	add	r1, sp, #4
 80073f6:	2204      	movs	r2, #4
 80073f8:	4808      	ldr	r0, [pc, #32]	; (800741c <MX_TIM12_Init+0x70>)
 80073fa:	f7fb fd65 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 80073fe:	b108      	cbz	r0, 8007404 <MX_TIM12_Init+0x58>
    Error_Handler();
 8007400:	f7ff fa60 	bl	80068c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim12);
 8007404:	4805      	ldr	r0, [pc, #20]	; (800741c <MX_TIM12_Init+0x70>)
 8007406:	f7ff fbd3 	bl	8006bb0 <HAL_TIM_MspPostInit>
}
 800740a:	b008      	add	sp, #32
 800740c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800740e:	f7ff fa59 	bl	80068c4 <Error_Handler>
 8007412:	e7ef      	b.n	80073f4 <MX_TIM12_Init+0x48>
    Error_Handler();
 8007414:	f7ff fa56 	bl	80068c4 <Error_Handler>
 8007418:	e7e0      	b.n	80073dc <MX_TIM12_Init+0x30>
 800741a:	bf00      	nop
 800741c:	20001244 	.word	0x20001244
 8007420:	40001800 	.word	0x40001800

08007424 <MX_UART8_Init>:

UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART8_Init(void)
{
 8007424:	b538      	push	{r3, r4, r5, lr}

  huart8.Instance = UART8;
 8007426:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <MX_UART8_Init+0x34>)
  huart8.Init.BaudRate = 31250;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8007428:	2200      	movs	r2, #0
  huart8.Init.BaudRate = 31250;
 800742a:	f647 2412 	movw	r4, #31250	; 0x7a12
  huart8.Instance = UART8;
 800742e:	4d0b      	ldr	r5, [pc, #44]	; (800745c <MX_UART8_Init+0x38>)
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_RX;
 8007430:	2104      	movs	r1, #4
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8007432:	4618      	mov	r0, r3
  huart8.Init.Parity = UART_PARITY_NONE;
 8007434:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_RX;
 8007436:	6159      	str	r1, [r3, #20]
  huart8.Init.BaudRate = 31250;
 8007438:	e9c3 5400 	strd	r5, r4, [r3]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800743c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8007440:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007444:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8007448:	f7fc f9f6 	bl	8003838 <HAL_UART_Init>
 800744c:	b900      	cbnz	r0, 8007450 <MX_UART8_Init+0x2c>
  {
    Error_Handler();
  }

}
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8007454:	f7ff ba36 	b.w	80068c4 <Error_Handler>
 8007458:	20001284 	.word	0x20001284
 800745c:	40007c00 	.word	0x40007c00

08007460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART8)
 8007460:	6802      	ldr	r2, [r0, #0]
 8007462:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <HAL_UART_MspInit+0x74>)
{
 8007464:	b570      	push	{r4, r5, r6, lr}
  if(uartHandle->Instance==UART8)
 8007466:	429a      	cmp	r2, r3
{
 8007468:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800746a:	f04f 0400 	mov.w	r4, #0
 800746e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8007472:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8007476:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==UART8)
 8007478:	d001      	beq.n	800747e <HAL_UART_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800747a:	b008      	add	sp, #32
 800747c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART8_CLK_ENABLE();
 800747e:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007482:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007484:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007486:	2503      	movs	r5, #3
    __HAL_RCC_UART8_CLK_ENABLE();
 8007488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800748a:	a903      	add	r1, sp, #12
    __HAL_RCC_UART8_CLK_ENABLE();
 800748c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007490:	641a      	str	r2, [r3, #64]	; 0x40
 8007492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007494:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007498:	9201      	str	r2, [sp, #4]
 800749a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800749c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800749e:	f042 0210 	orr.w	r2, r2, #16
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80074a4:	2208      	movs	r2, #8
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80074a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a8:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80074aa:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80074ae:	480a      	ldr	r0, [pc, #40]	; (80074d8 <HAL_UART_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80074b0:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80074b2:	9302      	str	r3, [sp, #8]
 80074b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80074b6:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80074ba:	f7f9 fb47 	bl	8000b4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80074be:	4622      	mov	r2, r4
 80074c0:	4621      	mov	r1, r4
 80074c2:	2053      	movs	r0, #83	; 0x53
 80074c4:	f7f9 fad2 	bl	8000a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80074c8:	2053      	movs	r0, #83	; 0x53
 80074ca:	f7f9 fb05 	bl	8000ad8 <HAL_NVIC_EnableIRQ>
}
 80074ce:	b008      	add	sp, #32
 80074d0:	bd70      	pop	{r4, r5, r6, pc}
 80074d2:	bf00      	nop
 80074d4:	40007c00 	.word	0x40007c00
 80074d8:	40021000 	.word	0x40021000

080074dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074de:	2200      	movs	r2, #0
 80074e0:	4910      	ldr	r1, [pc, #64]	; (8007524 <MX_USB_DEVICE_Init+0x48>)
 80074e2:	4811      	ldr	r0, [pc, #68]	; (8007528 <MX_USB_DEVICE_Init+0x4c>)
 80074e4:	f7fd f836 	bl	8004554 <USBD_Init>
 80074e8:	b9c0      	cbnz	r0, 800751c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 80074ea:	4910      	ldr	r1, [pc, #64]	; (800752c <MX_USB_DEVICE_Init+0x50>)
 80074ec:	480e      	ldr	r0, [pc, #56]	; (8007528 <MX_USB_DEVICE_Init+0x4c>)
 80074ee:	f7fd f847 	bl	8004580 <USBD_RegisterClass>
 80074f2:	b980      	cbnz	r0, 8007516 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074f4:	490e      	ldr	r1, [pc, #56]	; (8007530 <MX_USB_DEVICE_Init+0x54>)
 80074f6:	480c      	ldr	r0, [pc, #48]	; (8007528 <MX_USB_DEVICE_Init+0x4c>)
 80074f8:	f7fc ffe6 	bl	80044c8 <USBD_MIDI_RegisterInterface>
 80074fc:	b940      	cbnz	r0, 8007510 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074fe:	480a      	ldr	r0, [pc, #40]	; (8007528 <MX_USB_DEVICE_Init+0x4c>)
 8007500:	f7fd f846 	bl	8004590 <USBD_Start>
 8007504:	b900      	cbnz	r0, 8007508 <MX_USB_DEVICE_Init+0x2c>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007506:	bd08      	pop	{r3, pc}
 8007508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800750c:	f7ff b9da 	b.w	80068c4 <Error_Handler>
    Error_Handler();
 8007510:	f7ff f9d8 	bl	80068c4 <Error_Handler>
 8007514:	e7f3      	b.n	80074fe <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8007516:	f7ff f9d5 	bl	80068c4 <Error_Handler>
 800751a:	e7eb      	b.n	80074f4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800751c:	f7ff f9d2 	bl	80068c4 <Error_Handler>
 8007520:	e7e3      	b.n	80074ea <MX_USB_DEVICE_Init+0xe>
 8007522:	bf00      	nop
 8007524:	200001c8 	.word	0x200001c8
 8007528:	20001304 	.word	0x20001304
 800752c:	2000014c 	.word	0x2000014c
 8007530:	200001e8 	.word	0x200001e8

08007534 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8007534:	6803      	ldr	r3, [r0, #0]
 8007536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800753a:	d000      	beq.n	800753e <HAL_PCD_MspInit+0xa>
 800753c:	4770      	bx	lr
{
 800753e:	b570      	push	{r4, r5, r6, lr}
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007540:	4c1a      	ldr	r4, [pc, #104]	; (80075ac <HAL_PCD_MspInit+0x78>)
{
 8007542:	b088      	sub	sp, #32
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007544:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007548:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800754a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754c:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800754e:	220a      	movs	r2, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007550:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007552:	f043 0301 	orr.w	r3, r3, #1
 8007556:	6323      	str	r3, [r4, #48]	; 0x30
 8007558:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800755a:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800755c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007560:	9104      	str	r1, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007562:	4813      	ldr	r0, [pc, #76]	; (80075b0 <HAL_PCD_MspInit+0x7c>)
 8007564:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800756c:	e9cd 6206 	strd	r6, r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007570:	f7f9 faec 	bl	8000b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007574:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007576:	462a      	mov	r2, r5
 8007578:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800757a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800757e:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007580:	6363      	str	r3, [r4, #52]	; 0x34
 8007582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	9b01      	ldr	r3, [sp, #4]
 800758c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800758e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007592:	6463      	str	r3, [r4, #68]	; 0x44
 8007594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800759a:	9302      	str	r3, [sp, #8]
 800759c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800759e:	f7f9 fa65 	bl	8000a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075a2:	2043      	movs	r0, #67	; 0x43
 80075a4:	f7f9 fa98 	bl	8000ad8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075a8:	b008      	add	sp, #32
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	40023800 	.word	0x40023800
 80075b0:	40020000 	.word	0x40020000

080075b4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80075b4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80075b8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075bc:	f7fd b800 	b.w	80045c0 <USBD_LL_SetupStage>

080075c0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075c0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80075c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80075c8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80075d0:	f7fd b826 	b.w	8004620 <USBD_LL_DataOutStage>

080075d4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075d4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80075d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80075dc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075e2:	f7fd b85d 	b.w	80046a0 <USBD_LL_DataInStage>
 80075e6:	bf00      	nop

080075e8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075e8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075ec:	f7fd b8f0 	b.w	80047d0 <USBD_LL_SOF>

080075f0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80075f0:	68c1      	ldr	r1, [r0, #12]
{ 
 80075f2:	b510      	push	{r4, lr}
 80075f4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80075f6:	b121      	cbz	r1, 8007602 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80075f8:	2902      	cmp	r1, #2
 80075fa:	d00c      	beq.n	8007616 <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 80075fc:	f7ff f962 	bl	80068c4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007600:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007602:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8007606:	f7fd f8cd 	bl	80047a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800760a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 800760e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007612:	f7fd b89f 	b.w	8004754 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 8007616:	2101      	movs	r1, #1
 8007618:	e7f3      	b.n	8007602 <HAL_PCD_ResetCallback+0x12>
 800761a:	bf00      	nop

0800761c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800761c:	b510      	push	{r4, lr}
 800761e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007620:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007624:	f7fd f8c2 	bl	80047ac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007636:	6a23      	ldr	r3, [r4, #32]
 8007638:	b123      	cbz	r3, 8007644 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800763a:	4a03      	ldr	r2, [pc, #12]	; (8007648 <HAL_PCD_SuspendCallback+0x2c>)
 800763c:	6913      	ldr	r3, [r2, #16]
 800763e:	f043 0306 	orr.w	r3, r3, #6
 8007642:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007644:	bd10      	pop	{r4, pc}
 8007646:	bf00      	nop
 8007648:	e000ed00 	.word	0xe000ed00

0800764c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800764c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007650:	f7fd b8b6 	b.w	80047c0 <USBD_LL_Resume>

08007654 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007654:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007658:	f7fd b8ca 	b.w	80047f0 <USBD_LL_IsoOUTIncomplete>

0800765c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800765c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007660:	f7fd b8c4 	b.w	80047ec <USBD_LL_IsoINIncomplete>

08007664 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007664:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007668:	f7fd b8c4 	b.w	80047f4 <USBD_LL_DevConnected>

0800766c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800766c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007670:	f7fd b8c2 	b.w	80047f8 <USBD_LL_DevDisconnected>

08007674 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007674:	7802      	ldrb	r2, [r0, #0]
 8007676:	b10a      	cbz	r2, 800767c <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8007678:	2000      	movs	r0, #0
 800767a:	4770      	bx	lr
{
 800767c:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800767e:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007680:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007682:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007686:	2406      	movs	r4, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8007688:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800768c:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007690:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007692:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007694:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007696:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007698:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800769a:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800769e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80076a2:	e9c3 5400 	strd	r5, r4, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076a6:	f7f9 fda5 	bl	80011f4 <HAL_PCD_Init>
 80076aa:	b978      	cbnz	r0, 80076cc <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	4809      	ldr	r0, [pc, #36]	; (80076d4 <USBD_LL_Init+0x60>)
 80076b0:	f7fa fb4e 	bl	8001d50 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80076b4:	2240      	movs	r2, #64	; 0x40
 80076b6:	2100      	movs	r1, #0
 80076b8:	4806      	ldr	r0, [pc, #24]	; (80076d4 <USBD_LL_Init+0x60>)
 80076ba:	f7fa fb25 	bl	8001d08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80076be:	2280      	movs	r2, #128	; 0x80
 80076c0:	2101      	movs	r1, #1
 80076c2:	4804      	ldr	r0, [pc, #16]	; (80076d4 <USBD_LL_Init+0x60>)
 80076c4:	f7fa fb20 	bl	8001d08 <HAL_PCDEx_SetTxFiFo>
}
 80076c8:	2000      	movs	r0, #0
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 80076cc:	f7ff f8fa 	bl	80068c4 <Error_Handler>
 80076d0:	e7ec      	b.n	80076ac <USBD_LL_Init+0x38>
 80076d2:	bf00      	nop
 80076d4:	200015a0 	.word	0x200015a0

080076d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80076da:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80076de:	f7f9 fe1b 	bl	8001318 <HAL_PCD_Start>
 80076e2:	2803      	cmp	r0, #3
 80076e4:	d802      	bhi.n	80076ec <USBD_LL_Start+0x14>
 80076e6:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <USBD_LL_Start+0x18>)
 80076e8:	5c18      	ldrb	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 80076ea:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 80076ec:	2002      	movs	r0, #2
}
 80076ee:	bd08      	pop	{r3, pc}
 80076f0:	08007c9c 	.word	0x08007c9c

080076f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076f4:	b510      	push	{r4, lr}
 80076f6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076f8:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80076fc:	4613      	mov	r3, r2
 80076fe:	4622      	mov	r2, r4
 8007700:	f7fa f9be 	bl	8001a80 <HAL_PCD_EP_Open>
 8007704:	2803      	cmp	r0, #3
 8007706:	d802      	bhi.n	800770e <USBD_LL_OpenEP+0x1a>
 8007708:	4b02      	ldr	r3, [pc, #8]	; (8007714 <USBD_LL_OpenEP+0x20>)
 800770a:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800770c:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800770e:	2002      	movs	r0, #2
}
 8007710:	bd10      	pop	{r4, pc}
 8007712:	bf00      	nop
 8007714:	08007c9c 	.word	0x08007c9c

08007718 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007718:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800771a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800771e:	f7fa f9e9 	bl	8001af4 <HAL_PCD_EP_Close>
 8007722:	2803      	cmp	r0, #3
 8007724:	d802      	bhi.n	800772c <USBD_LL_CloseEP+0x14>
 8007726:	4b02      	ldr	r3, [pc, #8]	; (8007730 <USBD_LL_CloseEP+0x18>)
 8007728:	5c18      	ldrb	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 800772a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800772c:	2002      	movs	r0, #2
}
 800772e:	bd08      	pop	{r3, pc}
 8007730:	08007c9c 	.word	0x08007c9c

08007734 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007734:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007736:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800773a:	f7fa fa65 	bl	8001c08 <HAL_PCD_EP_SetStall>
 800773e:	2803      	cmp	r0, #3
 8007740:	d802      	bhi.n	8007748 <USBD_LL_StallEP+0x14>
 8007742:	4b02      	ldr	r3, [pc, #8]	; (800774c <USBD_LL_StallEP+0x18>)
 8007744:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8007746:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007748:	2002      	movs	r0, #2
}
 800774a:	bd08      	pop	{r3, pc}
 800774c:	08007c9c 	.word	0x08007c9c

08007750 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007750:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007752:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007756:	f7fa fa9b 	bl	8001c90 <HAL_PCD_EP_ClrStall>
 800775a:	2803      	cmp	r0, #3
 800775c:	d802      	bhi.n	8007764 <USBD_LL_ClearStallEP+0x14>
 800775e:	4b02      	ldr	r3, [pc, #8]	; (8007768 <USBD_LL_ClearStallEP+0x18>)
 8007760:	5c18      	ldrb	r0, [r3, r0]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8007762:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007764:	2002      	movs	r0, #2
}
 8007766:	bd08      	pop	{r3, pc}
 8007768:	08007c9c 	.word	0x08007c9c

0800776c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800776c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800776e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 8007772:	d406      	bmi.n	8007782 <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007774:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007778:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800777c:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8007780:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007782:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007786:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800778a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800778e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8007792:	4770      	bx	lr

08007794 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007794:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007796:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800779a:	f7fa f95d 	bl	8001a58 <HAL_PCD_SetAddress>
 800779e:	2803      	cmp	r0, #3
 80077a0:	d802      	bhi.n	80077a8 <USBD_LL_SetUSBAddress+0x14>
 80077a2:	4b02      	ldr	r3, [pc, #8]	; (80077ac <USBD_LL_SetUSBAddress+0x18>)
 80077a4:	5c18      	ldrb	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 80077a6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077a8:	2002      	movs	r0, #2
}
 80077aa:	bd08      	pop	{r3, pc}
 80077ac:	08007c9c 	.word	0x08007c9c

080077b0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80077b0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077b2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80077b6:	f7fa fa03 	bl	8001bc0 <HAL_PCD_EP_Transmit>
 80077ba:	2803      	cmp	r0, #3
 80077bc:	d802      	bhi.n	80077c4 <USBD_LL_Transmit+0x14>
 80077be:	4b02      	ldr	r3, [pc, #8]	; (80077c8 <USBD_LL_Transmit+0x18>)
 80077c0:	5c18      	ldrb	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 80077c2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077c4:	2002      	movs	r0, #2
}
 80077c6:	bd08      	pop	{r3, pc}
 80077c8:	08007c9c 	.word	0x08007c9c

080077cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80077cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077ce:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80077d2:	f7fa f9c3 	bl	8001b5c <HAL_PCD_EP_Receive>
 80077d6:	2803      	cmp	r0, #3
 80077d8:	d802      	bhi.n	80077e0 <USBD_LL_PrepareReceive+0x14>
 80077da:	4b02      	ldr	r3, [pc, #8]	; (80077e4 <USBD_LL_PrepareReceive+0x18>)
 80077dc:	5c18      	ldrb	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 80077de:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077e0:	2002      	movs	r0, #2
}
 80077e2:	bd08      	pop	{r3, pc}
 80077e4:	08007c9c 	.word	0x08007c9c

080077e8 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077e8:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80077ec:	f7fa b9de 	b.w	8001bac <HAL_PCD_EP_GetRxCount>

080077f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4604      	mov	r4, r0
  switch (msg)
 80077f4:	b1a1      	cbz	r1, 8007820 <HAL_PCDEx_LPM_Callback+0x30>
 80077f6:	2901      	cmp	r1, #1
 80077f8:	d111      	bne.n	800781e <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
    USBD_LL_Resume(hpcd->pData);
    break;
    
  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077fa:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 80077fc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007800:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007804:	f043 0301 	orr.w	r3, r3, #1
 8007808:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 800780c:	f7fc ffce 	bl	80047ac <USBD_LL_Suspend>
    
    /* Enter in STOP mode. */
    if (hpcd->Init.low_power_enable)
 8007810:	6a23      	ldr	r3, [r4, #32]
 8007812:	b123      	cbz	r3, 800781e <HAL_PCDEx_LPM_Callback+0x2e>
    {   
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007814:	4a0d      	ldr	r2, [pc, #52]	; (800784c <HAL_PCDEx_LPM_Callback+0x5c>)
 8007816:	6913      	ldr	r3, [r2, #16]
 8007818:	f043 0306 	orr.w	r3, r3, #6
 800781c:	6113      	str	r3, [r2, #16]
    }
    break;   
  }
}
 800781e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8007820:	6a03      	ldr	r3, [r0, #32]
 8007822:	b133      	cbz	r3, 8007832 <HAL_PCDEx_LPM_Callback+0x42>
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8007824:	f7fe fcf8 	bl	8006218 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007828:	4a08      	ldr	r2, [pc, #32]	; (800784c <HAL_PCDEx_LPM_Callback+0x5c>)
 800782a:	6913      	ldr	r3, [r2, #16]
 800782c:	f023 0306 	bic.w	r3, r3, #6
 8007830:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007832:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8007834:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007838:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800783c:	f023 0301 	bic.w	r3, r3, #1
}
 8007840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007844:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8007848:	f7fc bfba 	b.w	80047c0 <USBD_LL_Resume>
 800784c:	e000ed00 	.word	0xe000ed00

08007850 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8007850:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8007852:	4801      	ldr	r0, [pc, #4]	; (8007858 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8007854:	800b      	strh	r3, [r1, #0]
}
 8007856:	4770      	bx	lr
 8007858:	20000188 	.word	0x20000188

0800785c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800785c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800785e:	4801      	ldr	r0, [pc, #4]	; (8007864 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8007860:	800b      	strh	r3, [r1, #0]
}
 8007862:	4770      	bx	lr
 8007864:	2000019c 	.word	0x2000019c

08007868 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8007868:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800786a:	4801      	ldr	r0, [pc, #4]	; (8007870 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 800786c:	800b      	strh	r3, [r1, #0]
}
 800786e:	4770      	bx	lr
 8007870:	200001a0 	.word	0x200001a0

08007874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007874:	3a01      	subs	r2, #1
 8007876:	b430      	push	{r4, r5}
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	1c8c      	adds	r4, r1, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800787c:	2500      	movs	r5, #0
 800787e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    if (((value >> 28)) < 0xA)
 8007882:	0f02      	lsrs	r2, r0, #28
    pbuf[2 * idx + 1] = 0;
 8007884:	704d      	strb	r5, [r1, #1]
 8007886:	3102      	adds	r1, #2
    value = value << 4;
 8007888:	0100      	lsls	r0, r0, #4
 800788a:	b2d3      	uxtb	r3, r2
    if (((value >> 28)) < 0xA)
 800788c:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800788e:	f103 0230 	add.w	r2, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007892:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007896:	bf94      	ite	ls
 8007898:	f801 2c02 	strbls.w	r2, [r1, #-2]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800789c:	f801 3c02 	strbhi.w	r3, [r1, #-2]
  for (idx = 0; idx < len; idx++)
 80078a0:	428c      	cmp	r4, r1
 80078a2:	d1ee      	bne.n	8007882 <IntToUnicode+0xe>
  }
}
 80078a4:	bc30      	pop	{r4, r5}
 80078a6:	4770      	bx	lr

080078a8 <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078a8:	480b      	ldr	r0, [pc, #44]	; (80078d8 <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 80078aa:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078ac:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078ae:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 80078b0:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 80078b2:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 80078b4:	18c0      	adds	r0, r0, r3
 80078b6:	d101      	bne.n	80078bc <USBD_FS_SerialStrDescriptor+0x14>
}
 80078b8:	4809      	ldr	r0, [pc, #36]	; (80078e0 <USBD_FS_SerialStrDescriptor+0x38>)
 80078ba:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078bc:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078be:	2208      	movs	r2, #8
 80078c0:	4909      	ldr	r1, [pc, #36]	; (80078e8 <USBD_FS_SerialStrDescriptor+0x40>)
{
 80078c2:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078c4:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078c6:	f7ff ffd5 	bl	8007874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078ca:	2204      	movs	r2, #4
 80078cc:	4907      	ldr	r1, [pc, #28]	; (80078ec <USBD_FS_SerialStrDescriptor+0x44>)
 80078ce:	4620      	mov	r0, r4
 80078d0:	f7ff ffd0 	bl	8007874 <IntToUnicode>
}
 80078d4:	4802      	ldr	r0, [pc, #8]	; (80078e0 <USBD_FS_SerialStrDescriptor+0x38>)
 80078d6:	bd10      	pop	{r4, pc}
 80078d8:	1ff0f420 	.word	0x1ff0f420
 80078dc:	1ff0f428 	.word	0x1ff0f428
 80078e0:	200001ac 	.word	0x200001ac
 80078e4:	1ff0f424 	.word	0x1ff0f424
 80078e8:	200001ae 	.word	0x200001ae
 80078ec:	200001be 	.word	0x200001be

080078f0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80078f0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078f2:	4c04      	ldr	r4, [pc, #16]	; (8007904 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80078f4:	460a      	mov	r2, r1
 80078f6:	4804      	ldr	r0, [pc, #16]	; (8007908 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80078f8:	4621      	mov	r1, r4
 80078fa:	f7fd f9fb 	bl	8004cf4 <USBD_GetString>
}
 80078fe:	4620      	mov	r0, r4
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	200019a4 	.word	0x200019a4
 8007908:	08007ca0 	.word	0x08007ca0

0800790c <USBD_FS_ProductStrDescriptor>:
{
 800790c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800790e:	4c04      	ldr	r4, [pc, #16]	; (8007920 <USBD_FS_ProductStrDescriptor+0x14>)
 8007910:	460a      	mov	r2, r1
 8007912:	4804      	ldr	r0, [pc, #16]	; (8007924 <USBD_FS_ProductStrDescriptor+0x18>)
 8007914:	4621      	mov	r1, r4
 8007916:	f7fd f9ed 	bl	8004cf4 <USBD_GetString>
}
 800791a:	4620      	mov	r0, r4
 800791c:	bd10      	pop	{r4, pc}
 800791e:	bf00      	nop
 8007920:	200019a4 	.word	0x200019a4
 8007924:	08007ca8 	.word	0x08007ca8

08007928 <USBD_FS_ConfigStrDescriptor>:
{
 8007928:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800792a:	4c04      	ldr	r4, [pc, #16]	; (800793c <USBD_FS_ConfigStrDescriptor+0x14>)
 800792c:	460a      	mov	r2, r1
 800792e:	4804      	ldr	r0, [pc, #16]	; (8007940 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007930:	4621      	mov	r1, r4
 8007932:	f7fd f9df 	bl	8004cf4 <USBD_GetString>
}
 8007936:	4620      	mov	r0, r4
 8007938:	bd10      	pop	{r4, pc}
 800793a:	bf00      	nop
 800793c:	200019a4 	.word	0x200019a4
 8007940:	08007cbc 	.word	0x08007cbc

08007944 <USBD_FS_InterfaceStrDescriptor>:
{
 8007944:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007946:	4c04      	ldr	r4, [pc, #16]	; (8007958 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8007948:	460a      	mov	r2, r1
 800794a:	4804      	ldr	r0, [pc, #16]	; (800795c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800794c:	4621      	mov	r1, r4
 800794e:	f7fd f9d1 	bl	8004cf4 <USBD_GetString>
}
 8007952:	4620      	mov	r0, r4
 8007954:	bd10      	pop	{r4, pc}
 8007956:	bf00      	nop
 8007958:	200019a4 	.word	0x200019a4
 800795c:	08007cc8 	.word	0x08007cc8

08007960 <MIDI_DeInit_FS>:
static int8_t MIDI_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8007960:	2000      	movs	r0, #0
 8007962:	4770      	bx	lr

08007964 <MIDI_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007964:	2000      	movs	r0, #0
 8007966:	4770      	bx	lr

08007968 <MIDI_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4605      	mov	r5, r0
	int i;
	volatile uint32_t rxLen = Len[0];
 800796c:	680b      	ldr	r3, [r1, #0]
{
 800796e:	b082      	sub	sp, #8
  /* USER CODE BEGIN 6 */
  USBD_MIDI_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007970:	480b      	ldr	r0, [pc, #44]	; (80079a0 <MIDI_Receive_FS+0x38>)
 8007972:	4629      	mov	r1, r5
	volatile uint32_t rxLen = Len[0];
 8007974:	9301      	str	r3, [sp, #4]
  USBD_MIDI_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007976:	f7fc fdb7 	bl	80044e8 <USBD_MIDI_SetRxBuffer>
  USBD_MIDI_ReceivePacket(&hUsbDeviceFS);
 800797a:	4809      	ldr	r0, [pc, #36]	; (80079a0 <MIDI_Receive_FS+0x38>)
 800797c:	f7fc fdd2 	bl	8004524 <USBD_MIDI_ReceivePacket>
  for(i = 0; i < rxLen; i=i+4)
 8007980:	9b01      	ldr	r3, [sp, #4]
 8007982:	b14b      	cbz	r3, 8007998 <MIDI_Receive_FS+0x30>
 8007984:	2400      	movs	r4, #0
  {
	  push(&fifo,(midiData_t*)&Buf[i]);
 8007986:	4e07      	ldr	r6, [pc, #28]	; (80079a4 <MIDI_Receive_FS+0x3c>)
 8007988:	1929      	adds	r1, r5, r4
 800798a:	4630      	mov	r0, r6
 800798c:	f7fd faae 	bl	8004eec <push>
  for(i = 0; i < rxLen; i=i+4)
 8007990:	3404      	adds	r4, #4
 8007992:	9b01      	ldr	r3, [sp, #4]
 8007994:	429c      	cmp	r4, r3
 8007996:	d3f7      	bcc.n	8007988 <MIDI_Receive_FS+0x20>
  }
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 8007998:	2000      	movs	r0, #0
 800799a:	b002      	add	sp, #8
 800799c:	bd70      	pop	{r4, r5, r6, pc}
 800799e:	bf00      	nop
 80079a0:	20001304 	.word	0x20001304
 80079a4:	2000082c 	.word	0x2000082c

080079a8 <MIDI_Init_FS>:
{ 
 80079a8:	b510      	push	{r4, lr}
  USBD_MIDI_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079aa:	4c06      	ldr	r4, [pc, #24]	; (80079c4 <MIDI_Init_FS+0x1c>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	4906      	ldr	r1, [pc, #24]	; (80079c8 <MIDI_Init_FS+0x20>)
 80079b0:	4620      	mov	r0, r4
 80079b2:	f7fc fd91 	bl	80044d8 <USBD_MIDI_SetTxBuffer>
  USBD_MIDI_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079b6:	4620      	mov	r0, r4
 80079b8:	4904      	ldr	r1, [pc, #16]	; (80079cc <MIDI_Init_FS+0x24>)
 80079ba:	f7fc fd95 	bl	80044e8 <USBD_MIDI_SetRxBuffer>
}
 80079be:	2000      	movs	r0, #0
 80079c0:	bd10      	pop	{r4, pc}
 80079c2:	bf00      	nop
 80079c4:	20001304 	.word	0x20001304
 80079c8:	200023a4 	.word	0x200023a4
 80079cc:	20001ba4 	.word	0x20001ba4

080079d0 <MIDI_Transmit_FS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t MIDI_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079d0:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */ 
  USBD_MIDI_HandleTypeDef *hmidi = (USBD_MIDI_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079d2:	4c09      	ldr	r4, [pc, #36]	; (80079f8 <MIDI_Transmit_FS+0x28>)
 80079d4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hmidi->TxState != 0){
 80079d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079dc:	b10b      	cbz	r3, 80079e2 <MIDI_Transmit_FS+0x12>
  }
  USBD_MIDI_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_MIDI_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */ 
  return result;
}
 80079de:	2001      	movs	r0, #1
 80079e0:	bd10      	pop	{r4, pc}
 80079e2:	460a      	mov	r2, r1
 80079e4:	4601      	mov	r1, r0
  USBD_MIDI_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079e6:	4620      	mov	r0, r4
 80079e8:	f7fc fd76 	bl	80044d8 <USBD_MIDI_SetTxBuffer>
  result = USBD_MIDI_TransmitPacket(&hUsbDeviceFS);
 80079ec:	4620      	mov	r0, r4
}
 80079ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_MIDI_TransmitPacket(&hUsbDeviceFS);
 80079f2:	f7fc bd7f 	b.w	80044f4 <USBD_MIDI_TransmitPacket>
 80079f6:	bf00      	nop
 80079f8:	20001304 	.word	0x20001304

080079fc <Reset_Handler>:
 80079fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a34 <LoopFillZerobss+0x14>
 8007a00:	2100      	movs	r1, #0
 8007a02:	e003      	b.n	8007a0c <LoopCopyDataInit>

08007a04 <CopyDataInit>:
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <LoopFillZerobss+0x18>)
 8007a06:	585b      	ldr	r3, [r3, r1]
 8007a08:	5043      	str	r3, [r0, r1]
 8007a0a:	3104      	adds	r1, #4

08007a0c <LoopCopyDataInit>:
 8007a0c:	480b      	ldr	r0, [pc, #44]	; (8007a3c <LoopFillZerobss+0x1c>)
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <LoopFillZerobss+0x20>)
 8007a10:	1842      	adds	r2, r0, r1
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d3f6      	bcc.n	8007a04 <CopyDataInit>
 8007a16:	4a0b      	ldr	r2, [pc, #44]	; (8007a44 <LoopFillZerobss+0x24>)
 8007a18:	e002      	b.n	8007a20 <LoopFillZerobss>

08007a1a <FillZerobss>:
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f842 3b04 	str.w	r3, [r2], #4

08007a20 <LoopFillZerobss>:
 8007a20:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <LoopFillZerobss+0x28>)
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d3f9      	bcc.n	8007a1a <FillZerobss>
 8007a26:	f7fe ffa9 	bl	800697c <SystemInit>
 8007a2a:	f000 f817 	bl	8007a5c <__libc_init_array>
 8007a2e:	f7fe fc4f 	bl	80062d0 <main>
 8007a32:	4770      	bx	lr
 8007a34:	20050000 	.word	0x20050000
 8007a38:	08007ce8 	.word	0x08007ce8
 8007a3c:	20000000 	.word	0x20000000
 8007a40:	2000025c 	.word	0x2000025c
 8007a44:	2000025c 	.word	0x2000025c
 8007a48:	20002ba8 	.word	0x20002ba8

08007a4c <ADC_IRQHandler>:
 8007a4c:	e7fe      	b.n	8007a4c <ADC_IRQHandler>
	...

08007a50 <__errno>:
 8007a50:	4b01      	ldr	r3, [pc, #4]	; (8007a58 <__errno+0x8>)
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	200001f8 	.word	0x200001f8

08007a5c <__libc_init_array>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	4e0d      	ldr	r6, [pc, #52]	; (8007a94 <__libc_init_array+0x38>)
 8007a60:	4c0d      	ldr	r4, [pc, #52]	; (8007a98 <__libc_init_array+0x3c>)
 8007a62:	1ba4      	subs	r4, r4, r6
 8007a64:	10a4      	asrs	r4, r4, #2
 8007a66:	2500      	movs	r5, #0
 8007a68:	42a5      	cmp	r5, r4
 8007a6a:	d109      	bne.n	8007a80 <__libc_init_array+0x24>
 8007a6c:	4e0b      	ldr	r6, [pc, #44]	; (8007a9c <__libc_init_array+0x40>)
 8007a6e:	4c0c      	ldr	r4, [pc, #48]	; (8007aa0 <__libc_init_array+0x44>)
 8007a70:	f000 f8ea 	bl	8007c48 <_init>
 8007a74:	1ba4      	subs	r4, r4, r6
 8007a76:	10a4      	asrs	r4, r4, #2
 8007a78:	2500      	movs	r5, #0
 8007a7a:	42a5      	cmp	r5, r4
 8007a7c:	d105      	bne.n	8007a8a <__libc_init_array+0x2e>
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a84:	4798      	blx	r3
 8007a86:	3501      	adds	r5, #1
 8007a88:	e7ee      	b.n	8007a68 <__libc_init_array+0xc>
 8007a8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a8e:	4798      	blx	r3
 8007a90:	3501      	adds	r5, #1
 8007a92:	e7f2      	b.n	8007a7a <__libc_init_array+0x1e>
 8007a94:	08007ce0 	.word	0x08007ce0
 8007a98:	08007ce0 	.word	0x08007ce0
 8007a9c:	08007ce0 	.word	0x08007ce0
 8007aa0:	08007ce4 	.word	0x08007ce4

08007aa4 <malloc>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <malloc+0xc>)
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f000 b861 	b.w	8007b70 <_malloc_r>
 8007aae:	bf00      	nop
 8007ab0:	200001f8 	.word	0x200001f8

08007ab4 <free>:
 8007ab4:	4b02      	ldr	r3, [pc, #8]	; (8007ac0 <free+0xc>)
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f000 b80b 	b.w	8007ad4 <_free_r>
 8007abe:	bf00      	nop
 8007ac0:	200001f8 	.word	0x200001f8

08007ac4 <memset>:
 8007ac4:	4402      	add	r2, r0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d100      	bne.n	8007ace <memset+0xa>
 8007acc:	4770      	bx	lr
 8007ace:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad2:	e7f9      	b.n	8007ac8 <memset+0x4>

08007ad4 <_free_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	d045      	beq.n	8007b68 <_free_r+0x94>
 8007adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae0:	1f0c      	subs	r4, r1, #4
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bfb8      	it	lt
 8007ae6:	18e4      	addlt	r4, r4, r3
 8007ae8:	f000 f8ac 	bl	8007c44 <__malloc_lock>
 8007aec:	4a1f      	ldr	r2, [pc, #124]	; (8007b6c <_free_r+0x98>)
 8007aee:	6813      	ldr	r3, [r2, #0]
 8007af0:	4610      	mov	r0, r2
 8007af2:	b933      	cbnz	r3, 8007b02 <_free_r+0x2e>
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	6014      	str	r4, [r2, #0]
 8007af8:	4628      	mov	r0, r5
 8007afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007afe:	f000 b8a2 	b.w	8007c46 <__malloc_unlock>
 8007b02:	42a3      	cmp	r3, r4
 8007b04:	d90c      	bls.n	8007b20 <_free_r+0x4c>
 8007b06:	6821      	ldr	r1, [r4, #0]
 8007b08:	1862      	adds	r2, r4, r1
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	bf04      	itt	eq
 8007b0e:	681a      	ldreq	r2, [r3, #0]
 8007b10:	685b      	ldreq	r3, [r3, #4]
 8007b12:	6063      	str	r3, [r4, #4]
 8007b14:	bf04      	itt	eq
 8007b16:	1852      	addeq	r2, r2, r1
 8007b18:	6022      	streq	r2, [r4, #0]
 8007b1a:	6004      	str	r4, [r0, #0]
 8007b1c:	e7ec      	b.n	8007af8 <_free_r+0x24>
 8007b1e:	4613      	mov	r3, r2
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	b10a      	cbz	r2, 8007b28 <_free_r+0x54>
 8007b24:	42a2      	cmp	r2, r4
 8007b26:	d9fa      	bls.n	8007b1e <_free_r+0x4a>
 8007b28:	6819      	ldr	r1, [r3, #0]
 8007b2a:	1858      	adds	r0, r3, r1
 8007b2c:	42a0      	cmp	r0, r4
 8007b2e:	d10b      	bne.n	8007b48 <_free_r+0x74>
 8007b30:	6820      	ldr	r0, [r4, #0]
 8007b32:	4401      	add	r1, r0
 8007b34:	1858      	adds	r0, r3, r1
 8007b36:	4282      	cmp	r2, r0
 8007b38:	6019      	str	r1, [r3, #0]
 8007b3a:	d1dd      	bne.n	8007af8 <_free_r+0x24>
 8007b3c:	6810      	ldr	r0, [r2, #0]
 8007b3e:	6852      	ldr	r2, [r2, #4]
 8007b40:	605a      	str	r2, [r3, #4]
 8007b42:	4401      	add	r1, r0
 8007b44:	6019      	str	r1, [r3, #0]
 8007b46:	e7d7      	b.n	8007af8 <_free_r+0x24>
 8007b48:	d902      	bls.n	8007b50 <_free_r+0x7c>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	e7d3      	b.n	8007af8 <_free_r+0x24>
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	1821      	adds	r1, r4, r0
 8007b54:	428a      	cmp	r2, r1
 8007b56:	bf04      	itt	eq
 8007b58:	6811      	ldreq	r1, [r2, #0]
 8007b5a:	6852      	ldreq	r2, [r2, #4]
 8007b5c:	6062      	str	r2, [r4, #4]
 8007b5e:	bf04      	itt	eq
 8007b60:	1809      	addeq	r1, r1, r0
 8007b62:	6021      	streq	r1, [r4, #0]
 8007b64:	605c      	str	r4, [r3, #4]
 8007b66:	e7c7      	b.n	8007af8 <_free_r+0x24>
 8007b68:	bd38      	pop	{r3, r4, r5, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000290 	.word	0x20000290

08007b70 <_malloc_r>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	1ccd      	adds	r5, r1, #3
 8007b74:	f025 0503 	bic.w	r5, r5, #3
 8007b78:	3508      	adds	r5, #8
 8007b7a:	2d0c      	cmp	r5, #12
 8007b7c:	bf38      	it	cc
 8007b7e:	250c      	movcc	r5, #12
 8007b80:	2d00      	cmp	r5, #0
 8007b82:	4606      	mov	r6, r0
 8007b84:	db01      	blt.n	8007b8a <_malloc_r+0x1a>
 8007b86:	42a9      	cmp	r1, r5
 8007b88:	d903      	bls.n	8007b92 <_malloc_r+0x22>
 8007b8a:	230c      	movs	r3, #12
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	2000      	movs	r0, #0
 8007b90:	bd70      	pop	{r4, r5, r6, pc}
 8007b92:	f000 f857 	bl	8007c44 <__malloc_lock>
 8007b96:	4a21      	ldr	r2, [pc, #132]	; (8007c1c <_malloc_r+0xac>)
 8007b98:	6814      	ldr	r4, [r2, #0]
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	b991      	cbnz	r1, 8007bc4 <_malloc_r+0x54>
 8007b9e:	4c20      	ldr	r4, [pc, #128]	; (8007c20 <_malloc_r+0xb0>)
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	b91b      	cbnz	r3, 8007bac <_malloc_r+0x3c>
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f000 f83d 	bl	8007c24 <_sbrk_r>
 8007baa:	6020      	str	r0, [r4, #0]
 8007bac:	4629      	mov	r1, r5
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f000 f838 	bl	8007c24 <_sbrk_r>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d124      	bne.n	8007c02 <_malloc_r+0x92>
 8007bb8:	230c      	movs	r3, #12
 8007bba:	6033      	str	r3, [r6, #0]
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f000 f842 	bl	8007c46 <__malloc_unlock>
 8007bc2:	e7e4      	b.n	8007b8e <_malloc_r+0x1e>
 8007bc4:	680b      	ldr	r3, [r1, #0]
 8007bc6:	1b5b      	subs	r3, r3, r5
 8007bc8:	d418      	bmi.n	8007bfc <_malloc_r+0x8c>
 8007bca:	2b0b      	cmp	r3, #11
 8007bcc:	d90f      	bls.n	8007bee <_malloc_r+0x7e>
 8007bce:	600b      	str	r3, [r1, #0]
 8007bd0:	50cd      	str	r5, [r1, r3]
 8007bd2:	18cc      	adds	r4, r1, r3
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f000 f836 	bl	8007c46 <__malloc_unlock>
 8007bda:	f104 000b 	add.w	r0, r4, #11
 8007bde:	1d23      	adds	r3, r4, #4
 8007be0:	f020 0007 	bic.w	r0, r0, #7
 8007be4:	1ac3      	subs	r3, r0, r3
 8007be6:	d0d3      	beq.n	8007b90 <_malloc_r+0x20>
 8007be8:	425a      	negs	r2, r3
 8007bea:	50e2      	str	r2, [r4, r3]
 8007bec:	e7d0      	b.n	8007b90 <_malloc_r+0x20>
 8007bee:	428c      	cmp	r4, r1
 8007bf0:	684b      	ldr	r3, [r1, #4]
 8007bf2:	bf16      	itet	ne
 8007bf4:	6063      	strne	r3, [r4, #4]
 8007bf6:	6013      	streq	r3, [r2, #0]
 8007bf8:	460c      	movne	r4, r1
 8007bfa:	e7eb      	b.n	8007bd4 <_malloc_r+0x64>
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	6849      	ldr	r1, [r1, #4]
 8007c00:	e7cc      	b.n	8007b9c <_malloc_r+0x2c>
 8007c02:	1cc4      	adds	r4, r0, #3
 8007c04:	f024 0403 	bic.w	r4, r4, #3
 8007c08:	42a0      	cmp	r0, r4
 8007c0a:	d005      	beq.n	8007c18 <_malloc_r+0xa8>
 8007c0c:	1a21      	subs	r1, r4, r0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f000 f808 	bl	8007c24 <_sbrk_r>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d0cf      	beq.n	8007bb8 <_malloc_r+0x48>
 8007c18:	6025      	str	r5, [r4, #0]
 8007c1a:	e7db      	b.n	8007bd4 <_malloc_r+0x64>
 8007c1c:	20000290 	.word	0x20000290
 8007c20:	20000294 	.word	0x20000294

08007c24 <_sbrk_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4c06      	ldr	r4, [pc, #24]	; (8007c40 <_sbrk_r+0x1c>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	f7fe fe86 	bl	8006940 <_sbrk>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_sbrk_r+0x1a>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_sbrk_r+0x1a>
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	20002ba4 	.word	0x20002ba4

08007c44 <__malloc_lock>:
 8007c44:	4770      	bx	lr

08007c46 <__malloc_unlock>:
 8007c46:	4770      	bx	lr

08007c48 <_init>:
 8007c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4a:	bf00      	nop
 8007c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4e:	bc08      	pop	{r3}
 8007c50:	469e      	mov	lr, r3
 8007c52:	4770      	bx	lr

08007c54 <_fini>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	bf00      	nop
 8007c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5a:	bc08      	pop	{r3}
 8007c5c:	469e      	mov	lr, r3
 8007c5e:	4770      	bx	lr
